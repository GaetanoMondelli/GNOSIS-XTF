{
  "address": "0xA85A89e38b6bE6378Aa07145F7eC46F96baBcA43",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_hashi",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_bondRecipient",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAdapter",
          "name": "adapter",
          "type": "address"
        }
      ],
      "name": "AdapterAlreadyEnabled",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAdapter",
          "name": "adapter",
          "type": "address"
        }
      ],
      "name": "AdapterHasNotYetTimedOut",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAdapter",
          "name": "adapter",
          "type": "address"
        }
      ],
      "name": "AdapterNotEnabled",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAdapter",
          "name": "adapter",
          "type": "address"
        }
      ],
      "name": "AdapterNotQuarantined",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAdapter[]",
          "name": "adapters",
          "type": "address[]"
        },
        {
          "internalType": "contract IAdapter",
          "name": "adapter",
          "type": "address"
        }
      ],
      "name": "AdaptersCannotContainChallengedAdapter",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAdapter",
          "name": "adapterOne",
          "type": "address"
        },
        {
          "internalType": "contract IAdapter",
          "name": "adapterTwo",
          "type": "address"
        }
      ],
      "name": "AdaptersDisagree",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAdapter",
          "name": "adapter",
          "type": "address"
        }
      ],
      "name": "AlreadyQuarantined",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "domain",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "contract IAdapter[]",
          "name": "adapters",
          "type": "address[]"
        }
      ],
      "name": "CannotProveNoConfidence",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "challengeId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "domain",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "contract IAdapter",
          "name": "adapter",
          "type": "address"
        }
      ],
      "name": "ChallengeNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "domain",
          "type": "uint256"
        }
      ],
      "name": "ChallengeRangeAlreadySet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CountCannotBeZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "domain",
          "type": "uint256"
        }
      ],
      "name": "CountMustBeZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "challengeId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "domain",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "contract IAdapter",
          "name": "adapter",
          "type": "address"
        }
      ],
      "name": "DuplicateChallenge",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IHashi",
          "name": "hashi",
          "type": "address"
        }
      ],
      "name": "DuplicateHashiAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAdapter",
          "name": "adapterOne",
          "type": "address"
        },
        {
          "internalType": "contract IAdapter",
          "name": "adapterTwo",
          "type": "address"
        }
      ],
      "name": "DuplicateOrOutOfOrderAdapters",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "DuplicateThreashold",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAdapter",
          "name": "adapter",
          "type": "address"
        }
      ],
      "name": "InvalidAdapter",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "InvalidThreshold",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "domain",
          "type": "uint256"
        }
      ],
      "name": "NoAdaptersEnabled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoAdaptersGiven",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoConfidenceRequired",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAdapter",
          "name": "adapter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughValue",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAdapter",
          "name": "adapter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "OutOfRange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ThresholdNotMet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnequalArrayLengths",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "domain",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "contract IAdapter[]",
          "name": "adapters",
          "type": "address[]"
        }
      ],
      "name": "AdaptersDisabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "domain",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "contract IAdapter[]",
          "name": "adapters",
          "type": "address[]"
        }
      ],
      "name": "AdaptersEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address payable",
          "name": "bondRecipient",
          "type": "address"
        }
      ],
      "name": "BondRecipientSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "challengeId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "domain",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IAdapter",
          "name": "adapter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "challenger",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bond",
          "type": "uint256"
        }
      ],
      "name": "ChallengeCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "domain",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "range",
          "type": "uint256"
        }
      ],
      "name": "ChallengeRangeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "challengeId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "domain",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IAdapter",
          "name": "adapter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "challenger",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bond",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "challengeSuccessful",
          "type": "bool"
        }
      ],
      "name": "ChallengeResolved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IHashi",
          "name": "hashi",
          "type": "address"
        }
      ],
      "name": "HashiSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IHashi",
          "name": "hashi",
          "type": "address"
        }
      ],
      "name": "Init",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "domain",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "head",
          "type": "uint256"
        }
      ],
      "name": "NewHead",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "domain",
          "type": "uint256"
        }
      ],
      "name": "NoConfidenceDeclared",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "domain",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "contract IAdapter",
          "name": "adapter",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "quarantined",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "minimumBond",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "idDepth",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeout",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IGiriGiriBashi.Settings",
          "name": "settings",
          "type": "tuple"
        }
      ],
      "name": "SettingsInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "domain",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "ThresholdSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bondRecipient",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "domain",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "contract IAdapter",
          "name": "adapter",
          "type": "address"
        }
      ],
      "name": "challengeAdapter",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "domain",
          "type": "uint256"
        },
        {
          "internalType": "contract IAdapter[]",
          "name": "adapters",
          "type": "address[]"
        }
      ],
      "name": "checkAdapterOrderAndValidity",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "domain",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "contract IAdapter[]",
          "name": "adapters",
          "type": "address[]"
        }
      ],
      "name": "declareNoConfidence",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "domain",
          "type": "uint256"
        },
        {
          "internalType": "contract IAdapter[]",
          "name": "adapters",
          "type": "address[]"
        }
      ],
      "name": "disableAdapters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "domain",
          "type": "uint256"
        },
        {
          "internalType": "contract IAdapter[]",
          "name": "adapters",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "quarantined",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "minimumBond",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "idDepth",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeout",
              "type": "uint256"
            }
          ],
          "internalType": "struct IGiriGiriBashi.Settings[]",
          "name": "settings",
          "type": "tuple[]"
        }
      ],
      "name": "enableAdapters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "domain",
          "type": "uint256"
        },
        {
          "internalType": "contract IAdapter",
          "name": "adapter",
          "type": "address"
        }
      ],
      "name": "getAdapterLink",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IAdapter",
              "name": "previous",
              "type": "address"
            },
            {
              "internalType": "contract IAdapter",
              "name": "next",
              "type": "address"
            }
          ],
          "internalType": "struct IShuSho.Link",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "domain",
          "type": "uint256"
        }
      ],
      "name": "getAdapters",
      "outputs": [
        {
          "internalType": "contract IAdapter[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "challengeId",
          "type": "bytes32"
        }
      ],
      "name": "getChallenge",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "challenger",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bond",
              "type": "uint256"
            }
          ],
          "internalType": "struct IGiriGiriBashi.Challenge",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "domain",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "contract IAdapter",
          "name": "adapter",
          "type": "address"
        }
      ],
      "name": "getChallengeId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "challengeId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "domain",
          "type": "uint256"
        }
      ],
      "name": "getChallengeRange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "domain",
          "type": "uint256"
        }
      ],
      "name": "getDomain",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "threshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "count",
              "type": "uint256"
            }
          ],
          "internalType": "struct IShuSho.Domain",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "domain",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "contract IAdapter[]",
          "name": "adapters",
          "type": "address[]"
        }
      ],
      "name": "getHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "domain",
          "type": "uint256"
        }
      ],
      "name": "getHead",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "domain",
          "type": "uint256"
        },
        {
          "internalType": "contract IAdapter",
          "name": "adapter",
          "type": "address"
        }
      ],
      "name": "getSettings",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "quarantined",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "minimumBond",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "idDepth",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeout",
              "type": "uint256"
            }
          ],
          "internalType": "struct IGiriGiriBashi.Settings",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "domain_",
          "type": "uint256"
        }
      ],
      "name": "getThresholdAndCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "domain",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getThresholdHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "domain",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getUnanimousHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hashi",
      "outputs": [
        {
          "internalType": "contract IHashi",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "initParams",
          "type": "bytes"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "domain",
          "type": "uint256"
        },
        {
          "internalType": "contract IAdapter[]",
          "name": "currentAdapters",
          "type": "address[]"
        },
        {
          "internalType": "contract IAdapter[]",
          "name": "newAdapters",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "quarantined",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "minimumBond",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "idDepth",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeout",
              "type": "uint256"
            }
          ],
          "internalType": "struct IGiriGiriBashi.Settings[]",
          "name": "settings",
          "type": "tuple[]"
        }
      ],
      "name": "replaceQuarantinedAdapters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "domain",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "contract IAdapter",
          "name": "adapter",
          "type": "address"
        },
        {
          "internalType": "contract IAdapter[]",
          "name": "adapters",
          "type": "address[]"
        }
      ],
      "name": "resolveChallenge",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_bondRecipient",
          "type": "address"
        }
      ],
      "name": "setBondRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "domain",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "range",
          "type": "uint256"
        }
      ],
      "name": "setChallengeRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IHashi",
          "name": "_hashi",
          "type": "address"
        }
      ],
      "name": "setHashi",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "domain",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "setThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0a39067124d3721b9d281b3bf6bcbed9310908594fa25487e17a4b88f0f08d5e",
  "receipt": {
    "to": null,
    "from": "0x2a1F5eB3e84e58e6F1e565306298B9dE1273f203",
    "contractAddress": "0xA85A89e38b6bE6378Aa07145F7eC46F96baBcA43",
    "transactionIndex": 24,
    "gasUsed": "2652562",
    "logsBloom": "0x
    "blockHash": "0xa3dd0823ed3b2120d6af63293a4b66003eeda3f78a6c88453844298a997ebc9b",
    "transactionHash": "0x0a39067124d3721b9d281b3bf6bcbed9310908594fa25487e17a4b88f0f08d5e",
    "logs": [
      {
        "transactionIndex": 24,
        "blockNumber": 5740330,
        "transactionHash": "0x0a39067124d3721b9d281b3bf6bcbed9310908594fa25487e17a4b88f0f08d5e",
        "address": "0xA85A89e38b6bE6378Aa07145F7eC46F96baBcA43",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002a1f5eb3e84e58e6f1e565306298b9de1273f203"
        ],
        "data": "0x",
        "logIndex": 35,
        "blockHash": "0xa3dd0823ed3b2120d6af63293a4b66003eeda3f78a6c88453844298a997ebc9b"
      },
      {
        "transactionIndex": 24,
        "blockNumber": 5740330,
        "transactionHash": "0x0a39067124d3721b9d281b3bf6bcbed9310908594fa25487e17a4b88f0f08d5e",
        "address": "0xA85A89e38b6bE6378Aa07145F7eC46F96baBcA43",
        "topics": [
          "0x1e44815867bf36700178046dec2874b58492fa049a6775df578903717bb05b35",
          "0x000000000000000000000000fc2c9d0094c6d64f3a4e4c6bf30e2229f4268b70"
        ],
        "data": "0x",
        "logIndex": 36,
        "blockHash": "0xa3dd0823ed3b2120d6af63293a4b66003eeda3f78a6c88453844298a997ebc9b"
      },
      {
        "transactionIndex": 24,
        "blockNumber": 5740330,
        "transactionHash": "0x0a39067124d3721b9d281b3bf6bcbed9310908594fa25487e17a4b88f0f08d5e",
        "address": "0xA85A89e38b6bE6378Aa07145F7eC46F96baBcA43",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000002a1f5eb3e84e58e6f1e565306298b9de1273f203",
          "0x0000000000000000000000002a1f5eb3e84e58e6f1e565306298b9de1273f203"
        ],
        "data": "0x",
        "logIndex": 37,
        "blockHash": "0xa3dd0823ed3b2120d6af63293a4b66003eeda3f78a6c88453844298a997ebc9b"
      },
      {
        "transactionIndex": 24,
        "blockNumber": 5740330,
        "transactionHash": "0x0a39067124d3721b9d281b3bf6bcbed9310908594fa25487e17a4b88f0f08d5e",
        "address": "0xA85A89e38b6bE6378Aa07145F7eC46F96baBcA43",
        "topics": [
          "0x45acd56f401dc3db1d520e5e214f090b4ab3e3fbf42fd24596cb511edaad876a",
          "0x0000000000000000000000002a1f5eb3e84e58e6f1e565306298b9de1273f203",
          "0x000000000000000000000000fc2c9d0094c6d64f3a4e4c6bf30e2229f4268b70"
        ],
        "data": "0x",
        "logIndex": 38,
        "blockHash": "0xa3dd0823ed3b2120d6af63293a4b66003eeda3f78a6c88453844298a997ebc9b"
      },
      {
        "transactionIndex": 24,
        "blockNumber": 5740330,
        "transactionHash": "0x0a39067124d3721b9d281b3bf6bcbed9310908594fa25487e17a4b88f0f08d5e",
        "address": "0xA85A89e38b6bE6378Aa07145F7eC46F96baBcA43",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 39,
        "blockHash": "0xa3dd0823ed3b2120d6af63293a4b66003eeda3f78a6c88453844298a997ebc9b"
      }
    ],
    "blockNumber": 5740330,
    "cumulativeGasUsed": "4595839",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2a1F5eB3e84e58e6F1e565306298B9dE1273f203",
    "0xFC2c9d0094c6D64F3a4e4C6BF30E2229F4268b70",
    "0x2a1F5eB3e84e58e6F1e565306298B9dE1273f203"
  ],
  "numDeployments": 1,
  "solcInputHash": "85327ffcea66087302149c04a2758b5d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_hashi\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_bondRecipient\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"contract IAdapter\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"AdapterAlreadyEnabled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IAdapter\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"AdapterHasNotYetTimedOut\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IAdapter\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"AdapterNotEnabled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IAdapter\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"AdapterNotQuarantined\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IAdapter[]\",\"name\":\"adapters\",\"type\":\"address[]\"},{\"internalType\":\"contract IAdapter\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"AdaptersCannotContainChallengedAdapter\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IAdapter\",\"name\":\"adapterOne\",\"type\":\"address\"},{\"internalType\":\"contract IAdapter\",\"name\":\"adapterTwo\",\"type\":\"address\"}],\"name\":\"AdaptersDisagree\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IAdapter\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"AlreadyQuarantined\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"contract IAdapter[]\",\"name\":\"adapters\",\"type\":\"address[]\"}],\"name\":\"CannotProveNoConfidence\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"challengeId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"contract IAdapter\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"ChallengeNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"}],\"name\":\"ChallengeRangeAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CountCannotBeZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"}],\"name\":\"CountMustBeZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"challengeId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"contract IAdapter\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"DuplicateChallenge\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IHashi\",\"name\":\"hashi\",\"type\":\"address\"}],\"name\":\"DuplicateHashiAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IAdapter\",\"name\":\"adapterOne\",\"type\":\"address\"},{\"internalType\":\"contract IAdapter\",\"name\":\"adapterTwo\",\"type\":\"address\"}],\"name\":\"DuplicateOrOutOfOrderAdapters\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"DuplicateThreashold\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IAdapter\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"InvalidAdapter\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"InvalidThreshold\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"}],\"name\":\"NoAdaptersEnabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoAdaptersGiven\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoConfidenceRequired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IAdapter\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NotEnoughValue\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IAdapter\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"OutOfRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ThresholdNotMet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnequalArrayLengths\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IAdapter[]\",\"name\":\"adapters\",\"type\":\"address[]\"}],\"name\":\"AdaptersDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IAdapter[]\",\"name\":\"adapters\",\"type\":\"address[]\"}],\"name\":\"AdaptersEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"bondRecipient\",\"type\":\"address\"}],\"name\":\"BondRecipientSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"challengeId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IAdapter\",\"name\":\"adapter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"}],\"name\":\"ChallengeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"range\",\"type\":\"uint256\"}],\"name\":\"ChallengeRangeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"challengeId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IAdapter\",\"name\":\"adapter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"challengeSuccessful\",\"type\":\"bool\"}],\"name\":\"ChallengeResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IHashi\",\"name\":\"hashi\",\"type\":\"address\"}],\"name\":\"HashiSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IHashi\",\"name\":\"hashi\",\"type\":\"address\"}],\"name\":\"Init\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"head\",\"type\":\"uint256\"}],\"name\":\"NewHead\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"}],\"name\":\"NoConfidenceDeclared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IAdapter\",\"name\":\"adapter\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"quarantined\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minimumBond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"idDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IGiriGiriBashi.Settings\",\"name\":\"settings\",\"type\":\"tuple\"}],\"name\":\"SettingsInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"ThresholdSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bondRecipient\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"contract IAdapter\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"challengeAdapter\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"},{\"internalType\":\"contract IAdapter[]\",\"name\":\"adapters\",\"type\":\"address[]\"}],\"name\":\"checkAdapterOrderAndValidity\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"contract IAdapter[]\",\"name\":\"adapters\",\"type\":\"address[]\"}],\"name\":\"declareNoConfidence\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"},{\"internalType\":\"contract IAdapter[]\",\"name\":\"adapters\",\"type\":\"address[]\"}],\"name\":\"disableAdapters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"},{\"internalType\":\"contract IAdapter[]\",\"name\":\"adapters\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"quarantined\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minimumBond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"idDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"}],\"internalType\":\"struct IGiriGiriBashi.Settings[]\",\"name\":\"settings\",\"type\":\"tuple[]\"}],\"name\":\"enableAdapters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"},{\"internalType\":\"contract IAdapter\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"getAdapterLink\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IAdapter\",\"name\":\"previous\",\"type\":\"address\"},{\"internalType\":\"contract IAdapter\",\"name\":\"next\",\"type\":\"address\"}],\"internalType\":\"struct IShuSho.Link\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"}],\"name\":\"getAdapters\",\"outputs\":[{\"internalType\":\"contract IAdapter[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"challengeId\",\"type\":\"bytes32\"}],\"name\":\"getChallenge\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"challenger\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"}],\"internalType\":\"struct IGiriGiriBashi.Challenge\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"contract IAdapter\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"getChallengeId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"challengeId\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"}],\"name\":\"getChallengeRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"}],\"name\":\"getDomain\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"internalType\":\"struct IShuSho.Domain\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"contract IAdapter[]\",\"name\":\"adapters\",\"type\":\"address[]\"}],\"name\":\"getHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"}],\"name\":\"getHead\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"},{\"internalType\":\"contract IAdapter\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"getSettings\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"quarantined\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minimumBond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"idDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"}],\"internalType\":\"struct IGiriGiriBashi.Settings\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"domain_\",\"type\":\"uint256\"}],\"name\":\"getThresholdAndCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getThresholdHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getUnanimousHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hashi\",\"outputs\":[{\"internalType\":\"contract IHashi\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"initParams\",\"type\":\"bytes\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"},{\"internalType\":\"contract IAdapter[]\",\"name\":\"currentAdapters\",\"type\":\"address[]\"},{\"internalType\":\"contract IAdapter[]\",\"name\":\"newAdapters\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"quarantined\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minimumBond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"idDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"}],\"internalType\":\"struct IGiriGiriBashi.Settings[]\",\"name\":\"settings\",\"type\":\"tuple[]\"}],\"name\":\"replaceQuarantinedAdapters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"contract IAdapter\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"contract IAdapter[]\",\"name\":\"adapters\",\"type\":\"address[]\"}],\"name\":\"resolveChallenge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_bondRecipient\",\"type\":\"address\"}],\"name\":\"setBondRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"range\",\"type\":\"uint256\"}],\"name\":\"setChallengeRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHashi\",\"name\":\"_hashi\",\"type\":\"address\"}],\"name\":\"setHashi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"setThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AdaptersDisabled(uint256,address[])\":{\"details\":\"Emitted when adapters are disabled for a specific domain.\",\"params\":{\"adapters\":\"- An array of disabled adapter addresses associated with this event.\",\"domain\":\"- The domain associated with the disabled adapters.\"}},\"AdaptersEnabled(uint256,address[])\":{\"details\":\"Emitted when adapters are enabled for a specific domain.\",\"params\":{\"adapters\":\"- An array of enabled adapter addresses associated with this event.\",\"domain\":\"- The domain associated with the enabled adapters.\"}},\"BondRecipientSet(address)\":{\"details\":\"Emitted when the bond recipient address is set.\",\"params\":{\"bondRecipient\":\"- The new bond recipient address as an Ethereum address.\"}},\"ChallengeCreated(bytes32,uint256,uint256,address,address,uint256,uint256)\":{\"details\":\"Emitted when a challenge is created.\",\"params\":{\"adapter\":\"- The adapter address associated with the challenge.\",\"bond\":\"- The bond amount associated with the challenge.\",\"challengeId\":\"- The unique identifier for the challenge.\",\"challenger\":\"- The address of the challenger.\",\"domain\":\"- The domain associated with the challenge.\",\"id\":\"- The identifier associated with the challenge.\",\"timestamp\":\"- The timestamp when the challenge was created.\"}},\"ChallengeRangeUpdated(uint256,uint256)\":{\"details\":\"Emitted when the challenge range is updated.\",\"params\":{\"domain\":\"- The domain associated with the updated challenge range.\",\"range\":\"- The new challenge range as a Uint256 identifier.\"}},\"ChallengeResolved(bytes32,uint256,uint256,address,address,uint256,bool)\":{\"details\":\"Emitted when a challenge is resolved.\",\"params\":{\"adapter\":\"- The adapter address associated with the resolved challenge.\",\"bond\":\"- The bond amount associated with the resolved challenge.\",\"challengeId\":\"- The unique identifier for the resolved challenge.\",\"challengeSuccessful\":\"- A boolean indicating whether the challenge was successful.\",\"challenger\":\"- The address of the challenger.\",\"domain\":\"- The domain associated with the resolved challenge.\",\"id\":\"- The identifier associated with the resolved challenge.\"}},\"HashiSet(address)\":{\"details\":\"Emitted when the address of the IHashi contract is set.\",\"params\":{\"hashi\":\"- The address of the IHashi contract associated with this event.\"}},\"Init(address,address)\":{\"details\":\"Emitted when initialization occurs with the owner's address and the IHashi contract address.\",\"params\":{\"hashi\":\"- The address of the IHashi contract associated with this event.\",\"owner\":\"- The address of the owner associated with this event.\"}},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"NewHead(uint256,uint256)\":{\"details\":\"Emitted when a new head is updated.\",\"params\":{\"domain\":\"- The domain associated with the new head.\",\"head\":\"- The new head as a Uint256 identifier.\"}},\"NoConfidenceDeclared(uint256)\":{\"details\":\"Emitted when a declaration of no confidence is made for a specific domain.\",\"params\":{\"domain\":\"- The domain associated with the declaration.\"}},\"SettingsInitialized(uint256,address,(bool,uint256,uint256,uint256,uint256))\":{\"details\":\"Emitted when settings are initialized for a specific domain and adapter.\",\"params\":{\"adapter\":\"- The adapter address associated with the initialized settings.\",\"domain\":\"- The domain associated with the initialized settings.\",\"settings\":\"- The initialized settings object.\"}},\"ThresholdSet(uint256,uint256)\":{\"details\":\"Emitted when the threshold is set for a specific domain.\",\"params\":{\"domain\":\"- The domain associated with the set threshold.\",\"threshold\":\"- The new threshold value associated with this event.\"}}},\"kind\":\"dev\",\"methods\":{\"challengeAdapter(uint256,uint256,address)\":{\"details\":\"Challenges the adapter to provide a response. If the adapter fails, it can be quarantined.\",\"params\":{\"adapter\":\"- The address of the adapter to challenge.\",\"domain\":\"- The Uint256 identifier for the domain.\",\"id\":\"- The Uint256 identifier for the challenge.\"}},\"checkAdapterOrderAndValidity(uint256,address[])\":{\"details\":\"Checks the order and validity of adapters for a given domain.\",\"params\":{\"_adapters\":\"- An array of adapter instances.\",\"domain\":\"- The Uint256 identifier for the domain.\"}},\"declareNoConfidence(uint256,uint256,address[])\":{\"details\":\"Show that enough adapters disagree that they could not make a threshold if the remainder all agree with one.\",\"params\":{\"adapters\":\"- An array of adapter instances.\",\"domain\":\"- The Uint256 identifier for the domain.\",\"id\":\"- The Uint256 identifier.\"}},\"disableAdapters(uint256,address[])\":{\"details\":\"Disables a set of adapters for a given domain.\",\"params\":{\"adapters\":\"- An array of adapter instances to be disabled.\",\"domain\":\"- The Uint256 identifier for the domain.\"}},\"enableAdapters(uint256,address[],(bool,uint256,uint256,uint256,uint256)[])\":{\"details\":\"Enables a set of adapters for a given domain with specific settings.\",\"params\":{\"adapters\":\"- An array of adapter instances.\",\"domain\":\"- The Uint256 identifier for the domain.\",\"settings\":\"- An array of settings, corresponding to each adapter.\"}},\"getAdapterLink(uint256,address)\":{\"details\":\"Get the previous and the next adapter given a domain and an adapter.\",\"params\":{\"adapter\":\"- IAdapter value for the adapter.\",\"domain\":\"- Uint256 identifier for the domain.\"},\"returns\":{\"_0\":\"link - The Link struct containing the previous and the next adapter.\"}},\"getAdapters(uint256)\":{\"details\":\"Returns an array of enabled adapters for a given domain.\",\"params\":{\"domain\":\"- Uint256 identifier for the domain for which to list adapters.\"},\"returns\":{\"_0\":\"adapters - The adapters for a given domain.\"}},\"getChallenge(bytes32)\":{\"details\":\"Get the current challenge given a challengeId.\",\"params\":{\"challengeId\":\"- The Bytes32 identifier for the challenge.\"},\"returns\":{\"_0\":\"challenge - Challenge indicating the challenge parameters.\"}},\"getChallengeId(uint256,uint256,address)\":{\"details\":\"Gets the challenge ID for a given domain, ID, and adapter.\",\"params\":{\"adapter\":\"- The adapter instance.\",\"domain\":\"- The Uint256 identifier for the domain.\",\"id\":\"- The Uint256 identifier.\"},\"returns\":{\"challengeId\":\"The computed challenge ID as a bytes32 hash.\"}},\"getChallengeRange(uint256)\":{\"details\":\"Get how far beyond the current highestId can be challenged.\",\"params\":{\"domain\":\"- The Uint256 identifier for the domain.\"},\"returns\":{\"_0\":\"range - Uint256 indicating the challenge range.\"}},\"getDomain(uint256)\":{\"details\":\"Get the current configuration for a given domain.\",\"params\":{\"domain\":\"- Uint256 identifier for the domain.\"},\"returns\":{\"_0\":\"domain - The Domain struct containing the current configuration for a given domain.\"}},\"getHash(uint256,uint256,address[])\":{\"details\":\"Returns the hash unanimously agreed upon by all of the given adapters.\",\"params\":{\"adapters\":\"- Array of adapter addresses to query.\",\"domain\":\"- Uint256 identifier for the domain to query.\",\"id\":\"- Uint256 identifier to query.\"},\"returns\":{\"hash\":\"- Bytes32 hash agreed upon by the adapters for the given domain.\"}},\"getHead(uint256)\":{\"details\":\"Returns the highest id reported for a given id\",\"params\":{\"domain\":\"- Uint256 identifier for the domain to query.\"},\"returns\":{\"_0\":\"id - Uint256 indicating the highest id reported.\"}},\"getSettings(uint256,address)\":{\"details\":\"Get the current settings for a given adapter.\",\"params\":{\"adapter\":\"- The adapter.\",\"domain\":\"- Uint256 identifier for the domain to query.\"},\"returns\":{\"_0\":\"settings - The Settings for the given adapter.\"}},\"getThresholdAndCount(uint256)\":{\"details\":\"Returns the threshold and count for a given domain.\",\"params\":{\"domain\":\"- Uint256 identifier for the domain.\"},\"returns\":{\"_0\":\"threshold - Uint256 adapters threshold for the given domain.\",\"_1\":\"count - Uint256 adapters count for the given domain.\"}},\"getThresholdHash(uint256,uint256)\":{\"details\":\"Returns the hash agreed upon by a threshold of the enabled adapters.\",\"params\":{\"domain\":\"- Uint256 identifier for the domain to query.\",\"id\":\"- Uint256 identifier to query.\"},\"returns\":{\"hash\":\"- Bytes32 hash agreed upon by a threshold of the adapters for the given domain.\"}},\"getUnanimousHash(uint256,uint256)\":{\"details\":\"Returns the hash unanimously agreed upon by ALL of the enabled adapters.\",\"params\":{\"domain\":\"- Uint256 identifier for the domain to query.\",\"id\":\"- Uint256 identifier to query.\"},\"returns\":{\"hash\":\"- Bytes32 hash agreed upon by the adapters for the given domain.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"replaceQuarantinedAdapters(uint256,address[],address[],(bool,uint256,uint256,uint256,uint256)[])\":{\"details\":\"Replaces the quarantined adapters for a given domain with new adapters and settings.\",\"params\":{\"currentAdapters\":\"- An array of current adapter instances to be replaced.\",\"domain\":\"- The Uint256 identifier for the domain.\",\"newAdapters\":\"- An array of new adapter instances to replace the current ones.\",\"settings\":\"- An array of settings corresponding to the new adapters.\"}},\"resolveChallenge(uint256,uint256,address,address[])\":{\"details\":\"Resolves a challenge by comparing results from a specific adapter with others.\",\"params\":{\"adapter\":\"- The adapter instance for comparison.\",\"adapters\":\"- An array of adapter instances for comparison.\",\"domain\":\"- The Uint256 identifier for the domain.\",\"id\":\"- The Uint256 identifier.\"},\"returns\":{\"success\":\"A boolean indicating the success of the challenge resolution.\"}},\"setBondRecipient(address)\":{\"details\":\"Sets the bond recipient address for payments.\",\"params\":{\"bondRecipient\":\"- The address where bond payments should be sent.\"}},\"setChallengeRange(uint256,uint256)\":{\"details\":\"Sets the challenge range for a specific domain.\",\"params\":{\"domain\":\"- The Uint256 identifier for the domain.\",\"range\":\"- The Uint256 range to set for the given domain.\"}},\"setThreshold(uint256,uint256)\":{\"details\":\"Sets the threshold for a specific domain.\",\"params\":{\"domain\":\"- The Uint256 identifier for the domain.\",\"threshold\":\"- The Uint256 threshold to set for the given domain.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"challengeAdapter(uint256,uint256,address)\":{\"notice\":\"Caller must pay a minimum bond to issue the challenge. This bond should be high enough to cover the gas costs for successfully completing the challenge.\"},\"getHash(uint256,uint256,address[])\":{\"notice\":\"Adapters must be in numerical order from smallest to largest and contain no duplicates.Reverts if adapters are out of order or contain duplicates.Reverts if adapters disagree.Revert if the adapters do not yet have the hash for the given ID.Reverts if no adapters are set for the given domain.\"},\"getThresholdAndCount(uint256)\":{\"notice\":\"If the threshold for a domain has not been set, or is explicitly set to 0, this function will return a threshold equal to the adapters count for the given domain.\"},\"getThresholdHash(uint256,uint256)\":{\"notice\":\"Reverts if no threshold is not reached.Reverts if no adapters are set for the given domain.\"},\"getUnanimousHash(uint256,uint256)\":{\"notice\":\"Reverts if adapters disagree.Revert if the adapters do not yet have the hash for the given ID.Reverts if no adapters are set for the given domain.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ownable/GiriGiriBashi.sol\":\"GiriGiriBashi\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"contracts/interfaces/IAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IAdapter\\n */\\ninterface IAdapter {\\n    error ConflictingBlockHeader(uint256 blockNumber, bytes32 blockHash, bytes32 storedBlockHash);\\n    error InvalidBlockHeaderLength(uint256 length);\\n    error InvalidBlockHeaderRLP();\\n\\n    /**\\n     * @dev Emitted when a hash is stored.\\n     * @param id - The ID of the stored hash.\\n     * @param hash - The stored hash as bytes32 values.\\n     */\\n    event HashStored(uint256 indexed id, bytes32 indexed hash);\\n\\n    /**\\n     * @dev Returns the hash for a given ID.\\n     * @param domain - Identifier for the domain to query.\\n     * @param id - Identifier for the ID to query.\\n     * @return hash Bytes32 hash for the given ID on the given domain.\\n     * @notice MUST return bytes32(0) if the hash is not present.\\n     */\\n    function getHash(uint256 domain, uint256 id) external view returns (bytes32 hash);\\n}\\n\",\"keccak256\":\"0xc3c6fca20c390f619072fe34bde40b91ceca4bbd1627a892af627b2e10f8a38d\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IGiriGiriBashi.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport { IAdapter } from \\\"./IAdapter.sol\\\";\\nimport { IHashi } from \\\"./IHashi.sol\\\";\\nimport { IShuSho } from \\\"./IShuSho.sol\\\";\\n\\n/**\\n * @title IGiriGiriBashi\\n */\\ninterface IGiriGiriBashi is IShuSho {\\n    struct Challenge {\\n        address payable challenger; // account that raised the challenge.\\n        uint256 timestamp; // timestamp when the challenge was created.\\n        uint256 bond; // bond paid by the challenger.\\n    }\\n\\n    struct Settings {\\n        bool quarantined; // whether or not the adapter has been quarantined.\\n        uint256 minimumBond; // amount that must be bonded alongside a challenge.\\n        uint256 startId; // earliest id that the adapter could have stored.\\n        uint256 idDepth; // how far behind the current head can this adapter safely report. 0 equals infinite.\\n        uint256 timeout; // grace period in which the adapter must report on an in-range id after being challenged.\\n    }\\n\\n    error AdaptersCannotContainChallengedAdapter(IAdapter[] adapters, IAdapter adapter);\\n    error AdapterHasNotYetTimedOut(IAdapter adapter);\\n    error AdapterNotQuarantined(IAdapter adapter);\\n    error AlreadyQuarantined(IAdapter adapter);\\n    error CannotProveNoConfidence(uint256 domain, uint256 id, IAdapter[] adapters);\\n    error ChallengeNotFound(bytes32 challengeId, uint256 domain, uint256 id, IAdapter adapter);\\n    error ChallengeRangeAlreadySet(uint256 domain);\\n    error CountMustBeZero(uint256 domain);\\n    error DuplicateChallenge(bytes32 challengeId, uint256 domain, uint256 id, IAdapter adapter);\\n    error NoConfidenceRequired();\\n    error NotEnoughValue(IAdapter adapter, uint256 value);\\n    error OutOfRange(IAdapter adapter, uint256 id);\\n    error UnequalArrayLengths();\\n\\n    /**\\n     * @dev Emitted when the bond recipient address is set.\\n     * @param bondRecipient - The new bond recipient address as an Ethereum address.\\n     */\\n    event BondRecipientSet(address payable bondRecipient);\\n\\n    /**\\n     * @dev Emitted when a challenge is created.\\n     * @param challengeId - The unique identifier for the challenge.\\n     * @param domain - The domain associated with the challenge.\\n     * @param id - The identifier associated with the challenge.\\n     * @param adapter - The adapter address associated with the challenge.\\n     * @param challenger - The address of the challenger.\\n     * @param timestamp - The timestamp when the challenge was created.\\n     * @param bond - The bond amount associated with the challenge.\\n     */\\n    event ChallengeCreated(\\n        bytes32 challengeId,\\n        uint256 indexed domain,\\n        uint256 id,\\n        IAdapter indexed adapter,\\n        address indexed challenger,\\n        uint256 timestamp,\\n        uint256 bond\\n    );\\n\\n    /**\\n     * @dev Emitted when the challenge range is updated.\\n     * @param domain - The domain associated with the updated challenge range.\\n     * @param range - The new challenge range as a Uint256 identifier.\\n     */\\n    event ChallengeRangeUpdated(uint256 domain, uint256 range);\\n\\n    /**\\n     * @dev Emitted when a challenge is resolved.\\n     * @param challengeId - The unique identifier for the resolved challenge.\\n     * @param domain - The domain associated with the resolved challenge.\\n     * @param id - The identifier associated with the resolved challenge.\\n     * @param adapter - The adapter address associated with the resolved challenge.\\n     * @param challenger - The address of the challenger.\\n     * @param bond - The bond amount associated with the resolved challenge.\\n     * @param challengeSuccessful - A boolean indicating whether the challenge was successful.\\n     */\\n    event ChallengeResolved(\\n        bytes32 challengeId,\\n        uint256 indexed domain,\\n        uint256 id,\\n        IAdapter indexed adapter,\\n        address indexed challenger,\\n        uint256 bond,\\n        bool challengeSuccessful\\n    );\\n\\n    /**\\n     * @dev Emitted when a new head is updated.\\n     * @param domain - The domain associated with the new head.\\n     * @param head - The new head as a Uint256 identifier.\\n     */\\n    event NewHead(uint256 domain, uint256 head);\\n\\n    /**\\n     * @dev Emitted when a declaration of no confidence is made for a specific domain.\\n     * @param domain - The domain associated with the declaration.\\n     */\\n    event NoConfidenceDeclared(uint256 domain);\\n\\n    /**\\n     * @dev Emitted when settings are initialized for a specific domain and adapter.\\n     * @param domain - The domain associated with the initialized settings.\\n     * @param adapter - The adapter address associated with the initialized settings.\\n     * @param settings - The initialized settings object.\\n     */\\n    event SettingsInitialized(uint256 domain, IAdapter adapter, Settings settings);\\n\\n    /**\\n     * @dev Challenges the adapter to provide a response. If the adapter fails, it can be quarantined.\\n     * @param domain - The Uint256 identifier for the domain.\\n     * @param id - The Uint256 identifier for the challenge.\\n     * @param adapter - The address of the adapter to challenge.\\n     * @notice Caller must pay a minimum bond to issue the challenge. This bond should be high enough to cover the gas costs for successfully completing the challenge.\\n     */\\n    function challengeAdapter(uint256 domain, uint256 id, IAdapter adapter) external payable;\\n\\n    /**\\n     * @dev Show that enough adapters disagree that they could not make a threshold if the remainder all agree with one.\\n     * @param domain - The Uint256 identifier for the domain.\\n     * @param id - The Uint256 identifier.\\n     * @param adapters - An array of adapter instances.\\n     */\\n    function declareNoConfidence(uint256 domain, uint256 id, IAdapter[] memory adapters) external;\\n\\n    /**\\n     * @dev Disables a set of adapters for a given domain.\\n     * @param domain - The Uint256 identifier for the domain.\\n     * @param adapters - An array of adapter instances to be disabled.\\n     */\\n    function disableAdapters(uint256 domain, IAdapter[] memory adapters) external;\\n\\n    /**\\n     * @dev Enables a set of adapters for a given domain with specific settings.\\n     * @param domain - The Uint256 identifier for the domain.\\n     * @param adapters - An array of adapter instances.\\n     * @param settings - An array of settings, corresponding to each adapter.\\n     */\\n    function enableAdapters(uint256 domain, IAdapter[] memory adapters, Settings[] memory settings) external;\\n\\n    /**\\n     * @dev Get the current challenge given a challengeId.\\n     * @param challengeId - The Bytes32 identifier for the challenge.\\n     * @return challenge - Challenge indicating the challenge parameters.\\n     */\\n    function getChallenge(bytes32 challengeId) external view returns (Challenge memory);\\n\\n    /**\\n     * @dev Gets the challenge ID for a given domain, ID, and adapter.\\n     * @param domain - The Uint256 identifier for the domain.\\n     * @param id - The Uint256 identifier.\\n     * @param adapter - The adapter instance.\\n     * @return The computed challenge ID as a bytes32 hash.\\n     */\\n    function getChallengeId(uint256 domain, uint256 id, IAdapter adapter) external pure returns (bytes32);\\n\\n    /**\\n     * @dev Get how far beyond the current highestId can be challenged.\\n     * @param domain - The Uint256 identifier for the domain.\\n     * @return range - Uint256 indicating the challenge range.\\n     */\\n    function getChallengeRange(uint256 domain) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the hash agreed upon by a threshold of the enabled adapters.\\n     * @param domain - Uint256 identifier for the domain to query.\\n     * @param id - Uint256 identifier to query.\\n     * @return hash - Bytes32 hash agreed upon by a threshold of the adapters for the given domain.\\n     * @notice Reverts if no threshold is not reached.\\n     * @notice Reverts if no adapters are set for the given domain.\\n     */\\n    function getThresholdHash(uint256 domain, uint256 id) external returns (bytes32);\\n\\n    /**\\n     * @dev Returns the hash unanimously agreed upon by ALL of the enabled adapters.\\n     * @param domain - Uint256 identifier for the domain to query.\\n     * @param id - Uint256 identifier to query.\\n     * @return hash - Bytes32 hash agreed upon by the adapters for the given domain.\\n     * @notice Reverts if adapters disagree.\\n     * @notice Revert if the adapters do not yet have the hash for the given ID.\\n     * @notice Reverts if no adapters are set for the given domain.\\n     */\\n    function getUnanimousHash(uint256 domain, uint256 id) external returns (bytes32);\\n\\n    /**\\n     * @dev Returns the hash unanimously agreed upon by all of the given adapters.\\n     * @param domain - Uint256 identifier for the domain to query.\\n     * @param adapters - Array of adapter addresses to query.\\n     * @param id - Uint256 identifier to query.\\n     * @return hash - Bytes32 hash agreed upon by the adapters for the given domain.\\n     * @notice Adapters must be in numerical order from smallest to largest and contain no duplicates.\\n     * @notice Reverts if adapters are out of order or contain duplicates.\\n     * @notice Reverts if adapters disagree.\\n     * @notice Revert if the adapters do not yet have the hash for the given ID.\\n     * @notice Reverts if no adapters are set for the given domain.\\n     */\\n    function getHash(uint256 domain, uint256 id, IAdapter[] memory adapters) external returns (bytes32);\\n\\n    /**\\n     * @dev Returns the highest id reported for a given id\\n     * @param domain - Uint256 identifier for the domain to query.\\n     * @return id - Uint256 indicating the highest id reported.\\n     */\\n    function getHead(uint256 domain) external view returns (uint256);\\n\\n    /**\\n     * @dev Get the current settings for a given adapter.\\n     * @param domain - Uint256 identifier for the domain to query.\\n     * @param adapter - The adapter.\\n     * @return settings - The Settings for the given adapter.\\n     */\\n    function getSettings(uint256 domain, IAdapter adapter) external view returns (Settings memory);\\n\\n    /**\\n     * @dev Replaces the quarantined adapters for a given domain with new adapters and settings.\\n     * @param domain - The Uint256 identifier for the domain.\\n     * @param currentAdapters - An array of current adapter instances to be replaced.\\n     * @param newAdapters - An array of new adapter instances to replace the current ones.\\n     * @param settings - An array of settings corresponding to the new adapters.\\n     */\\n    function replaceQuarantinedAdapters(\\n        uint256 domain,\\n        IAdapter[] memory currentAdapters,\\n        IAdapter[] memory newAdapters,\\n        Settings[] memory settings\\n    ) external;\\n\\n    /**\\n     * @dev Resolves a challenge by comparing results from a specific adapter with others.\\n     * @param domain - The Uint256 identifier for the domain.\\n     * @param id - The Uint256 identifier.\\n     * @param adapter - The adapter instance for comparison.\\n     * @param adapters - An array of adapter instances for comparison.\\n     * @return A boolean indicating the success of the challenge resolution.\\n     */\\n    function resolveChallenge(\\n        uint256 domain,\\n        uint256 id,\\n        IAdapter adapter,\\n        IAdapter[] memory adapters\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Sets the bond recipient address for payments.\\n     * @param bondRecipient - The address where bond payments should be sent.\\n     */\\n    function setBondRecipient(address payable bondRecipient) external;\\n\\n    /**\\n     * @dev Sets the challenge range for a specific domain.\\n     * @param domain - The Uint256 identifier for the domain.\\n     * @param range - The Uint256 range to set for the given domain.\\n     */\\n    function setChallengeRange(uint256 domain, uint256 range) external;\\n\\n    /**\\n     * @dev Sets the threshold for a specific domain.\\n     * @param domain - The Uint256 identifier for the domain.\\n     * @param threshold - The Uint256 threshold to set for the given domain.\\n     */\\n    function setThreshold(uint256 domain, uint256 threshold) external;\\n}\\n\",\"keccak256\":\"0x2ea6b88d3429184d9087fa6e33c8202ae8e0cda082e0199ba333085968a87a23\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IHashi.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport { IAdapter } from \\\"./IAdapter.sol\\\";\\n\\n/**\\n * @title IHashi\\n */\\ninterface IHashi {\\n    error AdaptersDisagree(IAdapter adapterOne, IAdapter adapterTwo);\\n    error HashNotAvailableInAdapter(IAdapter adapter);\\n    error InvalidThreshold(uint256 threshold, uint256 maxThreshold);\\n    error NoAdaptersGiven();\\n\\n    /**\\n     * @dev Checks whether the threshold is reached for a message given a set of adapters.\\n     * @param domain - ID of the domain to query.\\n     * @param id - ID for which to return hash.\\n     * @param threshold - Threshold to use.\\n     * @param adapters - Array of addresses for the adapters to query.\\n     * @notice If the threshold is 1, it will always return true.\\n     * @return result A boolean indicating if a threshold for a given message has been reached.\\n     */\\n    function checkHashWithThresholdFromAdapters(\\n        uint256 domain,\\n        uint256 id,\\n        uint256 threshold,\\n        IAdapter[] calldata adapters\\n    ) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the hash stored by a given adapter for a given ID.\\n     * @param domain - ID of the domain to query.\\n     * @param id - ID for which to return a hash.\\n     * @param adapter - Address of the adapter to query.\\n     * @return hash stored by the given adapter for the given ID.\\n     */\\n    function getHashFromAdapter(uint256 domain, uint256 id, IAdapter adapter) external view returns (bytes32);\\n\\n    /**\\n     * @dev Returns the hashes for a given ID stored by a given set of adapters.\\n     * @param domain - The ID of the domain to query.\\n     * @param id - The ID for which to return hashes.\\n     * @param adapters - An array of addresses for the adapters to query.\\n     * @return hashes An array of hashes stored by the given adapters for the specified ID.\\n     */\\n    function getHashesFromAdapters(\\n        uint256 domain,\\n        uint256 id,\\n        IAdapter[] calldata adapters\\n    ) external view returns (bytes32[] memory);\\n\\n    /**\\n     * @dev Returns the hash unanimously agreed upon by a given set of adapters.\\n     * @param domain - The ID of the domain to query.\\n     * @param id - The ID for which to return a hash.\\n     * @param adapters - An array of addresses for the adapters to query.\\n     * @return hash agreed on by the given set of adapters.\\n     * @notice MUST revert if adapters disagree on the hash or if an adapter does not report.\\n     */\\n    function getHash(uint256 domain, uint256 id, IAdapter[] calldata adapters) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xa3f568e3922d3d271bcb3c4436934942ed7a145f91d305f8cc65bdc697bcd991\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IShuSho.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport { IHashi } from \\\"./IHashi.sol\\\";\\nimport { IAdapter } from \\\"./IAdapter.sol\\\";\\n\\n/**\\n * @title IShuSho\\n */\\ninterface IShuSho {\\n    struct Domain {\\n        uint256 threshold;\\n        uint256 count;\\n    }\\n\\n    struct Link {\\n        IAdapter previous;\\n        IAdapter next;\\n    }\\n\\n    error AdapterNotEnabled(IAdapter adapter);\\n    error AdapterAlreadyEnabled(IAdapter adapter);\\n    error CountCannotBeZero();\\n    error DuplicateHashiAddress(IHashi hashi);\\n    error DuplicateOrOutOfOrderAdapters(IAdapter adapterOne, IAdapter adapterTwo);\\n    error DuplicateThreashold(uint256 threshold);\\n    error InvalidAdapter(IAdapter adapter);\\n    error InvalidThreshold(uint256 threshold);\\n    error NoAdaptersEnabled(uint256 domain);\\n    error NoAdaptersGiven();\\n    error ThresholdNotMet();\\n\\n    /**\\n     * @dev Emitted when adapters are disabled for a specific domain.\\n     * @param domain - The domain associated with the disabled adapters.\\n     * @param adapters - An array of disabled adapter addresses associated with this event.\\n     */\\n    event AdaptersDisabled(uint256 indexed domain, IAdapter[] adapters);\\n\\n    /**\\n     * @dev Emitted when adapters are enabled for a specific domain.\\n     * @param domain - The domain associated with the enabled adapters.\\n     * @param adapters - An array of enabled adapter addresses associated with this event.\\n     */\\n    event AdaptersEnabled(uint256 indexed domain, IAdapter[] adapters);\\n\\n    /**\\n     * @dev Emitted when the address of the IHashi contract is set.\\n     * @param hashi - The address of the IHashi contract associated with this event.\\n     */\\n    event HashiSet(IHashi indexed hashi);\\n\\n    /**\\n     * @dev Emitted when initialization occurs with the owner's address and the IHashi contract address.\\n     * @param owner - The address of the owner associated with this event.\\n     * @param hashi - The address of the IHashi contract associated with this event.\\n     */\\n    event Init(address indexed owner, IHashi indexed hashi);\\n\\n    /**\\n     * @dev Emitted when the threshold is set for a specific domain.\\n     * @param domain - The domain associated with the set threshold.\\n     * @param threshold - The new threshold value associated with this event.\\n     */\\n    event ThresholdSet(uint256 domain, uint256 threshold);\\n\\n    /**\\n     * @dev Checks the order and validity of adapters for a given domain.\\n     * @param domain - The Uint256 identifier for the domain.\\n     * @param _adapters - An array of adapter instances.\\n     */\\n    function checkAdapterOrderAndValidity(uint256 domain, IAdapter[] memory _adapters) external view;\\n\\n    /**\\n     * @dev Get the previous and the next adapter given a domain and an adapter.\\n     * @param domain - Uint256 identifier for the domain.\\n     * @param adapter - IAdapter value for the adapter.\\n     * @return link - The Link struct containing the previous and the next adapter.\\n     */\\n    function getAdapterLink(uint256 domain, IAdapter adapter) external view returns (Link memory);\\n\\n    /**\\n     * @dev Returns an array of enabled adapters for a given domain.\\n     * @param domain - Uint256 identifier for the domain for which to list adapters.\\n     * @return adapters - The adapters for a given domain.\\n     */\\n    function getAdapters(uint256 domain) external view returns (IAdapter[] memory);\\n\\n    /**\\n     * @dev Get the current configuration for a given domain.\\n     * @param domain - Uint256 identifier for the domain.\\n     * @return domain - The Domain struct containing the current configuration for a given domain.\\n     */\\n    function getDomain(uint256 domain) external view returns (Domain memory);\\n\\n    /**\\n     * @dev Returns the threshold and count for a given domain.\\n     * @param domain - Uint256 identifier for the domain.\\n     * @return threshold - Uint256 adapters threshold for the given domain.\\n     * @return count - Uint256 adapters count for the given domain.\\n     * @notice If the threshold for a domain has not been set, or is explicitly set to 0, this function will return a threshold equal to the adapters count for the given domain.\\n     */\\n    function getThresholdAndCount(uint256 domain) external view returns (uint256, uint256);\\n\\n    /**\\n     * @dev Returns the address of the specified Hashi.\\n     * @return hashi - The Hashi address.\\n     */\\n    function hashi() external view returns (IHashi);\\n}\\n\",\"keccak256\":\"0x6ace99c8d6de89876a3d23d7561b207803d8d1f96267c2049517d3856f47e2e3\",\"license\":\"LGPL-3.0-only\"},\"contracts/ownable/GiriGiriBashi.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.20;\\n\\nimport { ShuSo } from \\\"./ShuSo.sol\\\";\\nimport { IAdapter } from \\\"../interfaces/IAdapter.sol\\\";\\nimport { IHashi } from \\\"../interfaces/IHashi.sol\\\";\\nimport { IGiriGiriBashi } from \\\"../interfaces/IGiriGiriBashi.sol\\\";\\n\\ncontract GiriGiriBashi is IGiriGiriBashi, ShuSo {\\n    address payable public bondRecipient;\\n\\n    mapping(uint256 => uint256) private _heads;\\n    mapping(uint256 => uint256) private _challengeRanges;\\n    mapping(uint256 => mapping(IAdapter => Settings)) private _settings;\\n    mapping(bytes32 => Challenge) private _challenges;\\n\\n    constructor(address _owner, address _hashi, address payable _bondRecipient) ShuSo(_owner, _hashi) {\\n        bondRecipient = _bondRecipient;\\n    }\\n\\n    modifier noConfidence(uint256 domain) {\\n        if (getDomain(domain).threshold != type(uint256).max) revert NoConfidenceRequired();\\n        _;\\n    }\\n\\n    modifier zeroCount(uint256 domain) {\\n        Domain memory domainConfigs = getDomain(domain);\\n        if (domainConfigs.count != 0 && domainConfigs.threshold > 0) revert CountMustBeZero(domain);\\n        _;\\n    }\\n\\n    /// @inheritdoc IGiriGiriBashi\\n    function challengeAdapter(uint256 domain, uint256 id, IAdapter adapter) public payable {\\n        if (getAdapterLink(domain, adapter).previous == IAdapter(address(0))) revert AdapterNotEnabled(adapter);\\n        if (msg.value < _settings[domain][adapter].minimumBond) revert NotEnoughValue(adapter, msg.value);\\n        if (_settings[domain][adapter].quarantined) revert AlreadyQuarantined(adapter);\\n\\n        bytes32 challengeId = getChallengeId(domain, id, adapter);\\n        if (_challenges[challengeId].challenger != address(0))\\n            revert DuplicateChallenge(challengeId, domain, id, adapter);\\n\\n        // check if id is lower than startId, revert if true.\\n        // check if id is less than highestId + challengeRange, revert if false\\n        // check if id is lower than highestId - idDepth, revert if true\\n        uint256 challengeRange = _challengeRanges[domain];\\n        uint256 idDepth = _settings[domain][adapter].idDepth;\\n        uint256 head = _heads[domain];\\n        if (\\n            id < _settings[domain][adapter].startId || // before start id\\n            (challengeRange != 0 && id >= head && id - head > challengeRange) || // over domain challenge range\\n            (idDepth != 0 && head > idDepth && id <= head - idDepth) // outside of adapter idDepth\\n        ) revert OutOfRange(adapter, id);\\n\\n        Challenge storage challenge = _challenges[challengeId];\\n        challenge.challenger = payable(msg.sender);\\n        challenge.timestamp = block.timestamp;\\n        challenge.bond = msg.value;\\n\\n        emit ChallengeCreated(challengeId, domain, id, adapter, msg.sender, block.timestamp, msg.value);\\n    }\\n\\n    /// @inheritdoc IGiriGiriBashi\\n    function enableAdapters(\\n        uint256 domain,\\n        IAdapter[] memory adapters,\\n        Settings[] memory settings\\n    ) public zeroCount(domain) {\\n        _enableAdapters(domain, adapters);\\n        initSettings(domain, adapters, settings);\\n    }\\n\\n    /// @inheritdoc IGiriGiriBashi\\n    function declareNoConfidence(uint256 domain, uint256 id, IAdapter[] memory adapters) public {\\n        checkAdapterOrderAndValidity(domain, adapters);\\n        (uint256 threshold, uint256 count) = getThresholdAndCount(domain);\\n\\n        if (adapters.length != count) revert CannotProveNoConfidence(domain, id, adapters);\\n\\n        bytes32[] memory hashes = new bytes32[](adapters.length);\\n        uint256 zeroHashes = 0;\\n        for (uint256 i = 0; i < adapters.length; i++) {\\n            hashes[i] = adapters[i].getHash(domain, id);\\n            if (hashes[i] == bytes32(0)) zeroHashes++;\\n            if (zeroHashes == threshold) revert CannotProveNoConfidence(domain, id, adapters);\\n        }\\n\\n        for (uint256 i = 0; i < hashes.length; i++) {\\n            uint256 equalHashes = 1;\\n            for (uint256 j = 0; j < hashes.length; j++) {\\n                if (hashes[i] == hashes[j] && i != j) {\\n                    equalHashes++;\\n                }\\n            }\\n\\n            if (equalHashes + zeroHashes >= threshold) revert CannotProveNoConfidence(domain, id, adapters);\\n        }\\n\\n        _setDomainThreshold(domain, type(uint256).max);\\n        delete _challengeRanges[domain];\\n\\n        emit NoConfidenceDeclared(domain);\\n    }\\n\\n    /// @inheritdoc IGiriGiriBashi\\n    function disableAdapters(uint256 domain, IAdapter[] memory adapters) public noConfidence(domain) {\\n        _disableAdapters(domain, adapters);\\n        if (getDomain(domain).count == 0) _setDomainThreshold(domain, 0);\\n    }\\n\\n    /// @inheritdoc IGiriGiriBashi\\n    function getSettings(uint256 domain, IAdapter adapter) external view returns (Settings memory) {\\n        return _settings[domain][adapter];\\n    }\\n\\n    /// @inheritdoc IGiriGiriBashi\\n    function getChallenge(bytes32 challengeId) external view returns (Challenge memory) {\\n        return _challenges[challengeId];\\n    }\\n\\n    /// @inheritdoc IGiriGiriBashi\\n    function getChallengeId(uint256 domain, uint256 id, IAdapter adapter) public pure returns (bytes32 challengeId) {\\n        challengeId = keccak256(abi.encodePacked(domain, id, adapter));\\n    }\\n\\n    /// @inheritdoc IGiriGiriBashi\\n    function getChallengeRange(uint256 domain) external view returns (uint256) {\\n        return _challengeRanges[domain];\\n    }\\n\\n    /// @inheritdoc IGiriGiriBashi\\n    function getHead(uint256 domain) external view returns (uint256) {\\n        return _heads[domain];\\n    }\\n\\n    /// @inheritdoc IGiriGiriBashi\\n    function getThresholdHash(uint256 domain, uint256 id) public returns (bytes32 hash) {\\n        hash = _getThresholdHash(domain, id);\\n        updateHead(domain, id);\\n    }\\n\\n    /// @inheritdoc IGiriGiriBashi\\n    function getUnanimousHash(uint256 domain, uint256 id) public returns (bytes32 hash) {\\n        hash = _getUnanimousHash(domain, id);\\n        updateHead(domain, id);\\n    }\\n\\n    /// @inheritdoc IGiriGiriBashi\\n    function getHash(uint256 domain, uint256 id, IAdapter[] memory adapters) public returns (bytes32 hash) {\\n        hash = _getHash(domain, id, adapters);\\n        updateHead(domain, id);\\n    }\\n\\n    /// @inheritdoc IGiriGiriBashi\\n    function replaceQuarantinedAdapters(\\n        uint256 domain,\\n        IAdapter[] memory currentAdapters,\\n        IAdapter[] memory newAdapters,\\n        Settings[] memory settings\\n    ) public onlyOwner {\\n        if (currentAdapters.length != newAdapters.length || currentAdapters.length != settings.length)\\n            revert UnequalArrayLengths();\\n        for (uint256 i = 0; i < currentAdapters.length; i++) {\\n            if (!_settings[domain][currentAdapters[i]].quarantined) revert AdapterNotQuarantined(currentAdapters[i]);\\n        }\\n        _disableAdapters(domain, currentAdapters);\\n        _enableAdapters(domain, newAdapters);\\n        initSettings(domain, newAdapters, settings);\\n    }\\n\\n    /// @inheritdoc IGiriGiriBashi\\n    function resolveChallenge(\\n        uint256 domain,\\n        uint256 id,\\n        IAdapter adapter,\\n        IAdapter[] memory adapters\\n    ) public returns (bool success) {\\n        // check if challenge exists, revert if false\\n        bytes32 challengeId = getChallengeId(domain, id, adapter);\\n        if (_challenges[challengeId].challenger == address(0))\\n            revert ChallengeNotFound(challengeId, domain, id, adapter);\\n\\n        for (uint256 i = 0; i < adapters.length; ) {\\n            if (adapters[i] == adapter) revert AdaptersCannotContainChallengedAdapter(adapters, adapter);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        Challenge storage challenge = _challenges[challengeId];\\n        Settings storage adapterSettings = _settings[domain][adapter];\\n        bytes32 storedHash = adapter.getHash(domain, id);\\n\\n        if (storedHash == bytes32(0)) {\\n            if (block.timestamp < challenge.timestamp + adapterSettings.timeout)\\n                revert AdapterHasNotYetTimedOut(adapter);\\n            adapterSettings.quarantined = true;\\n            challenge.challenger.transfer(challenge.bond);\\n            success = true;\\n        } else {\\n            // if adapters + 1 equals threshold && adapters + adapter report the same header\\n            if (adapters.length == getDomain(domain).threshold - 1) {\\n                checkAdapterOrderAndValidity(domain, adapters);\\n                bytes32 canonicalHash = hashi.getHash(domain, id, adapters);\\n                if (canonicalHash == storedHash) {\\n                    bondRecipient.transfer(challenge.bond);\\n                    success = false;\\n                } else {\\n                    revert IHashi.AdaptersDisagree(adapter, adapters[0]);\\n                }\\n            } else {\\n                // check if adapters report the same header as adapter\\n                bytes32 canonicalHash = getHash(domain, id, adapters);\\n                if (canonicalHash == storedHash) {\\n                    bondRecipient.transfer(challenge.bond);\\n                    success = false;\\n                } else {\\n                    adapterSettings.quarantined = true;\\n                    challenge.challenger.transfer(challenge.bond);\\n                    success = true;\\n                }\\n            }\\n        }\\n        emit ChallengeResolved(challengeId, domain, id, adapter, challenge.challenger, challenge.bond, success);\\n\\n        delete challenge.challenger;\\n        delete challenge.timestamp;\\n        delete challenge.bond;\\n    }\\n\\n    /// @inheritdoc IGiriGiriBashi\\n    function setBondRecipient(address payable _bondRecipient) public onlyOwner {\\n        bondRecipient = _bondRecipient;\\n        emit BondRecipientSet(_bondRecipient);\\n    }\\n\\n    /// @inheritdoc IGiriGiriBashi\\n    function setChallengeRange(uint256 domain, uint256 range) public onlyOwner {\\n        if (_challengeRanges[domain] != 0) revert ChallengeRangeAlreadySet(domain);\\n        _challengeRanges[domain] = range;\\n        emit ChallengeRangeUpdated(domain, range);\\n    }\\n\\n    function setHashi(IHashi _hashi) public override onlyInitializing {\\n        _setHashi(_hashi);\\n    }\\n\\n    /// @inheritdoc IGiriGiriBashi\\n    function setThreshold(uint256 domain, uint256 threshold) public zeroCount(domain) {\\n        _setThreshold(domain, threshold);\\n    }\\n\\n    function initSettings(uint256 domain, IAdapter[] memory _adapters, Settings[] memory adapters) private {\\n        if (_adapters.length != adapters.length) revert UnequalArrayLengths();\\n        for (uint256 i = 0; i < _adapters.length; i++) {\\n            IAdapter adapter = _adapters[i];\\n            _settings[domain][adapter].quarantined = false;\\n            _settings[domain][adapter].minimumBond = adapters[i].minimumBond;\\n            _settings[domain][adapter].startId = adapters[i].startId;\\n            _settings[domain][adapter].idDepth = adapters[i].idDepth;\\n            _settings[domain][adapter].timeout = adapters[i].timeout;\\n            emit SettingsInitialized(domain, adapter, adapters[i]);\\n        }\\n    }\\n\\n    function updateHead(uint256 domain, uint256 id) private {\\n        if (id > _heads[domain]) _heads[domain] = id;\\n        emit NewHead(domain, id);\\n    }\\n}\\n\",\"keccak256\":\"0x4d61e21237cf1e9200e0023d660f4a6ad6243658e5b4d74cde6d5b52911ea9fb\",\"license\":\"LGPL-3.0-only\"},\"contracts/ownable/ShuSo.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.20;\\n\\nimport { OwnableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport { IAdapter } from \\\"../interfaces/IAdapter.sol\\\";\\nimport { IHashi } from \\\"../interfaces/IHashi.sol\\\";\\nimport { IShuSho } from \\\"../interfaces/IShuSho.sol\\\";\\n\\nabstract contract ShuSo is IShuSho, OwnableUpgradeable {\\n    IAdapter internal constant LIST_END = IAdapter(address(0x1));\\n\\n    IHashi public hashi;\\n    mapping(uint256 => mapping(IAdapter => Link)) private _adapters;\\n    mapping(uint256 => Domain) private _domains;\\n\\n    constructor(address _owner, address _hashi) {\\n        bytes memory initParams = abi.encode(_owner, _hashi);\\n        init(initParams);\\n    }\\n\\n    function init(bytes memory initParams) public initializer {\\n        (address _owner, IHashi _hashi) = abi.decode(initParams, (address, IHashi));\\n        __Ownable_init();\\n        setHashi(_hashi);\\n        transferOwnership(_owner);\\n        emit Init(_owner, _hashi);\\n    }\\n\\n    /// @inheritdoc IShuSho\\n    function checkAdapterOrderAndValidity(uint256 domain, IAdapter[] memory adapters) public view {\\n        for (uint256 i = 0; i < adapters.length; i++) {\\n            IAdapter adapter = adapters[i];\\n            if (i > 0 && adapter <= adapters[i - 1]) revert DuplicateOrOutOfOrderAdapters(adapter, adapters[i - 1]);\\n            if (_adapters[domain][adapter].next == IAdapter(address(0))) revert InvalidAdapter(adapter);\\n        }\\n    }\\n\\n    /// @inheritdoc IShuSho\\n    function getAdapterLink(uint256 domain, IAdapter adapter) public view returns (Link memory) {\\n        return _adapters[domain][adapter];\\n    }\\n\\n    /// @inheritdoc IShuSho\\n    function getAdapters(uint256 domain) public view returns (IAdapter[] memory) {\\n        IAdapter[] memory adapters = new IAdapter[](_domains[domain].count);\\n        IAdapter currentAdapter = _adapters[domain][LIST_END].next;\\n        for (uint256 i = 0; i < adapters.length; i++) {\\n            adapters[i] = currentAdapter;\\n            currentAdapter = _adapters[domain][currentAdapter].next;\\n        }\\n        return adapters;\\n    }\\n\\n    /// @inheritdoc IShuSho\\n    function getDomain(uint256 domain) public view returns (Domain memory) {\\n        return _domains[domain];\\n    }\\n\\n    /// @inheritdoc IShuSho\\n    function getThresholdAndCount(uint256 domain_) public view returns (uint256, uint256) {\\n        Domain storage domain = _domains[domain_];\\n        uint256 threshold = domain.threshold;\\n        uint256 count = domain.count;\\n        if (threshold == 0) threshold = count;\\n        return (threshold, count);\\n    }\\n\\n    function setHashi(IHashi _hashi) public virtual;\\n\\n    /**\\n     * @dev Disables the given adapters for a given domain.\\n     * @param domain - Uint256 identifier for the domain for which to set adapters.\\n     * @param adapters - Array of adapter addresses.\\n     * @notice Reverts if adapters are out of order or contain duplicates.\\n     * @notice Only callable by the owner of this contract.\\n     */\\n    function _disableAdapters(uint256 domain, IAdapter[] memory adapters) internal onlyOwner {\\n        if (_domains[domain].count == 0) revert NoAdaptersEnabled(domain);\\n        if (adapters.length == 0) revert NoAdaptersGiven();\\n        for (uint256 i = 0; i < adapters.length; i++) {\\n            IAdapter adapter = adapters[i];\\n            if (adapter == IAdapter(address(0)) || adapter == LIST_END) revert InvalidAdapter(adapter);\\n            Link memory current = _adapters[domain][adapter];\\n            if (current.next == IAdapter(address(0))) revert AdapterNotEnabled(adapter);\\n            IAdapter next = current.next;\\n            IAdapter previous = current.previous;\\n            _adapters[domain][next].previous = previous;\\n            _adapters[domain][previous].next = next;\\n            delete _adapters[domain][adapter].next;\\n            delete _adapters[domain][adapter].previous;\\n            _domains[domain].count--;\\n        }\\n        emit AdaptersDisabled(domain, adapters);\\n    }\\n\\n    /**\\n     * @dev Enables the given adapters for a given domain.\\n     * @param domain - Uint256 identifier for the domain for which to set adapters.\\n     * @param adapters - Array of adapter addresses.\\n     * @notice Reverts if adapters are out of order or contain duplicates.\\n     * @notice Only callable by the owner of this contract.\\n     */\\n    function _enableAdapters(uint256 domain, IAdapter[] memory adapters) internal onlyOwner {\\n        if (_adapters[domain][LIST_END].next == IAdapter(address(0))) {\\n            _adapters[domain][LIST_END].next = LIST_END;\\n            _adapters[domain][LIST_END].previous = LIST_END;\\n        }\\n        if (adapters.length == 0) revert NoAdaptersGiven();\\n        for (uint256 i = 0; i < adapters.length; i++) {\\n            IAdapter adapter = adapters[i];\\n            if (adapter == IAdapter(address(0)) || adapter == LIST_END) revert InvalidAdapter(adapter);\\n            if (_adapters[domain][adapter].next != IAdapter(address(0))) revert AdapterAlreadyEnabled(adapter);\\n            IAdapter previous = _adapters[domain][LIST_END].previous;\\n            _adapters[domain][previous].next = adapter;\\n            _adapters[domain][adapter].previous = previous;\\n            _adapters[domain][LIST_END].previous = adapter;\\n            _adapters[domain][adapter].next = LIST_END;\\n            _domains[domain].count++;\\n        }\\n        emit AdaptersEnabled(domain, adapters);\\n    }\\n\\n    /**\\n     * @dev Returns the hash unanimously agreed upon by all of the given adapters.\\n     * @param domain - Uint256 identifier for the domain to query.\\n     * @param id - Uint256 identifier to query.\\n     * @param adapters - Array of adapter addresses to query.\\n     * @return hash - Bytes32 hash agreed upon by the adapters for the given domain.\\n     * @notice adapters must be in numerical order from smallest to largest and contain no duplicates.\\n     * @notice Reverts if adapters are out of order or contain duplicates.\\n     * @notice Reverts if adapters disagree.\\n     * @notice Revert if the adapters do not yet have the hash for the given ID.\\n     * @notice Reverts if no adapters are set for the given domain.\\n     */\\n    function _getHash(uint256 domain, uint256 id, IAdapter[] memory adapters) internal view returns (bytes32) {\\n        (uint256 threshold, uint256 count) = getThresholdAndCount(domain);\\n        if (adapters.length == 0) revert NoAdaptersGiven();\\n        if (count == 0) revert NoAdaptersEnabled(domain);\\n        if (adapters.length < threshold) revert ThresholdNotMet();\\n        checkAdapterOrderAndValidity(domain, adapters);\\n        return hashi.getHash(domain, id, adapters);\\n    }\\n\\n    /**\\n     * @dev Returns the hash agreed upon by a threshold of the enabled adapters.\\n     * @param domain - Uint256 identifier for the domain to query.\\n     * @param id - Uint256 identifier to query.\\n     * @return hash - Bytes32 hash agreed upon by a threshold of the adapters for the given domain.\\n     * @notice If the threshold is set to 1, the function will return the hash of the first adapter in the list.\\n     * @notice Reverts if no threshold is not reached.\\n     * @notice Reverts if no adapters are set for the given domain.\\n     */\\n    function _getThresholdHash(uint256 domain, uint256 id) internal view returns (bytes32 hash) {\\n        IAdapter[] memory adapters = getAdapters(domain);\\n        (uint256 threshold, uint256 count) = getThresholdAndCount(domain);\\n        if (count == 0) revert NoAdaptersEnabled(domain);\\n        if (adapters.length < threshold) revert ThresholdNotMet();\\n\\n        bytes32[] memory hashes = new bytes32[](adapters.length);\\n        for (uint256 i = 0; i < adapters.length; i++) {\\n            hashes[i] = adapters[i].getHash(domain, id);\\n        }\\n\\n        for (uint256 i = 0; i < hashes.length; i++) {\\n            if (i > hashes.length - threshold) break;\\n\\n            bytes32 baseHash = hashes[i];\\n            if (baseHash == bytes32(0)) continue;\\n\\n            uint256 num = 0;\\n            for (uint256 j = i; j < hashes.length; j++) {\\n                if (baseHash == hashes[j]) {\\n                    num++;\\n                    if (num == threshold) return hashes[i];\\n                }\\n            }\\n        }\\n        revert ThresholdNotMet();\\n    }\\n\\n    /**\\n     * @dev Returns the hash unanimously agreed upon by ALL of the enabled adapters.\\n     * @param domain - Uint256 identifier for the domain to query.\\n     * @param id - Uint256 identifier to query.\\n     * @return hash - Bytes32 hash agreed upon by the adapters for the given domain.\\n     * @notice Reverts if adapters disagree.\\n     * @notice Revert if the adapters do not yet have the hash for the given ID.\\n     * @notice Reverts if no adapters are set for the given domain.\\n     */\\n    function _getUnanimousHash(uint256 domain, uint256 id) internal view returns (bytes32 hash) {\\n        IAdapter[] memory adapters = getAdapters(domain);\\n        (uint256 threshold, uint256 count) = getThresholdAndCount(domain);\\n        if (count == 0) revert NoAdaptersEnabled(domain);\\n        if (adapters.length < threshold) revert ThresholdNotMet();\\n        return hashi.getHash(domain, id, adapters);\\n    }\\n\\n    /**\\n     * @dev Sets the address of the IHashi contract.\\n     * @param _hashi - Address of the hashi contract.\\n     * @notice Only callable by the owner of this contract.\\n     */\\n    function _setHashi(IHashi _hashi) internal onlyOwner {\\n        if (hashi == _hashi) revert DuplicateHashiAddress(_hashi);\\n        hashi = _hashi;\\n        emit HashiSet(hashi);\\n    }\\n\\n    /**\\n     * @dev Sets the threshold of adapters required for a given domain.\\n     * @param domain - Uint256 identifier for the domain for which to set the threshold.\\n     * @param threshold - Uint256 threshold to set for the given domain.\\n     * @notice Only callable by the owner of this contract.\\n     * @notice Reverts if threshold is already set to the given value.\\n     */\\n    function _setThreshold(uint256 domain, uint256 threshold) internal onlyOwner {\\n        uint256 count = _domains[domain].count;\\n        if (count == 0) revert CountCannotBeZero();\\n        if (threshold < (count / 2) + 1) revert InvalidThreshold(threshold);\\n        if (_domains[domain].threshold == threshold) revert DuplicateThreashold(threshold);\\n        _domains[domain].threshold = threshold;\\n        emit ThresholdSet(domain, threshold);\\n    }\\n\\n    function _setDomainThreshold(uint256 domainId, uint256 threshold) internal {\\n        _domains[domainId].threshold = threshold;\\n    }\\n}\\n\",\"keccak256\":\"0x5958fc1be307702b921bd15c86ca00fbf07cad31568110e2e0bfae039a14e954\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x6080346200033d57601f6200316638819003918201601f1916830192916001600160401b039182851184861017620003275781606092859260409788528339810103126200033d57620000528262000342565b906200006e84620000666020860162000342565b940162000342565b9084516020810160018060a01b03809516815284878301961686528682526060820192828410908411176200032757828752600091825460ff8160081c16159485809662000319575b801562000300575b15620002a8575060ff19811660011784558891908562000296575b508051810103126200029257620000f19062000342565b94519484861680960362000292578416916200011f60ff835460081c16620001198162000357565b62000357565b6200012a3362000411565b6200013c60ff835460081c1662000357565b62000146620003b8565b6065549580868816146200027b576001600160a01b03199687168117606555807f1e44815867bf36700178046dec2874b58492fa049a6775df578903717bb05b358480a262000194620003b8565b83156200022857620001a68462000411565b8751937f45acd56f401dc3db1d520e5e214f090b4ab3e3fbf42fd24596cb511edaad876a8480a3620001ed575b50501690606854161760685551612d0b90816200045b8239f35b805461ff0019169055600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a13880620001d3565b875162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b602490885190634636033760e01b82526004820152fd5b5080fd5b61ffff191661010117845538620000da565b6084906d191e481a5b9a5d1a585b1a5e995960921b60c48562461bcd60e51b845260206064820152602e858201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160a48201520152fd5b50303b158015620000bf5750600160ff831614620000bf565b50600160ff831610620000b7565b634e487b7160e01b600052604160045260246000fd5b600080fd5b51906001600160a01b03821682036200033d57565b156200035f57565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b6033546001600160a01b03163303620003cd57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b603380546001600160a01b039283166001600160a01b0319821681179092559091167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a356fe6080604052600436101561001257600080fd5b60003560e01c806314223645146120c957806314d338301461209f5780631a7a98e21461206f5780631ad367b714611fd457806323edb2e014611fad5780633f22822914611f945780634056608914611eb7578063458d2bf114611e335780634ddf47d414611b5957806364cae93c14611aed57806367e2120e14611a3b578063715018a6146119e0578063800c31911461172857806389208ba9146116fc5780638c634d0b146116c55780638da5cb5b1461169e578063958f9ee8146114355780639720c96914611409578063a6cf64bf1461111a578063b3105439146110f5578063b89bff5f146110de578063b9c3620914610f7b578063d155591b14610d46578063d3a5458b14610d02578063e25650161461076c578063ead227541461074b578063ec2cf2d514610724578063f2fde38b146106945763fa2280391461015b57600080fd5b346105465760803660031901126105465760446001600160a01b038135168135036105465760643567ffffffffffffffff8111610546576101a0903690600401612287565b6101b08235602435600435612570565b9182600052606c6020526001600160a01b03604060002054161561063f5760005b8251811015610258576001600160a01b038235166001600160a01b036101f7838661254f565b511614610206576001016101d1565b61024c83836001600160a01b036040519384937f0f0c8b8800000000000000000000000000000000000000000000000000000000855260406004860152838501906123a2565b91351660248301520390fd5b50919081600052606c602052604060002090600435600052606b60205260406000206001600160a01b038535166000526020526040600020906040516306e1541160e21b81526004356004820152602435602482015260208187816001600160a01b038235165afa90811561039e5760009161060d575b50806103ee5750506102ea6001830154600483015490612563565b42106103b357600160ff1982541617905560008080806001600160a01b038554166002860154908282156103aa575bf11561039e576020926000600181936001600160a01b031982945b825490600284019687546040519a8b526024358c8c015260408b01521515988960608201526001600160a01b03808416923516907f8880e140a32834a22772dd913417182bb2b6f3d8765010fdaed6af36e3c9eb10608060043592a4168155015555604051908152f35b6040513d6000823e3d90fd5b506108fc610319565b6024846001600160a01b03604051917f0ac9901000000000000000000000000000000000000000000000000000000000835235166004820152fd5b909182516103fd600435612ad0565b51806000198101116105f7576000190103610553575061041f826004356128ba565b6001600160a01b036065541660206040518092633ab489d560e21b8252818061045188602435600435600485016124f2565b03915afa90811561039e5760009161051c575b50036104b2575060008080806001600160a01b03606854166002860154908282156104a9575bf11561039e576020926000600181936001600160a01b03198394610334565b506108fc61048a565b808491511561050657602001516040517f435065db0000000000000000000000000000000000000000000000000000000081526001600160a01b0392358316600482015291166024820152604490fd5b0390fd5b634e487b7160e01b600052603260045260246000fd5b90506020813d60201161054b575b816105376020938361224d565b81010312610546575138610464565b600080fd5b3d915061052a565b91610563906024356004356125bd565b036105a6575060008080806001600160a01b03606854166002860154908282156104a957f11561039e576020926000600181936001600160a01b03198394610334565b600160ff1982541617905560008080806001600160a01b038554166002860154908282156105ee575bf11561039e576020926000600181936001600160a01b03198294610334565b506108fc6105cf565b634e487b7160e01b600052601160045260246000fd5b90506020813d602011610637575b816106286020938361224d565b810103126105465751386102cf565b3d915061061b565b6040517f73ade2130000000000000000000000000000000000000000000000000000000081526004808201949094529235602480850191909152356044840152356001600160a01b0316606483015250608490fd5b34610546576020366003190112610546576004356001600160a01b038116808203610546576106c1612445565b156106d1576106cf9061249d565b005b608460405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b346105465760003660031901126105465760206001600160a01b0360655416604051908152f35b3461054657602061076461075e36612412565b916125bd565b604051908152f35b3461054657608036600319011261054657602467ffffffffffffffff6004358235828111610546576107a2903690600401612287565b90604435838111610546576107bb903690600401612287565b92606435908111610546576107d49036906004016122f5565b6107dc612445565b82518451811490811591610cf6575b50610ccc5760005b835181101561087d57826000526020606b815260406000206001600160a01b03918261081f858961254f565b51166000525260ff6040600020541615610842575061083d90612540565b6107f3565b61084d87928661254f565b5116604051907fa21811f60000000000000000000000000000000000000000000000000000000082526004820152fd5b509291610888612445565b81600052606790602091808352600191826040600020015415610cb557805115610ad55784906000845b610b4e575b506108ef7f445aa3dd0c2baa28306a020b0ad28802dac8ce56b94bf9ae2521afa90f855bfb91604051918291888352888301906123a2565b0390a26108fa612445565b8360005260669081845260406000208360005284526001600160a01b03918284604060002001541615610aff575b865115610ad55790916000845b61097f575b6106cf898989807fded0d38026c6e9ca7e2ee1647ae6f70e2306bcc9dcabbb9888888683513e16096109778c6040519181839283528201876123a2565b0390a26126f4565b8751811015610ad05781610993828a61254f565b511680158015610ac7575b610ab05787600052838752604060002081600052875282866040600020015416610a99578594939291610a90918960005284895260406000208760005289528360406000205416908a600052858a526040600020826000528a5287604060002001916001600160a01b03199282848254161790558b600052868b526040600020826000528b52604060002090838254161790558a600052858a526040600020886000528a52604060002081838254161790558a600052858a5260406000209060005289528680604060002001918254161790558860005284885285604060002001610a898154612540565b9055612540565b90919293610935565b8a9060405190635bdca25960e11b82526004820152fd5b8a9060405190633283c86d60e21b82526004820152fd5b5085811461099e565b61093a565b60046040517fc77f9c81000000000000000000000000000000000000000000000000000000008152fd5b856000528085526040600020846000528552836040600020016001600160a01b031990858282541617905586600052818652604060002085600052865284604060002091825416179055610928565b90918251821015610cae57506001600160a01b0380610b6d838561254f565b511680158015610ca5575b610ab0578760005260668088526040600020826000528852604060002092808860405195610ba587612231565b8281541687520154168985019080825215610c8e5781905116935116928960005281895260406000208160005289526040600020936001600160a01b03199481868254161790558a600052828a52604060002090600052895287604060002001908482541617905588600052808852604060002082600052885286604060002001838154169055886000528752604060002090600052865260406000209081541690558560005282855283604060002001908154908115610c79578592610c7192600019019055612540565b8692916108b2565b8a634e487b7160e01b60005260116004526000fd5b8d846040519063950764a360e01b82526004820152fd5b50858114610b78565b91906108b7565b87856040519063cf9349b160e01b82526004820152fd5b60046040517f11e86f73000000000000000000000000000000000000000000000000000000008152fd5b905081511415866107eb565b34610546576040366003190112610546576040610d28610d206121b9565b6004356129b9565b81519060206001600160a01b03918281511684520151166020820152f35b3461054657610d5436612412565b9091610d6082826128ba565b610d6981612b0f565b8391935103610f5d57610d7c815161250e565b926000805b8351811015610e60576001600160a01b03610d9c828661254f565b511660405180916306e1541160e21b825287600483015289602483015281604460209485935afa91821561039e57600092610e32575b5050610dde828861254f565b52610de9818761254f565b5115610e22575b828214610e0557610e0090612540565b610d81565b604051635812992d60e11b815280610502868a89600485016124f2565b90610e2c90612540565b90610df0565b90809250813d8311610e59575b610e49818361224d565b8101031261054657518880610dd2565b503d610e3f565b50939490926000925b8651841015610f145760019460005b878951821015610ed25750610e8d868a61254f565b51610e98828b61254f565b511480610ec8575b610eb3575b610eae90612540565b610e78565b95610ec0610eae91612540565b969050610ea5565b5080861415610ea0565b610ee191508297969396612563565b1015610ef657610ef090612540565b92610e69565b5061050283604051938493635812992d60e11b8552600485016124f2565b7fbf5144194c2fdeb5c38f988f8fc115ccb60cd44df98443be9cce2808f35133bc6020838060005260678252600019604060002055606a825260006040812055604051908152a1005b604051635812992d60e11b81529384935061050292600485016124f2565b3461054657610f89366121a3565b610f9282612ad0565b6020810151151590816110d3575b506110bb57610fad612445565b81600052606760205260016040600020015480156110915760011c600181018091116105f757811061106057816000526067602052806040600020541461102f57816040917fa9b994c5f360eb267c36dec4b76776cae1c2f79cf0b3863baf389a499a6d689a93600052606760205280836000205582519182526020820152a1005b602490604051907f36b7bd8f0000000000000000000000000000000000000000000000000000000082526004820152fd5b602490604051907f651a749b0000000000000000000000000000000000000000000000000000000082526004820152fd5b60046040517f1741ad92000000000000000000000000000000000000000000000000000000008152fd5b60248260405190632dc5633f60e11b82526004820152fd5b905051151583610fa0565b34610546576106cf6110ef366123df565b906128ba565b34610546576020610764611108366121a3565b61111481839493612b34565b92612867565b611123366121cf565b90916001600160a01b03928361113984846129b9565b5116156113ef57816000526020606b81526040600020938581169485600052825260016040600020015434106113ad5783600052606b8252604060002085600052825260ff6040600020541661137c57611194818486612570565b9586600052606c83526040600020541661132b5783600052606a8252604060002054606b83526040600020866000528352600360406000200154856000526069845260406000205490606b8552604060002088600052855260026040600020015486109283156112f2575b5082156112b9575b5050611274575084600052606c81526040600020336001600160a01b03198254161781554260018201556002349101556040519485528401524260408401523460608401527f3c76df9f72b14079abf737d2427a5793d7e89089be7d17c3508f04dc9e8344e560803394a4005b6040517fc7ceed230000000000000000000000000000000000000000000000000000000081526001600160a01b03919091166004820152602481019290925250604490fd5b801515925090826112e8575b826112d4575b50508780611207565b6112de92506124e5565b83111587806112cb565b81811192506112c5565b8091935015159081611320575b8161130d575b5091896111ff565b905061131982876124e5565b1189611305565b8287101591506112ff565b6040517fedcc16010000000000000000000000000000000000000000000000000000000081526004810187905260248101949094526044840192909252506001600160a01b03166064820152608490fd5b602485604051907f6a52b7940000000000000000000000000000000000000000000000000000000082526004820152fd5b6040517fe309554f0000000000000000000000000000000000000000000000000000000081526001600160a01b03919091166004820152346024820152604490fd5b602483856040519163950764a360e01b8352166004820152fd5b346105465760203660031901126105465760043560005260696020526020604060002054604051908152f35b3461054657611443366123df565b90600019908161145282612ad0565b510361167457611460612445565b80600052606792602092848452600180604060002001541561165c57825115610ad557839291906000815b6114f0575b5050506114ca7f445aa3dd0c2baa28306a020b0ad28802dac8ce56b94bf9ae2521afa90f855bfb91604051918291878352878301906123a2565b0390a2816114d782612ad0565b0151156114e057005b6000525260006040812055600080f35b90919293845182101561165557506001600160a01b0380611511838761254f565b51168015801561164c575b61163457866000526066808952604060002082600052895260406000209280866040519561154987612231565b8281541687520154168a8501908082521561161c57819051169351169288600052818a526040600020816000528a526040600020936001600160a01b031994818682541617905589600052828b526040600020906000528a52856040600020019084825416179055876000528089526040600020826000528952846040600020018381541690558760005288526040600020906000528752604060002090815416905584600052868652816040600020019081549081156105f75783928561161393019055612540565b8594939261148b565b6024846040519063950764a360e01b82526004820152fd5b60249060405190633283c86d60e21b82526004820152fd5b5083811461151c565b9392611490565b6024846040519063cf9349b160e01b82526004820152fd5b60046040517f8570eaf5000000000000000000000000000000000000000000000000000000008152fd5b346105465760003660031901126105465760206001600160a01b0360335416604051908152f35b34610546576020366003190112610546576116f86116e4600435612a0f565b6040519182916020835260208301906123a2565b0390f35b3461054657602036600319011261054657600435600052606a6020526020604060002054604051908152f35b3461054657606036600319011261054657602460043567ffffffffffffffff82358181116105465761175e903690600401612287565b90604435908111610546576117779036906004016122f5565b9161178181612ad0565b9360209485810151151590816119d5575b506119bf5761179f612445565b816000526066908186526040600020916001928360005287526001600160a01b03918284604060002001541615611970575b855115610ad55790916000845b611820575b6106cf888888807fded0d38026c6e9ca7e2ee1647ae6f70e2306bcc9dcabbb9888888683513e16096109778f6040519181839283528201876123a2565b865181101561196b5781611834828961254f565b511680158015611962575b61194b5786600052848a526040600020816000528a52828660406000200154166119345785949392918a61192b9289600052868252604060002088600052825284604060002054168a60005287835260406000208160005283528789604060002001936001600160a01b03199484868254161790558c600052528d60406000209083600052526040600020908382541617905589600052868d526040600020886000528d526040600020818382541617905589600052868d526040600020906000528c528680604060002001918254161790558760005260678b5285604060002001610a898154612540565b909192936117de565b839060405190635bdca25960e11b82526004820152fd5b839060405190633283c86d60e21b82526004820152fd5b5085811461183f565b6117e3565b846000528188526040600020846000528852836040600020016001600160a01b0319908582825416179055856000528289526040600020856000528952846040600020918254161790556117d1565b9060405190632dc5633f60e11b82526004820152fd5b905051151586611792565b34610546576000366003190112610546576119f9612445565b60006001600160a01b036033546001600160a01b03198116603355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b34610546576020366003190112610546576004356001600160a01b0380821680920361054657611a7260ff60005460081c16612683565b611a7a612445565b8160655491821614611abc576001600160a01b03191681176065557f1e44815867bf36700178046dec2874b58492fa049a6775df578903717bb05b35600080a2005b602482604051907f463603370000000000000000000000000000000000000000000000000000000082526004820152fd5b34610546576020366003190112610546576004356001600160a01b0381168091036105465760207f32b3ac230a658ab5610f52a0663b04da86f41860736f6610f0db3d50e37bb8c191611b3e612445565b806001600160a01b03196068541617606855604051908152a1005b34610546576020806003193601126105465767ffffffffffffffff906004358281116105465736602382011215610546578060040135928311611e1d5760405192611bad601f8201601f191684018561224d565b808452828401913660248383010111610546578160009260248693018537850101526000549060ff8260081c161591828093611e10575b8015611df9575b15611d8f5760ff19811660011760005582611d7d575b506040848051810103126105465751926001600160a01b039081851680950361054657604001519080821680920361054657611c4d60ff60005460081c16611c4881612683565b612683565b611c563361249d565b611c6760ff60005460081c16612683565b611c6f612445565b8160655491821614611abc576001600160a01b0319168117606555807f1e44815867bf36700178046dec2874b58492fa049a6775df578903717bb05b35600080a2611cb8612445565b8315611d2a57611cc78461249d565b604051937f45acd56f401dc3db1d520e5e214f090b4ab3e3fbf42fd24596cb511edaad876a600080a3611cf657005b7f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989161ff00196000541660005560018152a1005b6084836040519062461bcd60e51b82526004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b61ffff19166101011760005584611c01565b6084846040519062461bcd60e51b82526004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b50303b158015611beb5750600160ff821614611beb565b50600160ff821610611be4565b634e487b7160e01b600052604160045260246000fd5b3461054657602036600319011261054657600060408051611e5381612215565b8281528260208201520152600435600052606c60205260606040600020604051611e7c81612215565b6001600160a01b0382541691828252604060026001830154926020850193845201549201918252604051928352516020830152516040820152f35b3461054657604036600319011261054657611ed06121b9565b60006080604051611ee0816121f9565b8281528260208201528260408201528260608201520152600435600052606b6020526001600160a01b036040600020911660005260205260a06040600020600460405191611f2d836121f9565b60ff8154161515835260018101546020840152600281015460408401526003810154606084015201546080820152611f926040518092608080918051151584526020810151602085015260408101516040850152606081015160608501520151910152565bf35b34610546576020610764611fa7366121cf565b91612570565b346105465760003660031901126105465760206001600160a01b0360685416604051908152f35b3461054657611fe2366121a3565b611fea612445565b81600052606a60205260406000205461203e57816040917fa183d22d23acca5ca994a967f4fe426238a7f86715b07e8080fa21d586c2d48493600052606a60205280836000205582519182526020820152a1005b602482604051907f728f71140000000000000000000000000000000000000000000000000000000082526004820152fd5b3461054657602036600319011261054657604061208d600435612ad0565b60208251918051835201516020820152f35b346105465760203660031901126105465760406120bd600435612b0f565b82519182526020820152f35b34610546576120d7366121a3565b906120e181612a0f565b906120eb81612b0f565b1561218b5782511061217a576020612126926001600160a01b03606554166040518080968194633ab489d560e21b83528988600485016124f2565b03915afa91821561039e57600092612146575b5060209261076491612867565b9091506020813d8211612172575b816121616020938361224d565b810103126105465751906020612139565b3d9150612154565b60046040516359fa4a9360e01b8152fd5b6024826040519063cf9349b160e01b82526004820152fd5b6040906003190112610546576004359060243590565b602435906001600160a01b038216820361054657565b60609060031901126105465760043590602435906044356001600160a01b03811681036105465790565b60a0810190811067ffffffffffffffff821117611e1d57604052565b6060810190811067ffffffffffffffff821117611e1d57604052565b6040810190811067ffffffffffffffff821117611e1d57604052565b90601f8019910116810190811067ffffffffffffffff821117611e1d57604052565b67ffffffffffffffff8111611e1d5760051b60200190565b81601f820112156105465780359161229e8361226f565b926122ac604051948561224d565b808452602092838086019260051b820101928311610546578301905b8282106122d6575050505090565b81356001600160a01b03811681036105465781529083019083016122c8565b81601f820112156105465780359061230c8261226f565b9260409061231c8251958661224d565b838552602091828601918360a080970286010194818611610546578401925b85841061234c575050505050505090565b868483031261054657825190612361826121f9565b8435908115158203610546578287928a945282870135838201528587013586820152606080880135908201526080808801359082015281520193019261233b565b90815180825260208080930193019160005b8281106123c2575050505090565b83516001600160a01b0316855293810193928101926001016123b4565b90604060031983011261054657600435916024359067ffffffffffffffff82116105465761240f91600401612287565b90565b60606003198201126105465760043591602435916044359067ffffffffffffffff82116105465761240f91600401612287565b6001600160a01b0360335416330361245957565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b603354906001600160a01b0380911691826001600160a01b0319821617603355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b919082039182116105f757565b61240f93926060928252602082015281604082015201906123a2565b906125188261226f565b612525604051918261224d565b8281528092612536601f199161226f565b0190602036910137565b60001981146105f75760010190565b80518210156105065760209160051b010190565b919082018092116105f757565b91604051916020830193845260408301526bffffffffffffffffffffffff199060601b166060820152605481526080810181811067ffffffffffffffff821117611e1d5760405251902090565b92916125c884612b0f565b825115610ad5571561266b5781511061217a576020816125eb61261493876128ba565b6001600160a01b03606554166040518080958194633ab489d560e21b8352888b600485016124f2565b03915afa90811561039e57600091612635575b50906126339193612867565b565b906020823d8211612663575b8161264e6020938361224d565b81010312612660575051612633612627565b80fd5b3d9150612641565b6024856040519063cf9349b160e01b82526004820152fd5b1561268a57565b608460405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152fd5b9291908051825103610ccc5760005b815181101561286057807f13fd92442ed93bfb53312f7fd027f95fcdf1c5029e15ed7c7648788db1766a2c60e06001600160a01b0361274561285b958761254f565b511688600052612855606b91602092808452604090816000208360005285528160002060ff1981541690558461277b898d61254f565b5101518d600052818652826000208460005286526001836000200155816127a2898d61254f565b5101518d60005281865282600020846000528652600283600020015560606127ca898d61254f565b5101518d60005281865282600020846000528652600383600020015560806127f2898d61254f565b510151908d6000528552816000208360005285526004826000200155612818878b61254f565b51918151948d8652850152830190608080918051151584526020810151602085015260408101516040850152606081015160608501520151910152565ba1612540565b612703565b5050509050565b6040907fc92bff37c4eb8ced74b70d4b27108870f738906225374b9b4cd761414e57dc86928160005260696020528083600020805482116128b2575b505082519182526020820152a1565b5580386128a3565b60005b82518110156129b4576001600160a01b03806128d9838661254f565b51169082151580612992575b612936578360005260209060668252604091826000209084600052526001826000200154161561291f57505061291a90612540565b6128bd565b602492505190633283c86d60e21b82526004820152fd5b8460001984018481116105f75761294c9161254f565b516040517fe3d493170000000000000000000000000000000000000000000000000000000081526001600160a01b03938416600482015291169091166024820152604490fd5b5060001983018381116105f7576129aa82918761254f565b51168211156128e5565b505050565b602060409182516129c981612231565b60009281848093520152815260666020528181206001600160a01b03809416825260205220906001604051926129fe84612231565b828154168452015416602082015290565b600090808252602060678152600191604083818620015494612a308661226f565b95612a3d8351978861224d565b808752612a4c601f199161226f565b0136858801378281528460669485815283832082845281526001600160a01b039586838686200154169584935b612a8a575b50505050505050505090565b8951841015612acb57889688612aa0868d61254f565b91168091528186528284528686209086528352612ac4888888882001541694612540565b9396612a79565b612a7e565b60006020604051612ae081612231565b828152015260005260676020526040600020600160405191612b0183612231565b805483520154602082015290565b600052606760205260406000209060018254920154918015612b2f579190565b508190565b91612b3e83612a0f565b91612b4884612b0f565b9390931561266b578381511061217a57612b62815161250e565b9260005b8251811015612c11576001600160a01b03612b81828561254f565b5116906040805180936306e1541160e21b82528a600483015287602483015281604460209687935afa918215612c075750600091612bd5575b50612bd09250612bca828861254f565b52612540565b612b66565b919282813d8311612c00575b612beb818361224d565b81010312612660575090612bd0915138612bba565b503d612be1565b513d6000823e3d90fd5b50945050506000905b805180831015612ccb5783612c2e916124e5565b8211612cb657612c3e828261254f565b51928315612caa576000835b8351811015612c9657612c5d818561254f565b518614612c73575b612c6e90612540565b612c4a565b90612c7d90612540565b90828203612c6557505050612c92925061254f565b5190565b5050925090612ca490612540565b90612c1a565b925090612ca490612540565b5050505060046040516359fa4a9360e01b8152fd5b505050505061217a56fea2646970667358221220229dcef813691c1b0c02320ab13943e5911a6e56f45581538a7f8c62013790be64736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "events": {
      "AdaptersDisabled(uint256,address[])": {
        "details": "Emitted when adapters are disabled for a specific domain.",
        "params": {
          "adapters": "- An array of disabled adapter addresses associated with this event.",
          "domain": "- The domain associated with the disabled adapters."
        }
      },
      "AdaptersEnabled(uint256,address[])": {
        "details": "Emitted when adapters are enabled for a specific domain.",
        "params": {
          "adapters": "- An array of enabled adapter addresses associated with this event.",
          "domain": "- The domain associated with the enabled adapters."
        }
      },
      "BondRecipientSet(address)": {
        "details": "Emitted when the bond recipient address is set.",
        "params": {
          "bondRecipient": "- The new bond recipient address as an Ethereum address."
        }
      },
      "ChallengeCreated(bytes32,uint256,uint256,address,address,uint256,uint256)": {
        "details": "Emitted when a challenge is created.",
        "params": {
          "adapter": "- The adapter address associated with the challenge.",
          "bond": "- The bond amount associated with the challenge.",
          "challengeId": "- The unique identifier for the challenge.",
          "challenger": "- The address of the challenger.",
          "domain": "- The domain associated with the challenge.",
          "id": "- The identifier associated with the challenge.",
          "timestamp": "- The timestamp when the challenge was created."
        }
      },
      "ChallengeRangeUpdated(uint256,uint256)": {
        "details": "Emitted when the challenge range is updated.",
        "params": {
          "domain": "- The domain associated with the updated challenge range.",
          "range": "- The new challenge range as a Uint256 identifier."
        }
      },
      "ChallengeResolved(bytes32,uint256,uint256,address,address,uint256,bool)": {
        "details": "Emitted when a challenge is resolved.",
        "params": {
          "adapter": "- The adapter address associated with the resolved challenge.",
          "bond": "- The bond amount associated with the resolved challenge.",
          "challengeId": "- The unique identifier for the resolved challenge.",
          "challengeSuccessful": "- A boolean indicating whether the challenge was successful.",
          "challenger": "- The address of the challenger.",
          "domain": "- The domain associated with the resolved challenge.",
          "id": "- The identifier associated with the resolved challenge."
        }
      },
      "HashiSet(address)": {
        "details": "Emitted when the address of the IHashi contract is set.",
        "params": {
          "hashi": "- The address of the IHashi contract associated with this event."
        }
      },
      "Init(address,address)": {
        "details": "Emitted when initialization occurs with the owner's address and the IHashi contract address.",
        "params": {
          "hashi": "- The address of the IHashi contract associated with this event.",
          "owner": "- The address of the owner associated with this event."
        }
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "NewHead(uint256,uint256)": {
        "details": "Emitted when a new head is updated.",
        "params": {
          "domain": "- The domain associated with the new head.",
          "head": "- The new head as a Uint256 identifier."
        }
      },
      "NoConfidenceDeclared(uint256)": {
        "details": "Emitted when a declaration of no confidence is made for a specific domain.",
        "params": {
          "domain": "- The domain associated with the declaration."
        }
      },
      "SettingsInitialized(uint256,address,(bool,uint256,uint256,uint256,uint256))": {
        "details": "Emitted when settings are initialized for a specific domain and adapter.",
        "params": {
          "adapter": "- The adapter address associated with the initialized settings.",
          "domain": "- The domain associated with the initialized settings.",
          "settings": "- The initialized settings object."
        }
      },
      "ThresholdSet(uint256,uint256)": {
        "details": "Emitted when the threshold is set for a specific domain.",
        "params": {
          "domain": "- The domain associated with the set threshold.",
          "threshold": "- The new threshold value associated with this event."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "challengeAdapter(uint256,uint256,address)": {
        "details": "Challenges the adapter to provide a response. If the adapter fails, it can be quarantined.",
        "params": {
          "adapter": "- The address of the adapter to challenge.",
          "domain": "- The Uint256 identifier for the domain.",
          "id": "- The Uint256 identifier for the challenge."
        }
      },
      "checkAdapterOrderAndValidity(uint256,address[])": {
        "details": "Checks the order and validity of adapters for a given domain.",
        "params": {
          "_adapters": "- An array of adapter instances.",
          "domain": "- The Uint256 identifier for the domain."
        }
      },
      "declareNoConfidence(uint256,uint256,address[])": {
        "details": "Show that enough adapters disagree that they could not make a threshold if the remainder all agree with one.",
        "params": {
          "adapters": "- An array of adapter instances.",
          "domain": "- The Uint256 identifier for the domain.",
          "id": "- The Uint256 identifier."
        }
      },
      "disableAdapters(uint256,address[])": {
        "details": "Disables a set of adapters for a given domain.",
        "params": {
          "adapters": "- An array of adapter instances to be disabled.",
          "domain": "- The Uint256 identifier for the domain."
        }
      },
      "enableAdapters(uint256,address[],(bool,uint256,uint256,uint256,uint256)[])": {
        "details": "Enables a set of adapters for a given domain with specific settings.",
        "params": {
          "adapters": "- An array of adapter instances.",
          "domain": "- The Uint256 identifier for the domain.",
          "settings": "- An array of settings, corresponding to each adapter."
        }
      },
      "getAdapterLink(uint256,address)": {
        "details": "Get the previous and the next adapter given a domain and an adapter.",
        "params": {
          "adapter": "- IAdapter value for the adapter.",
          "domain": "- Uint256 identifier for the domain."
        },
        "returns": {
          "_0": "link - The Link struct containing the previous and the next adapter."
        }
      },
      "getAdapters(uint256)": {
        "details": "Returns an array of enabled adapters for a given domain.",
        "params": {
          "domain": "- Uint256 identifier for the domain for which to list adapters."
        },
        "returns": {
          "_0": "adapters - The adapters for a given domain."
        }
      },
      "getChallenge(bytes32)": {
        "details": "Get the current challenge given a challengeId.",
        "params": {
          "challengeId": "- The Bytes32 identifier for the challenge."
        },
        "returns": {
          "_0": "challenge - Challenge indicating the challenge parameters."
        }
      },
      "getChallengeId(uint256,uint256,address)": {
        "details": "Gets the challenge ID for a given domain, ID, and adapter.",
        "params": {
          "adapter": "- The adapter instance.",
          "domain": "- The Uint256 identifier for the domain.",
          "id": "- The Uint256 identifier."
        },
        "returns": {
          "challengeId": "The computed challenge ID as a bytes32 hash."
        }
      },
      "getChallengeRange(uint256)": {
        "details": "Get how far beyond the current highestId can be challenged.",
        "params": {
          "domain": "- The Uint256 identifier for the domain."
        },
        "returns": {
          "_0": "range - Uint256 indicating the challenge range."
        }
      },
      "getDomain(uint256)": {
        "details": "Get the current configuration for a given domain.",
        "params": {
          "domain": "- Uint256 identifier for the domain."
        },
        "returns": {
          "_0": "domain - The Domain struct containing the current configuration for a given domain."
        }
      },
      "getHash(uint256,uint256,address[])": {
        "details": "Returns the hash unanimously agreed upon by all of the given adapters.",
        "params": {
          "adapters": "- Array of adapter addresses to query.",
          "domain": "- Uint256 identifier for the domain to query.",
          "id": "- Uint256 identifier to query."
        },
        "returns": {
          "hash": "- Bytes32 hash agreed upon by the adapters for the given domain."
        }
      },
      "getHead(uint256)": {
        "details": "Returns the highest id reported for a given id",
        "params": {
          "domain": "- Uint256 identifier for the domain to query."
        },
        "returns": {
          "_0": "id - Uint256 indicating the highest id reported."
        }
      },
      "getSettings(uint256,address)": {
        "details": "Get the current settings for a given adapter.",
        "params": {
          "adapter": "- The adapter.",
          "domain": "- Uint256 identifier for the domain to query."
        },
        "returns": {
          "_0": "settings - The Settings for the given adapter."
        }
      },
      "getThresholdAndCount(uint256)": {
        "details": "Returns the threshold and count for a given domain.",
        "params": {
          "domain": "- Uint256 identifier for the domain."
        },
        "returns": {
          "_0": "threshold - Uint256 adapters threshold for the given domain.",
          "_1": "count - Uint256 adapters count for the given domain."
        }
      },
      "getThresholdHash(uint256,uint256)": {
        "details": "Returns the hash agreed upon by a threshold of the enabled adapters.",
        "params": {
          "domain": "- Uint256 identifier for the domain to query.",
          "id": "- Uint256 identifier to query."
        },
        "returns": {
          "hash": "- Bytes32 hash agreed upon by a threshold of the adapters for the given domain."
        }
      },
      "getUnanimousHash(uint256,uint256)": {
        "details": "Returns the hash unanimously agreed upon by ALL of the enabled adapters.",
        "params": {
          "domain": "- Uint256 identifier for the domain to query.",
          "id": "- Uint256 identifier to query."
        },
        "returns": {
          "hash": "- Bytes32 hash agreed upon by the adapters for the given domain."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "replaceQuarantinedAdapters(uint256,address[],address[],(bool,uint256,uint256,uint256,uint256)[])": {
        "details": "Replaces the quarantined adapters for a given domain with new adapters and settings.",
        "params": {
          "currentAdapters": "- An array of current adapter instances to be replaced.",
          "domain": "- The Uint256 identifier for the domain.",
          "newAdapters": "- An array of new adapter instances to replace the current ones.",
          "settings": "- An array of settings corresponding to the new adapters."
        }
      },
      "resolveChallenge(uint256,uint256,address,address[])": {
        "details": "Resolves a challenge by comparing results from a specific adapter with others.",
        "params": {
          "adapter": "- The adapter instance for comparison.",
          "adapters": "- An array of adapter instances for comparison.",
          "domain": "- The Uint256 identifier for the domain.",
          "id": "- The Uint256 identifier."
        },
        "returns": {
          "success": "A boolean indicating the success of the challenge resolution."
        }
      },
      "setBondRecipient(address)": {
        "details": "Sets the bond recipient address for payments.",
        "params": {
          "bondRecipient": "- The address where bond payments should be sent."
        }
      },
      "setChallengeRange(uint256,uint256)": {
        "details": "Sets the challenge range for a specific domain.",
        "params": {
          "domain": "- The Uint256 identifier for the domain.",
          "range": "- The Uint256 range to set for the given domain."
        }
      },
      "setThreshold(uint256,uint256)": {
        "details": "Sets the threshold for a specific domain.",
        "params": {
          "domain": "- The Uint256 identifier for the domain.",
          "threshold": "- The Uint256 threshold to set for the given domain."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "challengeAdapter(uint256,uint256,address)": {
        "notice": "Caller must pay a minimum bond to issue the challenge. This bond should be high enough to cover the gas costs for successfully completing the challenge."
      },
      "getHash(uint256,uint256,address[])": {
        "notice": "Adapters must be in numerical order from smallest to largest and contain no duplicates.Reverts if adapters are out of order or contain duplicates.Reverts if adapters disagree.Revert if the adapters do not yet have the hash for the given ID.Reverts if no adapters are set for the given domain."
      },
      "getThresholdAndCount(uint256)": {
        "notice": "If the threshold for a domain has not been set, or is explicitly set to 0, this function will return a threshold equal to the adapters count for the given domain."
      },
      "getThresholdHash(uint256,uint256)": {
        "notice": "Reverts if no threshold is not reached.Reverts if no adapters are set for the given domain."
      },
      "getUnanimousHash(uint256,uint256)": {
        "notice": "Reverts if adapters disagree.Revert if the adapters do not yet have the hash for the given ID.Reverts if no adapters are set for the given domain."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 139,
        "contract": "contracts/ownable/GiriGiriBashi.sol:GiriGiriBashi",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 142,
        "contract": "contracts/ownable/GiriGiriBashi.sol:GiriGiriBashi",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 681,
        "contract": "contracts/ownable/GiriGiriBashi.sol:GiriGiriBashi",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 11,
        "contract": "contracts/ownable/GiriGiriBashi.sol:GiriGiriBashi",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 131,
        "contract": "contracts/ownable/GiriGiriBashi.sol:GiriGiriBashi",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2808,
        "contract": "contracts/ownable/GiriGiriBashi.sol:GiriGiriBashi",
        "label": "hashi",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IHashi)1173"
      },
      {
        "astId": 2816,
        "contract": "contracts/ownable/GiriGiriBashi.sol:GiriGiriBashi",
        "label": "_adapters",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_uint256,t_mapping(t_contract(IAdapter)717,t_struct(Link)1266_storage))"
      },
      {
        "astId": 2821,
        "contract": "contracts/ownable/GiriGiriBashi.sol:GiriGiriBashi",
        "label": "_domains",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_struct(Domain)1259_storage)"
      },
      {
        "astId": 1426,
        "contract": "contracts/ownable/GiriGiriBashi.sol:GiriGiriBashi",
        "label": "bondRecipient",
        "offset": 0,
        "slot": "104",
        "type": "t_address_payable"
      },
      {
        "astId": 1430,
        "contract": "contracts/ownable/GiriGiriBashi.sol:GiriGiriBashi",
        "label": "_heads",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1434,
        "contract": "contracts/ownable/GiriGiriBashi.sol:GiriGiriBashi",
        "label": "_challengeRanges",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1442,
        "contract": "contracts/ownable/GiriGiriBashi.sol:GiriGiriBashi",
        "label": "_settings",
        "offset": 0,
        "slot": "107",
        "type": "t_mapping(t_uint256,t_mapping(t_contract(IAdapter)717,t_struct(Settings)746_storage))"
      },
      {
        "astId": 1447,
        "contract": "contracts/ownable/GiriGiriBashi.sol:GiriGiriBashi",
        "label": "_challenges",
        "offset": 0,
        "slot": "108",
        "type": "t_mapping(t_bytes32,t_struct(Challenge)735_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAdapter)717": {
        "encoding": "inplace",
        "label": "contract IAdapter",
        "numberOfBytes": "20"
      },
      "t_contract(IHashi)1173": {
        "encoding": "inplace",
        "label": "contract IHashi",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_struct(Challenge)735_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IGiriGiriBashi.Challenge)",
        "numberOfBytes": "32",
        "value": "t_struct(Challenge)735_storage"
      },
      "t_mapping(t_contract(IAdapter)717,t_struct(Link)1266_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IAdapter)717",
        "label": "mapping(contract IAdapter => struct IShuSho.Link)",
        "numberOfBytes": "32",
        "value": "t_struct(Link)1266_storage"
      },
      "t_mapping(t_contract(IAdapter)717,t_struct(Settings)746_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IAdapter)717",
        "label": "mapping(contract IAdapter => struct IGiriGiriBashi.Settings)",
        "numberOfBytes": "32",
        "value": "t_struct(Settings)746_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_contract(IAdapter)717,t_struct(Link)1266_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(contract IAdapter => struct IShuSho.Link))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IAdapter)717,t_struct(Link)1266_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_contract(IAdapter)717,t_struct(Settings)746_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(contract IAdapter => struct IGiriGiriBashi.Settings))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IAdapter)717,t_struct(Settings)746_storage)"
      },
      "t_mapping(t_uint256,t_struct(Domain)1259_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IShuSho.Domain)",
        "numberOfBytes": "32",
        "value": "t_struct(Domain)1259_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Challenge)735_storage": {
        "encoding": "inplace",
        "label": "struct IGiriGiriBashi.Challenge",
        "members": [
          {
            "astId": 730,
            "contract": "contracts/ownable/GiriGiriBashi.sol:GiriGiriBashi",
            "label": "challenger",
            "offset": 0,
            "slot": "0",
            "type": "t_address_payable"
          },
          {
            "astId": 732,
            "contract": "contracts/ownable/GiriGiriBashi.sol:GiriGiriBashi",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 734,
            "contract": "contracts/ownable/GiriGiriBashi.sol:GiriGiriBashi",
            "label": "bond",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Domain)1259_storage": {
        "encoding": "inplace",
        "label": "struct IShuSho.Domain",
        "members": [
          {
            "astId": 1256,
            "contract": "contracts/ownable/GiriGiriBashi.sol:GiriGiriBashi",
            "label": "threshold",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1258,
            "contract": "contracts/ownable/GiriGiriBashi.sol:GiriGiriBashi",
            "label": "count",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Link)1266_storage": {
        "encoding": "inplace",
        "label": "struct IShuSho.Link",
        "members": [
          {
            "astId": 1262,
            "contract": "contracts/ownable/GiriGiriBashi.sol:GiriGiriBashi",
            "label": "previous",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IAdapter)717"
          },
          {
            "astId": 1265,
            "contract": "contracts/ownable/GiriGiriBashi.sol:GiriGiriBashi",
            "label": "next",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IAdapter)717"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Settings)746_storage": {
        "encoding": "inplace",
        "label": "struct IGiriGiriBashi.Settings",
        "members": [
          {
            "astId": 737,
            "contract": "contracts/ownable/GiriGiriBashi.sol:GiriGiriBashi",
            "label": "quarantined",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 739,
            "contract": "contracts/ownable/GiriGiriBashi.sol:GiriGiriBashi",
            "label": "minimumBond",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 741,
            "contract": "contracts/ownable/GiriGiriBashi.sol:GiriGiriBashi",
            "label": "startId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 743,
            "contract": "contracts/ownable/GiriGiriBashi.sol:GiriGiriBashi",
            "label": "idDepth",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 745,
            "contract": "contracts/ownable/GiriGiriBashi.sol:GiriGiriBashi",
            "label": "timeout",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}