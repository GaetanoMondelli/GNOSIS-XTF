{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "@hyperlane-xyz/core/contracts/interfaces/hooks/IPostDispatchHook.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.8.0;\n\n/*@@@@@@@       @@@@@@@@@\n @@@@@@@@@       @@@@@@@@@\n  @@@@@@@@@       @@@@@@@@@\n   @@@@@@@@@       @@@@@@@@@\n    @@@@@@@@@@@@@@@@@@@@@@@@@\n     @@@@@  HYPERLANE  @@@@@@@\n    @@@@@@@@@@@@@@@@@@@@@@@@@\n   @@@@@@@@@       @@@@@@@@@\n  @@@@@@@@@       @@@@@@@@@\n @@@@@@@@@       @@@@@@@@@\n@@@@@@@@@       @@@@@@@@*/\n\ninterface IPostDispatchHook {\n    enum Types {\n        UNUSED,\n        ROUTING,\n        AGGREGATION,\n        MERKLE_TREE,\n        INTERCHAIN_GAS_PAYMASTER,\n        FALLBACK_ROUTING,\n        ID_AUTH_ISM,\n        PAUSABLE,\n        PROTOCOL_FEE,\n        LAYER_ZERO_V1\n    }\n\n    /**\n     * @notice Returns an enum that represents the type of hook\n     */\n    function hookType() external view returns (uint8);\n\n    /**\n     * @notice Returns whether the hook supports metadata\n     * @param metadata metadata\n     * @return Whether the hook supports metadata\n     */\n    function supportsMetadata(\n        bytes calldata metadata\n    ) external view returns (bool);\n\n    /**\n     * @notice Post action after a message is dispatched via the Mailbox\n     * @param metadata The metadata required for the hook\n     * @param message The message passed from the Mailbox.dispatch() call\n     */\n    function postDispatch(\n        bytes calldata metadata,\n        bytes calldata message\n    ) external payable;\n\n    /**\n     * @notice Compute the payment required by the postDispatch call\n     * @param metadata The metadata required for the hook\n     * @param message The message passed from the Mailbox.dispatch() call\n     * @return Quoted payment for the postDispatch call\n     */\n    function quoteDispatch(\n        bytes calldata metadata,\n        bytes calldata message\n    ) external view returns (uint256);\n}\n"
    },
    "@hyperlane-xyz/core/contracts/interfaces/IInterchainSecurityModule.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.6.11;\n\ninterface IInterchainSecurityModule {\n    enum Types {\n        UNUSED,\n        ROUTING,\n        AGGREGATION,\n        LEGACY_MULTISIG,\n        MERKLE_ROOT_MULTISIG,\n        MESSAGE_ID_MULTISIG,\n        NULL, // used with relayer carrying no metadata\n        CCIP_READ\n    }\n\n    /**\n     * @notice Returns an enum that represents the type of security model\n     * encoded by this ISM.\n     * @dev Relayers infer how to fetch and format metadata.\n     */\n    function moduleType() external view returns (uint8);\n\n    /**\n     * @notice Defines a security model responsible for verifying interchain\n     * messages based on the provided metadata.\n     * @param _metadata Off-chain metadata provided by a relayer, specific to\n     * the security model encoded by the module (e.g. validator signatures)\n     * @param _message Hyperlane encoded interchain message\n     * @return True if the message was verified\n     */\n    function verify(\n        bytes calldata _metadata,\n        bytes calldata _message\n    ) external returns (bool);\n}\n\ninterface ISpecifiesInterchainSecurityModule {\n    function interchainSecurityModule()\n        external\n        view\n        returns (IInterchainSecurityModule);\n}\n"
    },
    "@hyperlane-xyz/core/contracts/interfaces/IMailbox.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.8.0;\n\nimport {IInterchainSecurityModule} from \"./IInterchainSecurityModule.sol\";\nimport {IPostDispatchHook} from \"./hooks/IPostDispatchHook.sol\";\n\ninterface IMailbox {\n    // ============ Events ============\n    /**\n     * @notice Emitted when a new message is dispatched via Hyperlane\n     * @param sender The address that dispatched the message\n     * @param destination The destination domain of the message\n     * @param recipient The message recipient address on `destination`\n     * @param message Raw bytes of message\n     */\n    event Dispatch(\n        address indexed sender,\n        uint32 indexed destination,\n        bytes32 indexed recipient,\n        bytes message\n    );\n\n    /**\n     * @notice Emitted when a new message is dispatched via Hyperlane\n     * @param messageId The unique message identifier\n     */\n    event DispatchId(bytes32 indexed messageId);\n\n    /**\n     * @notice Emitted when a Hyperlane message is processed\n     * @param messageId The unique message identifier\n     */\n    event ProcessId(bytes32 indexed messageId);\n\n    /**\n     * @notice Emitted when a Hyperlane message is delivered\n     * @param origin The origin domain of the message\n     * @param sender The message sender address on `origin`\n     * @param recipient The address that handled the message\n     */\n    event Process(\n        uint32 indexed origin,\n        bytes32 indexed sender,\n        address indexed recipient\n    );\n\n    function localDomain() external view returns (uint32);\n\n    function delivered(bytes32 messageId) external view returns (bool);\n\n    function defaultIsm() external view returns (IInterchainSecurityModule);\n\n    function defaultHook() external view returns (IPostDispatchHook);\n\n    function requiredHook() external view returns (IPostDispatchHook);\n\n    function latestDispatchedId() external view returns (bytes32);\n\n    function dispatch(\n        uint32 destinationDomain,\n        bytes32 recipientAddress,\n        bytes calldata messageBody\n    ) external payable returns (bytes32 messageId);\n\n    function quoteDispatch(\n        uint32 destinationDomain,\n        bytes32 recipientAddress,\n        bytes calldata messageBody\n    ) external view returns (uint256 fee);\n\n    function dispatch(\n        uint32 destinationDomain,\n        bytes32 recipientAddress,\n        bytes calldata body,\n        bytes calldata defaultHookMetadata\n    ) external payable returns (bytes32 messageId);\n\n    function quoteDispatch(\n        uint32 destinationDomain,\n        bytes32 recipientAddress,\n        bytes calldata messageBody,\n        bytes calldata defaultHookMetadata\n    ) external view returns (uint256 fee);\n\n    function dispatch(\n        uint32 destinationDomain,\n        bytes32 recipientAddress,\n        bytes calldata body,\n        bytes calldata customHookMetadata,\n        IPostDispatchHook customHook\n    ) external payable returns (bytes32 messageId);\n\n    function quoteDispatch(\n        uint32 destinationDomain,\n        bytes32 recipientAddress,\n        bytes calldata messageBody,\n        bytes calldata customHookMetadata,\n        IPostDispatchHook customHook\n    ) external view returns (uint256 fee);\n\n    function process(\n        bytes calldata metadata,\n        bytes calldata message\n    ) external payable;\n\n    function recipientIsm(\n        address recipient\n    ) external view returns (IInterchainSecurityModule module);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/ETFIssuingChain.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { IERC721 } from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { ISimpleERC20 } from \"./SimpleERC20.sol\";\nimport \"@hyperlane-xyz/core/contracts/interfaces/IMailbox.sol\";\nimport { IInterchainSecurityModule } from \"@hyperlane-xyz/core/contracts/interfaces/IInterchainSecurityModule.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport { Proof, Prover } from \"./Prover.sol\";\nimport { IYaho } from \"./interfaces/IYaho.sol\";\nimport { IHashi } from \"./interfaces/IHashi.sol\";\nimport { GiriGiriBashi } from \"./ownable/GiriGiriBashi.sol\";\nimport { IReporter } from \"./interfaces/IReporter.sol\";\nimport { IAdapter } from \"./interfaces/IAdapter.sol\";\nimport \"hardhat/console.sol\";\n\nstruct TokenQuantity {\n\taddress _address;\n\tuint256 _quantity;\n\tuint32 _chainId;\n\taddress _contributor;\n\taddress _aggregator;\n}\n\nstruct Vault {\n\tTokenQuantity[] _tokens;\n\tVaultState state;\n}\n\nenum VaultState {\n\tEMPTY,\n\tOPEN,\n\tMINTED,\n\tBURNED\n}\n\nstruct EventInfo {\n\taddress sender;\n\tuint256 quantity;\n\tuint32 chainId;\n\taddress contributor;\n}\n\nstruct DepositInfo {\n\tuint256 vaultId;\n\tTokenQuantity[] tokens;\n}\n\ncontract ETFIssuingChain {\n\tbytes32 public latestCommitment;\n\taddress public sideChainLock;\n\tuint32 public sideChainId;\n\tTokenQuantity[] public requiredTokens;\n\tmapping(address => TokenQuantity) public addressToToken;\n\tuint32 public chainId;\n\tuint32 public mainChainId;\n\n\tuint32[] public receivedMessages;\n\n\t// Siechain params\n\taddress public mainChainLock;\n\tIMailbox outbox;\n\tIInterchainSecurityModule securityModule;\n\tProver proverSlotZero;\n\taddress hashi;\n\tIAdapter adapter;\n\tIReporter reporter;\n\tIYaho yaho;\n\tGiriGiriBashi giriGiriBashi;\n\t// Mainchain params\n\taddress public etfToken;\n\tuint256 public etfTokenPerVault;\n\tuint256 THRESHOLD = 1;\n\tuint256 nonce = 0;\n\n\tmapping(uint256 => address[]) contributorsByVault;\n\tmapping(uint256 => mapping(address => uint256))\n\t\tpublic accountContributionsPerVault;\n\n\tevent Deposit(\n\t\tuint256 _vaultId,\n\t\taddress _address,\n\t\tuint256 _quantity,\n\t\tuint32 _chainId,\n\t\taddress _contributor\n\t);\n\n\tmapping(uint256 => Vault) public vaults;\n\n\tconstructor(\n\t\tuint32 _mainChain,\n\t\tuint32 _chainId,\n\t\tTokenQuantity[] memory _requiredTokens,\n\t\taddress _hashi,\n\t\taddress _hyperlaneAdapter,\n\t\taddress _hyperlaneReporter,\n\t\taddress _yahoAddress,\n\t\taddress _etfToken,\n\t\tuint256 _etfTokenPerVault\n\t) {\n\t\tmainChainId = _mainChain;\n\t\tchainId = _chainId;\n\t\tetfToken = _etfToken;\n\t\tetfTokenPerVault = _etfTokenPerVault;\n\t\tfor (uint256 i = 0; i < _requiredTokens.length; i++) {\n\t\t\trequiredTokens.push(_requiredTokens[i]);\n\t\t\taddressToToken[_requiredTokens[i]._address] = _requiredTokens[i];\n\t\t}\n\t\tadapter = IAdapter(_hyperlaneAdapter);\n\t\treporter = IReporter(_hyperlaneReporter);\n\t\thashi = _hashi;\n\t\tgiriGiriBashi = new GiriGiriBashi(\n\t\t\tmsg.sender,\n\t\t\thashi,\n\t\t\tpayable(msg.sender)\n\t\t);\n\t\tproverSlotZero = new Prover(_chainId, 0x0, address(giriGiriBashi));\n\t\tyaho = IYaho(_yahoAddress);\n\t}\n\n\tfunction setSideChainParams(\n\t\taddress _mainChainLock,\n\t\taddress _outbox,\n\t\taddress _securityModule\n\t) public {\n\t\trequire(\n\t\t\t!isMainChain(),\n\t\t\t\"Main chain lock address cannot be set on main chain\"\n\t\t);\n\t\tmainChainLock = _mainChainLock;\n\t\toutbox = IMailbox(_outbox);\n\t\tsecurityModule = IInterchainSecurityModule(_securityModule);\n\t}\n\n\tfunction setMainChainParams(\n\t\taddress _sideChainLock,\n\t\tuint32 _sideChainId,\n\t\taddress _outbox,\n\t\taddress _securityModule\n\t) public {\n\t\trequire(\n\t\t\tisMainChain(),\n\t\t\t\"Side Chain lock address can only be set mainchain\"\n\t\t);\n\t\toutbox = IMailbox(_outbox);\n\t\tsideChainId = _sideChainId;\n\t\tsecurityModule = IInterchainSecurityModule(_securityModule);\n\t\tsideChainLock = _sideChainLock;\n\t}\n\n\tfunction updateCommitment() public {\n\t\t// based on states values, generate a commitment\n\t\tVaultState[] memory states = getVaultStates();\n\t\t// fixed nonce for demo\n\t\tlatestCommitment = keccak256(\n\t\t\tabi.encode(block.chainid, states, nonce)\n\t\t);\n\t}\n\n\tfunction getVaultStates() public view returns (VaultState[] memory) {\n\t\tVaultState[] memory states = new VaultState[](90);\n\t\tfor (uint256 i = 0; i < states.length; i++) {\n\t\t\tstates[i] = vaults[i].state;\n\t\t}\n\t\treturn states;\n\t}\n\n\tfunction getVault(uint256 _vaultId) public view returns (Vault memory) {\n\t\treturn vaults[_vaultId];\n\t}\n\n\tfunction getRequiredTokens() public view returns (TokenQuantity[] memory) {\n\t\treturn requiredTokens;\n\t}\n\n\tfunction setVaultState(uint256 _vaultId, VaultState _state) public {\n\t\tvaults[_vaultId].state = _state;\n\t}\n\n\tfunction isMainChain() public view returns (bool) {\n\t\treturn chainId == mainChainId;\n\t}\n\n\tfunction getIndexForDepositInfo(\n\t\tTokenQuantity memory _tokenQuantity\n\t) public view returns (uint256) {\n\t\t// return the index of the token in the requiredTokens array\n\t\tfor (uint256 i = 0; i < requiredTokens.length; i++) {\n\t\t\tif (requiredTokens[i]._address == _tokenQuantity._address) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n\n\tfunction _deposit(\n\t\tDepositInfo memory _depositInfo,\n\t\tuint32 _chainId\n\t) internal {\n\t\tuint256 _vaultId = _depositInfo.vaultId;\n\t\tTokenQuantity[] memory _tokens = _depositInfo.tokens;\n\t\trequire(\n\t\t\tvaults[_vaultId].state == VaultState.OPEN ||\n\t\t\t\tvaults[_vaultId].state == VaultState.EMPTY,\n\t\t\t\"Vault is not open or empty\"\n\t\t);\n\n\t\t// require(_chainId == chainId, \"ChainId does not match the contract chainId\")\n\n\t\tif (vaults[_vaultId].state == VaultState.EMPTY) {\n\t\t\tfor (uint256 i = 0; i < requiredTokens.length; i++) {\n\t\t\t\tvaults[_vaultId]._tokens.push(\n\t\t\t\t\tTokenQuantity(\n\t\t\t\t\t\trequiredTokens[i]._address,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\trequiredTokens[i]._chainId,\n\t\t\t\t\t\taddress(0),\n\t\t\t\t\t\trequiredTokens[i]._aggregator\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\t\t\tvaults[_vaultId].state = VaultState.OPEN;\n\t\t\tupdateCommitment();\n\t\t}\n\n\t\tfor (uint256 i = 0; i < _tokens.length; i++) {\n\t\t\t// if (_tokens[i]._chainId != _chainId) {\n\t\t\t// \trevert(\n\t\t\t// \t\t\"Token chainId does not match the chainId of the contract\"\n\t\t\t// \t);\n\t\t\t// }\n\t\t\tif (\n\t\t\t\t_tokens[i]._quantity + vaults[_vaultId]._tokens[i]._quantity >\n\t\t\t\taddressToToken[_tokens[i]._address]._quantity\n\t\t\t) {\n\t\t\t\trevert(\"Token quantity exceeds the required amount\");\n\t\t\t}\n\n\t\t\tuint256 index = getIndexForDepositInfo(_tokens[i]);\n\n\t\t\tif (_tokens[i]._chainId == _chainId) {\n\t\t\t\tIERC20(_tokens[i]._address).transferFrom(\n\t\t\t\t\t_tokens[i]._contributor,\n\t\t\t\t\taddress(this),\n\t\t\t\t\t_tokens[i]._quantity\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tvaults[_vaultId]._tokens[index]._quantity += _tokens[i]._quantity;\n\n\t\t\temit Deposit(\n\t\t\t\t_vaultId,\n\t\t\t\t_tokens[i]._address,\n\t\t\t\t_tokens[i]._quantity,\n\t\t\t\t_tokens[i]._chainId,\n\t\t\t\t_tokens[i]._contributor\n\t\t\t);\n\n\t\t\tif (isMainChain()) {\n\t\t\t\tif (\n\t\t\t\t\taccountContributionsPerVault[_vaultId][\n\t\t\t\t\t\t_tokens[i]._contributor\n\t\t\t\t\t] == 0\n\t\t\t\t) {\n\t\t\t\t\tcontributorsByVault[_vaultId].push(_tokens[i]._contributor);\n\t\t\t\t}\n\n\t\t\t\t// uint256 price = AggregatorV3Interface(_tokens[i]._aggretator).latestRoundData().answer;\n\n\t\t\t\t// (, /* uint80 roundID */ int answer, , , ) = AggregatorV3Interface(\n\t\t\t\t// \t_tokens[i]._aggregator\n\t\t\t\t// ).latestRoundData();\n\n\t\t\t\taccountContributionsPerVault[_vaultId][\n\t\t\t\t\t_tokens[i]._contributor\n\t\t\t\t] += _tokens[i]._quantity;\n\t\t\t}\n\t\t}\n\n\t\tfor (uint256 i = 0; i < requiredTokens.length; i++) {\n\t\t\tif (\n\t\t\t\tvaults[_vaultId]._tokens[i]._quantity <\n\t\t\t\trequiredTokens[i]._quantity\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tvaults[_vaultId].state = VaultState.MINTED;\n\t\tupdateCommitment();\n\n\t\tif (isMainChain()) {\n\t\t\tdistributeShares(_vaultId);\n\t\t} else {\n\t\t\tnotifyDepositToMainChain(_depositInfo);\n\t\t}\n\t}\n\n\tfunction notifyDepositToMainChain(\n\t\tDepositInfo memory _depositInfo\n\t) internal {\n\t\tbytes32 mainChainLockBytes32 = addressToBytes32(mainChainLock);\n\t\tuint256 fee = outbox.quoteDispatch(\n\t\t\tmainChainId,\n\t\t\tmainChainLockBytes32,\n\t\t\tabi.encode(_depositInfo)\n\t\t);\n\t\toutbox.dispatch{ value: fee }(\n\t\t\tmainChainId,\n\t\t\tmainChainLockBytes32,\n\t\t\tabi.encode(_depositInfo)\n\t\t);\n\t}\n\n\tfunction distributeShares(uint256 _vaultId) internal {\n\t\tuint256 totalContributions = 0;\n\t\tfor (uint256 i = 0; i < contributorsByVault[_vaultId].length; i++) {\n\t\t\ttotalContributions += accountContributionsPerVault[_vaultId][\n\t\t\t\tcontributorsByVault[_vaultId][i]\n\t\t\t];\n\t\t}\n\n\t\tfor (uint256 i = 0; i < contributorsByVault[_vaultId].length; i++) {\n\t\t\tuint256 shares = (accountContributionsPerVault[_vaultId][\n\t\t\t\tcontributorsByVault[_vaultId][i]\n\t\t\t] * etfTokenPerVault) / totalContributions;\n\t\t\tISimpleERC20(etfToken).mint(\n\t\t\t\tcontributorsByVault[_vaultId][i],\n\t\t\t\tshares\n\t\t\t);\n\t\t}\n\t}\n\n\tfunction deposit(DepositInfo memory _depositInfo) public payable {\n\t\t_deposit(_depositInfo, chainId);\n\t}\n\n\tfunction handle(\n\t\tuint32 _origin,\n\t\tbytes32 _sender,\n\t\tbytes calldata _message\n\t) external payable {\n\t\tif (isMainChain()) {\n\t\t\trequire(\n\t\t\t\tbytes32ToAddress(_sender) == sideChainLock,\n\t\t\t\t\"Sender to mainChain is not the sideChainLock\"\n\t\t\t);\n\t\t\tDepositInfo memory _depositInfo = abi.decode(\n\t\t\t\t_message,\n\t\t\t\t(DepositInfo)\n\t\t\t);\n\t\t\t// uint32 _chainId = _depositInfo.tokens[0]._chainId;\n\t\t\t_deposit(_depositInfo, chainId);\n\t\t\treturn;\n\t\t} else {\n\t\t\trequire(\n\t\t\t\tbytes32ToAddress(_sender) == mainChainLock,\n\t\t\t\t\"Sender to sideChain is not the mainChainLock\"\n\t\t\t);\n\t\t\tuint256 _vaultId = abi.decode(_message, (uint256));\n\t\t\t_burn(_vaultId);\n\t\t}\n\t}\n\n\tfunction _burn(uint256 _vaultId) internal {\n\t\trequire(\n\t\t\tvaults[_vaultId].state == VaultState.MINTED,\n\t\t\t\"Vault is not minted\"\n\t\t);\n\n\t\tfor (uint256 j = 0; j < vaults[_vaultId]._tokens.length; j++) {\n\t\t\tIERC20(vaults[_vaultId]._tokens[j]._address).transfer(\n\t\t\t\tmsg.sender,\n\t\t\t\tvaults[_vaultId]._tokens[j]._quantity\n\t\t\t);\n\t\t}\n\t\tvaults[_vaultId].state = VaultState.BURNED;\n\t\tupdateCommitment();\n\t}\n\n\tfunction dispatchCommitment(\n\t\tIReporter[] calldata reporters,\n\t\tIAdapter[] calldata adapters\n\t) public {\n\t\t// make sure that the commitment is updated\n\t\tyaho.dispatchMessage(\n\t\t\tchainId,\n\t\t\tTHRESHOLD,\n\t\t\tsideChainLock,\n\t\t\tabi.encode(latestCommitment),\n\t\t\treporters,\n\t\t\tadapters\n\t\t);\n\t}\n\n\tfunction secureBurn(\n\t\tuint256 _vaultId,\n\t\tbytes32 mainChainLastCommitment,\n\t\tProof calldata proof\n\t) public {\n\t\t// require(\n\t\t// \t!isMainChain(),\n\t\t// \t\"Secure Hashi burn can only be called on side chain\"\n\t\t// );\n\t\t// require(\n\t\t// \tproverSlotZero._verifyProof(\n\t\t// \t\tproof,\n\t\t// \t\tabi.encode(mainChainLastCommitment)\n\t\t// \t),\n\t\t// \t\"Proof verification failed\"\n\t\t// );\n\t\t_burn(_vaultId);\n\t\tsetVaultState(_vaultId, VaultState.BURNED);\n\t}\n\n\tfunction burn(uint256 _vaultId, Proof calldata proof) public {\n\t\trequire(\n\t\t\tvaults[_vaultId].state == VaultState.MINTED,\n\t\t\t\"Vault is not minted\"\n\t\t);\n\t\trequire(isMainChain(), \"Burn can only be called on main chain\");\n\n\t\tISimpleERC20(etfToken).burn(msg.sender, etfTokenPerVault);\n\t\tfor (uint256 j = 0; j < vaults[_vaultId]._tokens.length; j++) {\n\t\t\tif (vaults[_vaultId]._tokens[j]._chainId == chainId) {\n\t\t\t\tIERC20(vaults[_vaultId]._tokens[j]._address).transfer(\n\t\t\t\t\tmsg.sender,\n\t\t\t\t\tvaults[_vaultId]._tokens[j]._quantity\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tvaults[_vaultId].state = VaultState.BURNED;\n\t\tupdateCommitment();\n\n\t\t// notify burn to sidechain\n\t\tbytes32 sideChainLockBytes32 = addressToBytes32(sideChainLock);\n\t\tuint256 fee = outbox.quoteDispatch(\n\t\t\tsideChainId,\n\t\t\tsideChainLockBytes32,\n\t\t\tabi.encode(_vaultId)\n\t\t);\n\t\toutbox.dispatch{ value: fee }(\n\t\t\tsideChainId,\n\t\t\tsideChainLockBytes32,\n\t\t\tabi.encode(_vaultId)\n\t\t);\n\t}\n\n\tfunction addressToBytes32(address _addr) internal pure returns (bytes32) {\n\t\treturn bytes32(uint256(uint160(_addr)));\n\t}\n\n\tfunction bytes32ToAddress(\n\t\tbytes32 _bytes32\n\t) internal pure returns (address) {\n\t\treturn address(uint160(uint256(_bytes32)));\n\t}\n}\n"
    },
    "contracts/interfaces/IAdapter.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.0;\n\n/**\n * @title IAdapter\n */\ninterface IAdapter {\n    error ConflictingBlockHeader(uint256 blockNumber, bytes32 blockHash, bytes32 storedBlockHash);\n    error InvalidBlockHeaderLength(uint256 length);\n    error InvalidBlockHeaderRLP();\n\n    /**\n     * @dev Emitted when a hash is stored.\n     * @param id - The ID of the stored hash.\n     * @param hash - The stored hash as bytes32 values.\n     */\n    event HashStored(uint256 indexed id, bytes32 indexed hash);\n\n    /**\n     * @dev Returns the hash for a given ID.\n     * @param domain - Identifier for the domain to query.\n     * @param id - Identifier for the ID to query.\n     * @return hash Bytes32 hash for the given ID on the given domain.\n     * @notice MUST return bytes32(0) if the hash is not present.\n     */\n    function getHash(uint256 domain, uint256 id) external view returns (bytes32 hash);\n}\n"
    },
    "contracts/interfaces/IGiriGiriBashi.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport { IAdapter } from \"./IAdapter.sol\";\nimport { IHashi } from \"./IHashi.sol\";\nimport { IShuSho } from \"./IShuSho.sol\";\n\n/**\n * @title IGiriGiriBashi\n */\ninterface IGiriGiriBashi is IShuSho {\n    struct Challenge {\n        address payable challenger; // account that raised the challenge.\n        uint256 timestamp; // timestamp when the challenge was created.\n        uint256 bond; // bond paid by the challenger.\n    }\n\n    struct Settings {\n        bool quarantined; // whether or not the adapter has been quarantined.\n        uint256 minimumBond; // amount that must be bonded alongside a challenge.\n        uint256 startId; // earliest id that the adapter could have stored.\n        uint256 idDepth; // how far behind the current head can this adapter safely report. 0 equals infinite.\n        uint256 timeout; // grace period in which the adapter must report on an in-range id after being challenged.\n    }\n\n    error AdaptersCannotContainChallengedAdapter(IAdapter[] adapters, IAdapter adapter);\n    error AdapterHasNotYetTimedOut(IAdapter adapter);\n    error AdapterNotQuarantined(IAdapter adapter);\n    error AlreadyQuarantined(IAdapter adapter);\n    error CannotProveNoConfidence(uint256 domain, uint256 id, IAdapter[] adapters);\n    error ChallengeNotFound(bytes32 challengeId, uint256 domain, uint256 id, IAdapter adapter);\n    error ChallengeRangeAlreadySet(uint256 domain);\n    error CountMustBeZero(uint256 domain);\n    error DuplicateChallenge(bytes32 challengeId, uint256 domain, uint256 id, IAdapter adapter);\n    error NoConfidenceRequired();\n    error NotEnoughValue(IAdapter adapter, uint256 value);\n    error OutOfRange(IAdapter adapter, uint256 id);\n    error UnequalArrayLengths();\n\n    /**\n     * @dev Emitted when the bond recipient address is set.\n     * @param bondRecipient - The new bond recipient address as an Ethereum address.\n     */\n    event BondRecipientSet(address payable bondRecipient);\n\n    /**\n     * @dev Emitted when a challenge is created.\n     * @param challengeId - The unique identifier for the challenge.\n     * @param domain - The domain associated with the challenge.\n     * @param id - The identifier associated with the challenge.\n     * @param adapter - The adapter address associated with the challenge.\n     * @param challenger - The address of the challenger.\n     * @param timestamp - The timestamp when the challenge was created.\n     * @param bond - The bond amount associated with the challenge.\n     */\n    event ChallengeCreated(\n        bytes32 challengeId,\n        uint256 indexed domain,\n        uint256 id,\n        IAdapter indexed adapter,\n        address indexed challenger,\n        uint256 timestamp,\n        uint256 bond\n    );\n\n    /**\n     * @dev Emitted when the challenge range is updated.\n     * @param domain - The domain associated with the updated challenge range.\n     * @param range - The new challenge range as a Uint256 identifier.\n     */\n    event ChallengeRangeUpdated(uint256 domain, uint256 range);\n\n    /**\n     * @dev Emitted when a challenge is resolved.\n     * @param challengeId - The unique identifier for the resolved challenge.\n     * @param domain - The domain associated with the resolved challenge.\n     * @param id - The identifier associated with the resolved challenge.\n     * @param adapter - The adapter address associated with the resolved challenge.\n     * @param challenger - The address of the challenger.\n     * @param bond - The bond amount associated with the resolved challenge.\n     * @param challengeSuccessful - A boolean indicating whether the challenge was successful.\n     */\n    event ChallengeResolved(\n        bytes32 challengeId,\n        uint256 indexed domain,\n        uint256 id,\n        IAdapter indexed adapter,\n        address indexed challenger,\n        uint256 bond,\n        bool challengeSuccessful\n    );\n\n    /**\n     * @dev Emitted when a new head is updated.\n     * @param domain - The domain associated with the new head.\n     * @param head - The new head as a Uint256 identifier.\n     */\n    event NewHead(uint256 domain, uint256 head);\n\n    /**\n     * @dev Emitted when a declaration of no confidence is made for a specific domain.\n     * @param domain - The domain associated with the declaration.\n     */\n    event NoConfidenceDeclared(uint256 domain);\n\n    /**\n     * @dev Emitted when settings are initialized for a specific domain and adapter.\n     * @param domain - The domain associated with the initialized settings.\n     * @param adapter - The adapter address associated with the initialized settings.\n     * @param settings - The initialized settings object.\n     */\n    event SettingsInitialized(uint256 domain, IAdapter adapter, Settings settings);\n\n    /**\n     * @dev Challenges the adapter to provide a response. If the adapter fails, it can be quarantined.\n     * @param domain - The Uint256 identifier for the domain.\n     * @param id - The Uint256 identifier for the challenge.\n     * @param adapter - The address of the adapter to challenge.\n     * @notice Caller must pay a minimum bond to issue the challenge. This bond should be high enough to cover the gas costs for successfully completing the challenge.\n     */\n    function challengeAdapter(uint256 domain, uint256 id, IAdapter adapter) external payable;\n\n    /**\n     * @dev Show that enough adapters disagree that they could not make a threshold if the remainder all agree with one.\n     * @param domain - The Uint256 identifier for the domain.\n     * @param id - The Uint256 identifier.\n     * @param adapters - An array of adapter instances.\n     */\n    function declareNoConfidence(uint256 domain, uint256 id, IAdapter[] memory adapters) external;\n\n    /**\n     * @dev Disables a set of adapters for a given domain.\n     * @param domain - The Uint256 identifier for the domain.\n     * @param adapters - An array of adapter instances to be disabled.\n     */\n    function disableAdapters(uint256 domain, IAdapter[] memory adapters) external;\n\n    /**\n     * @dev Enables a set of adapters for a given domain with specific settings.\n     * @param domain - The Uint256 identifier for the domain.\n     * @param adapters - An array of adapter instances.\n     * @param settings - An array of settings, corresponding to each adapter.\n     */\n    function enableAdapters(uint256 domain, IAdapter[] memory adapters, Settings[] memory settings) external;\n\n    /**\n     * @dev Get the current challenge given a challengeId.\n     * @param challengeId - The Bytes32 identifier for the challenge.\n     * @return challenge - Challenge indicating the challenge parameters.\n     */\n    function getChallenge(bytes32 challengeId) external view returns (Challenge memory);\n\n    /**\n     * @dev Gets the challenge ID for a given domain, ID, and adapter.\n     * @param domain - The Uint256 identifier for the domain.\n     * @param id - The Uint256 identifier.\n     * @param adapter - The adapter instance.\n     * @return The computed challenge ID as a bytes32 hash.\n     */\n    function getChallengeId(uint256 domain, uint256 id, IAdapter adapter) external pure returns (bytes32);\n\n    /**\n     * @dev Get how far beyond the current highestId can be challenged.\n     * @param domain - The Uint256 identifier for the domain.\n     * @return range - Uint256 indicating the challenge range.\n     */\n    function getChallengeRange(uint256 domain) external view returns (uint256);\n\n    /**\n     * @dev Returns the hash agreed upon by a threshold of the enabled adapters.\n     * @param domain - Uint256 identifier for the domain to query.\n     * @param id - Uint256 identifier to query.\n     * @return hash - Bytes32 hash agreed upon by a threshold of the adapters for the given domain.\n     * @notice Reverts if no threshold is not reached.\n     * @notice Reverts if no adapters are set for the given domain.\n     */\n    function getThresholdHash(uint256 domain, uint256 id) external returns (bytes32);\n\n    /**\n     * @dev Returns the hash unanimously agreed upon by ALL of the enabled adapters.\n     * @param domain - Uint256 identifier for the domain to query.\n     * @param id - Uint256 identifier to query.\n     * @return hash - Bytes32 hash agreed upon by the adapters for the given domain.\n     * @notice Reverts if adapters disagree.\n     * @notice Revert if the adapters do not yet have the hash for the given ID.\n     * @notice Reverts if no adapters are set for the given domain.\n     */\n    function getUnanimousHash(uint256 domain, uint256 id) external returns (bytes32);\n\n    /**\n     * @dev Returns the hash unanimously agreed upon by all of the given adapters.\n     * @param domain - Uint256 identifier for the domain to query.\n     * @param adapters - Array of adapter addresses to query.\n     * @param id - Uint256 identifier to query.\n     * @return hash - Bytes32 hash agreed upon by the adapters for the given domain.\n     * @notice Adapters must be in numerical order from smallest to largest and contain no duplicates.\n     * @notice Reverts if adapters are out of order or contain duplicates.\n     * @notice Reverts if adapters disagree.\n     * @notice Revert if the adapters do not yet have the hash for the given ID.\n     * @notice Reverts if no adapters are set for the given domain.\n     */\n    function getHash(uint256 domain, uint256 id, IAdapter[] memory adapters) external returns (bytes32);\n\n    /**\n     * @dev Returns the highest id reported for a given id\n     * @param domain - Uint256 identifier for the domain to query.\n     * @return id - Uint256 indicating the highest id reported.\n     */\n    function getHead(uint256 domain) external view returns (uint256);\n\n    /**\n     * @dev Get the current settings for a given adapter.\n     * @param domain - Uint256 identifier for the domain to query.\n     * @param adapter - The adapter.\n     * @return settings - The Settings for the given adapter.\n     */\n    function getSettings(uint256 domain, IAdapter adapter) external view returns (Settings memory);\n\n    /**\n     * @dev Replaces the quarantined adapters for a given domain with new adapters and settings.\n     * @param domain - The Uint256 identifier for the domain.\n     * @param currentAdapters - An array of current adapter instances to be replaced.\n     * @param newAdapters - An array of new adapter instances to replace the current ones.\n     * @param settings - An array of settings corresponding to the new adapters.\n     */\n    function replaceQuarantinedAdapters(\n        uint256 domain,\n        IAdapter[] memory currentAdapters,\n        IAdapter[] memory newAdapters,\n        Settings[] memory settings\n    ) external;\n\n    /**\n     * @dev Resolves a challenge by comparing results from a specific adapter with others.\n     * @param domain - The Uint256 identifier for the domain.\n     * @param id - The Uint256 identifier.\n     * @param adapter - The adapter instance for comparison.\n     * @param adapters - An array of adapter instances for comparison.\n     * @return A boolean indicating the success of the challenge resolution.\n     */\n    function resolveChallenge(\n        uint256 domain,\n        uint256 id,\n        IAdapter adapter,\n        IAdapter[] memory adapters\n    ) external returns (bool);\n\n    /**\n     * @dev Sets the bond recipient address for payments.\n     * @param bondRecipient - The address where bond payments should be sent.\n     */\n    function setBondRecipient(address payable bondRecipient) external;\n\n    /**\n     * @dev Sets the challenge range for a specific domain.\n     * @param domain - The Uint256 identifier for the domain.\n     * @param range - The Uint256 range to set for the given domain.\n     */\n    function setChallengeRange(uint256 domain, uint256 range) external;\n\n    /**\n     * @dev Sets the threshold for a specific domain.\n     * @param domain - The Uint256 identifier for the domain.\n     * @param threshold - The Uint256 threshold to set for the given domain.\n     */\n    function setThreshold(uint256 domain, uint256 threshold) external;\n}\n"
    },
    "contracts/interfaces/IHashi.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport { IAdapter } from \"./IAdapter.sol\";\n\n/**\n * @title IHashi\n */\ninterface IHashi {\n    error AdaptersDisagree(IAdapter adapterOne, IAdapter adapterTwo);\n    error HashNotAvailableInAdapter(IAdapter adapter);\n    error InvalidThreshold(uint256 threshold, uint256 maxThreshold);\n    error NoAdaptersGiven();\n\n    /**\n     * @dev Checks whether the threshold is reached for a message given a set of adapters.\n     * @param domain - ID of the domain to query.\n     * @param id - ID for which to return hash.\n     * @param threshold - Threshold to use.\n     * @param adapters - Array of addresses for the adapters to query.\n     * @notice If the threshold is 1, it will always return true.\n     * @return result A boolean indicating if a threshold for a given message has been reached.\n     */\n    function checkHashWithThresholdFromAdapters(\n        uint256 domain,\n        uint256 id,\n        uint256 threshold,\n        IAdapter[] calldata adapters\n    ) external view returns (bool);\n\n    /**\n     * @dev Returns the hash stored by a given adapter for a given ID.\n     * @param domain - ID of the domain to query.\n     * @param id - ID for which to return a hash.\n     * @param adapter - Address of the adapter to query.\n     * @return hash stored by the given adapter for the given ID.\n     */\n    function getHashFromAdapter(uint256 domain, uint256 id, IAdapter adapter) external view returns (bytes32);\n\n    /**\n     * @dev Returns the hashes for a given ID stored by a given set of adapters.\n     * @param domain - The ID of the domain to query.\n     * @param id - The ID for which to return hashes.\n     * @param adapters - An array of addresses for the adapters to query.\n     * @return hashes An array of hashes stored by the given adapters for the specified ID.\n     */\n    function getHashesFromAdapters(\n        uint256 domain,\n        uint256 id,\n        IAdapter[] calldata adapters\n    ) external view returns (bytes32[] memory);\n\n    /**\n     * @dev Returns the hash unanimously agreed upon by a given set of adapters.\n     * @param domain - The ID of the domain to query.\n     * @param id - The ID for which to return a hash.\n     * @param adapters - An array of addresses for the adapters to query.\n     * @return hash agreed on by the given set of adapters.\n     * @notice MUST revert if adapters disagree on the hash or if an adapter does not report.\n     */\n    function getHash(uint256 domain, uint256 id, IAdapter[] calldata adapters) external view returns (bytes32);\n}\n"
    },
    "contracts/interfaces/IMessage.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport { IReporter } from \"./IReporter.sol\";\nimport { IAdapter } from \"./IAdapter.sol\";\n\nstruct Message {\n    uint256 nonce;\n    uint256 targetChainId;\n    uint256 threshold;\n    address sender;\n    address receiver;\n    bytes data;\n    IReporter[] reporters;\n    IAdapter[] adapters;\n}\n"
    },
    "contracts/interfaces/IMessageHashCalculator.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport { Message } from \"./IMessage.sol\";\n\n/**\n * @title IMessageHashCalculator\n */\ninterface IMessageHashCalculator {\n    /**\n     * @dev Calculates and returns the hash of a given message.\n     * @param message - The `Message` structure containing various fields to be hashed.\n     * @return hash The keccak256 hash of the message, represented as a 32-byte hexadecimal string.\n     */\n    function calculateMessageHash(Message memory message) external pure returns (bytes32);\n}\n"
    },
    "contracts/interfaces/IMessageIdCalculator.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.0;\n\n/**\n * @title IMessageIdCalculator\n */\ninterface IMessageIdCalculator {\n    /**\n     * @dev Calculates and returns a unique identifier (ID) for a message.\n     *\n     * @param sourceChainId - The ID of the chain from which the message originates.\n     * @param dispatcherAddress - The address of the dispatcher sending the message.\n     * @param messageHash - The keccak256 hash of the message, represented as a 32-byte hexadecimal string.\n     * @return messageId The unique identifier for the message, calculated based on the input parameters.\n     */\n    function calculateMessageId(\n        uint256 sourceChainId,\n        address dispatcherAddress,\n        bytes32 messageHash\n    ) external pure returns (uint256);\n}\n"
    },
    "contracts/interfaces/IReporter.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport { IAdapter } from \"./IAdapter.sol\";\n\ninterface IReporter {\n    error NotYaho(address sender, address expectedYaho);\n\n    /**\n     * @dev Emitted when a block is dispatched to another chain.\n     * @param targetChainId - The target chain's identifier associated with the dispatched block.\n     * @param adapter - The adapter address associated with the dispatched block.\n     * @param blockNumber - The block number associated with the dispatched block.\n     * @param blockHeader - The dispatched block header as a bytes32 value.\n     */\n    event BlockDispatched(\n        uint256 indexed targetChainId,\n        IAdapter adapter,\n        uint256 indexed blockNumber,\n        bytes32 blockHeader\n    );\n\n    /**\n     * @dev Emitted when a message is dispatched to another chain.\n     * @param targetChainId - The target chain's identifier associated with the dispatched message.\n     * @param adapter - The adapter address associated with the dispatched message.\n     * @param messageId - The message identifier associated with the dispatched message.\n     * @param messageHash - The dispatched message hash as a bytes32 value.\n     */\n    event MessageDispatched(\n        uint256 indexed targetChainId,\n        IAdapter adapter,\n        uint256 indexed messageId,\n        bytes32 messageHash\n    );\n\n    /**\n     * @dev Dispatches blocks to a given adapter on the target chaib.\n     * @param targetChainId - The target chain's Uint256 identifier.\n     * @param adapter - The adapter instance to use.\n     * @param blockNumbers - An array of Uint256 block numbers to dispatch.\n     * @notice blockNumbers must include block numbers that are greater than or equal to (currentBlock - 256) due to EVM limitations.\n     * @return result - The result returned by the adapter as bytes.\n     */\n    function dispatchBlocks(\n        uint256 targetChainId,\n        IAdapter adapter,\n        uint256[] memory blockNumbers\n    ) external payable returns (bytes32);\n\n    /**\n     * @dev Dispatches messages to a target chain using the specified adapter.\n     * @param targetChainId - The target chain's Uint256 identifier.\n     * @param adapter - The adapter instance to use.\n     * @param messageIds - An array of Uint256 message identifiers.\n     * @param messageHashes - An array of bytes32 message hashes.\n     * @notice This function can be called only by Yaho\n     * @return result - The result returned by the adapter as bytes.\n     */\n    function dispatchMessages(\n        uint256 targetChainId,\n        IAdapter adapter,\n        uint256[] memory messageIds,\n        bytes32[] memory messageHashes\n    ) external payable returns (bytes32);\n}\n"
    },
    "contracts/interfaces/IShuSho.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport { IHashi } from \"./IHashi.sol\";\nimport { IAdapter } from \"./IAdapter.sol\";\n\n/**\n * @title IShuSho\n */\ninterface IShuSho {\n    struct Domain {\n        uint256 threshold;\n        uint256 count;\n    }\n\n    struct Link {\n        IAdapter previous;\n        IAdapter next;\n    }\n\n    error AdapterNotEnabled(IAdapter adapter);\n    error AdapterAlreadyEnabled(IAdapter adapter);\n    error CountCannotBeZero();\n    error DuplicateHashiAddress(IHashi hashi);\n    error DuplicateOrOutOfOrderAdapters(IAdapter adapterOne, IAdapter adapterTwo);\n    error DuplicateThreashold(uint256 threshold);\n    error InvalidAdapter(IAdapter adapter);\n    error InvalidThreshold(uint256 threshold);\n    error NoAdaptersEnabled(uint256 domain);\n    error NoAdaptersGiven();\n    error ThresholdNotMet();\n\n    /**\n     * @dev Emitted when adapters are disabled for a specific domain.\n     * @param domain - The domain associated with the disabled adapters.\n     * @param adapters - An array of disabled adapter addresses associated with this event.\n     */\n    event AdaptersDisabled(uint256 indexed domain, IAdapter[] adapters);\n\n    /**\n     * @dev Emitted when adapters are enabled for a specific domain.\n     * @param domain - The domain associated with the enabled adapters.\n     * @param adapters - An array of enabled adapter addresses associated with this event.\n     */\n    event AdaptersEnabled(uint256 indexed domain, IAdapter[] adapters);\n\n    /**\n     * @dev Emitted when the address of the IHashi contract is set.\n     * @param hashi - The address of the IHashi contract associated with this event.\n     */\n    event HashiSet(IHashi indexed hashi);\n\n    /**\n     * @dev Emitted when initialization occurs with the owner's address and the IHashi contract address.\n     * @param owner - The address of the owner associated with this event.\n     * @param hashi - The address of the IHashi contract associated with this event.\n     */\n    event Init(address indexed owner, IHashi indexed hashi);\n\n    /**\n     * @dev Emitted when the threshold is set for a specific domain.\n     * @param domain - The domain associated with the set threshold.\n     * @param threshold - The new threshold value associated with this event.\n     */\n    event ThresholdSet(uint256 domain, uint256 threshold);\n\n    /**\n     * @dev Checks the order and validity of adapters for a given domain.\n     * @param domain - The Uint256 identifier for the domain.\n     * @param _adapters - An array of adapter instances.\n     */\n    function checkAdapterOrderAndValidity(uint256 domain, IAdapter[] memory _adapters) external view;\n\n    /**\n     * @dev Get the previous and the next adapter given a domain and an adapter.\n     * @param domain - Uint256 identifier for the domain.\n     * @param adapter - IAdapter value for the adapter.\n     * @return link - The Link struct containing the previous and the next adapter.\n     */\n    function getAdapterLink(uint256 domain, IAdapter adapter) external view returns (Link memory);\n\n    /**\n     * @dev Returns an array of enabled adapters for a given domain.\n     * @param domain - Uint256 identifier for the domain for which to list adapters.\n     * @return adapters - The adapters for a given domain.\n     */\n    function getAdapters(uint256 domain) external view returns (IAdapter[] memory);\n\n    /**\n     * @dev Get the current configuration for a given domain.\n     * @param domain - Uint256 identifier for the domain.\n     * @return domain - The Domain struct containing the current configuration for a given domain.\n     */\n    function getDomain(uint256 domain) external view returns (Domain memory);\n\n    /**\n     * @dev Returns the threshold and count for a given domain.\n     * @param domain - Uint256 identifier for the domain.\n     * @return threshold - Uint256 adapters threshold for the given domain.\n     * @return count - Uint256 adapters count for the given domain.\n     * @notice If the threshold for a domain has not been set, or is explicitly set to 0, this function will return a threshold equal to the adapters count for the given domain.\n     */\n    function getThresholdAndCount(uint256 domain) external view returns (uint256, uint256);\n\n    /**\n     * @dev Returns the address of the specified Hashi.\n     * @return hashi - The Hashi address.\n     */\n    function hashi() external view returns (IHashi);\n}\n"
    },
    "contracts/interfaces/IYaho.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport { IMessageHashCalculator } from \"./IMessageHashCalculator.sol\";\nimport { IMessageIdCalculator } from \"./IMessageIdCalculator.sol\";\nimport { Message } from \"./IMessage.sol\";\nimport { IReporter } from \"./IReporter.sol\";\nimport { IAdapter } from \"./IAdapter.sol\";\n\n/**\n * @title IYaho\n */\ninterface IYaho is IMessageHashCalculator, IMessageIdCalculator {\n    error NoMessagesGiven();\n    error NoMessageIdsGiven();\n    error NoReportersGiven();\n    error NoAdaptersGiven();\n    error UnequalArrayLengths(uint256 arrayOne, uint256 arrayTwo);\n    error MessageHashNotFound(uint256 messageId);\n    error InvalidMessage(Message message);\n    error InvalidThreshold(uint256 threshold, uint256 maxThreshold);\n\n    /**\n     * @dev Emitted when a message is dispatched with its associated message ID and message struct.\n     * @param messageId - The message ID associated with the dispatched message.\n     * @param message - The message struct associated with this event.\n     */\n    event MessageDispatched(uint256 indexed messageId, Message message);\n\n    /**\n     * @dev Dispatches a message to a specified chain with a set of validation parameters without calling the reporters. It just write in storage a commitment of message. In order to dispatch it to the reporters, you must then invoke `relayMessagesToAdapters`\n     * @param targetChainId - The ID of the target chain to which the message is being sent.\n     * @param threshold - The minimum number of adapters required to have stored the same message.\n     * @param receiver - The address of the receiver on the target chain.\n     * @param data - The data being sent in the message, represented as a byte array.\n     * @param reporters - An array of `IReporter` contracts (not actively used in this step).\n     * @param adapters - An array of `IAdapter` contracts (for later validation use).\n     * @return messageId A unique identifier for the dispatched message, used for tracking and subsequent validation.\n     */\n    function dispatchMessage(\n        uint256 targetChainId,\n        uint256 threshold,\n        address receiver,\n        bytes calldata data,\n        IReporter[] calldata reporters,\n        IAdapter[] calldata adapters\n    ) external returns (uint256);\n\n    /**\n     * @dev Dispatches a message to a specified chain with a set of validation parameters and calls the reporters.\n     * @param targetChainId - The ID of the target chain to which the message is being sent.\n     * @param threshold - The minimum number of adapters required to have stored the same message.\n     * @param receiver - The address of the receiver on the target chain.\n     * @param data - The data being sent in the message, represented as a byte array.\n     * @param reporters - An array of `IReporter` contracts (not actively used in this step).\n     * @param adapters - An array of `IAdapter` contracts (for later validation use).\n     * @return (messageId, result) A unique identifier for the dispatched message and an array of byte arrays, where each element is the result of dispatching a respective message to the corresponding Reporter.\n     */\n    function dispatchMessageToAdapters(\n        uint256 targetChainId,\n        uint256 threshold,\n        address receiver,\n        bytes calldata data,\n        IReporter[] calldata reporters,\n        IAdapter[] calldata adapters\n    ) external payable returns (uint256, bytes32[] memory);\n\n    /**\n     * @dev Dispatches an array of messages to specified chains and calls the reporters.\n     * @param targetChainId - The ID of the target chain for all messages.\n     * @param thresholds - An array of minimum validation thresholds required for each message.\n     * @param receivers - An array of addresses for the receivers on the target chain, one for each message.\n     * @param data - An array of data payloads for each message, represented as byte arrays.\n     * @param reporters - An array of `IReporter` contracts for reporting the status of each message.\n     * @param adapters - An array of `IAdapter` contracts used for the validation of each message.\n     * @return (messageIds, result) An array of unique identifiers for the dispatched messages and an array of bytes32 arrays, where each element is the result of dispatching a respective message to the corresponding Reporter.\n     */\n    function dispatchMessagesToAdapters(\n        uint256 targetChainId,\n        uint256[] calldata thresholds,\n        address[] calldata receivers,\n        bytes[] calldata data,\n        IReporter[] calldata reporters,\n        IAdapter[] calldata adapters\n    ) external payable returns (uint256[] memory, bytes32[] memory);\n\n    /**\n     * @dev Retrieves the hash of a pending message that was dispatched via `dispatchMessage` but has not yet been relayed to adapters using `relayingMessagesToAdapters`.\n     * @param messageId - The unique identifier of the message for which the hash is being retrieved.\n     * @return messageHash The hash of the pending message if it exists.\n     */\n    function getPendingMessageHash(uint256 messageId) external view returns (bytes32);\n\n    /**\n     * @dev Relays an array of messages to their respective adapters. In order to be able to aggregate messages within the reporter, it's mandatory that all messages have the same targetChainId, reporters and adapters.\n     * @param messages - An array of `Message` structures to be relayed to the adapters.\n     * @return result An array of bytes32 arrays, where each element is the result of dispatching a respective all messages to the corresponding Reporter.\n     */\n    function relayMessagesToAdapters(Message[] calldata messages) external payable returns (bytes32[] memory);\n}\n"
    },
    "contracts/MerklePatriciaProofVerifier.sol": {
      "content": "pragma solidity ^0.8.20;\n/* solhint-disable */\n\nimport { RLPReader } from \"solidity-rlp/contracts/RLPReader.sol\";\n\nlibrary MerklePatriciaProofVerifier {\n    using RLPReader for RLPReader.RLPItem;\n    using RLPReader for bytes;\n\n    /// @dev Validates a Merkle-Patricia-Trie proof.\n    ///      If the proof proves the inclusion of some key-value pair in the\n    ///      trie, the value is returned. Otherwise, i.e. if the proof proves\n    ///      the exclusion of a key from the trie, an empty byte array is\n    ///      returned.\n    /// @param rootHash is the Keccak-256 hash of the root node of the MPT.\n    /// @param path is the key of the node whose inclusion/exclusion we are\n    ///        proving.\n    /// @param stack is the stack of MPT nodes (starting with the root) that\n    ///        need to be traversed during verification.\n    /// @return value whose inclusion is proved or an empty byte array for\n    ///         a proof of exclusion\n    function extractProofValue(\n        bytes32 rootHash,\n        bytes memory path,\n        RLPReader.RLPItem[] memory stack\n    ) internal pure returns (bytes memory value) {\n        bytes memory mptKey = _decodeNibbles(path, 0);\n        uint256 mptKeyOffset = 0;\n\n        bytes32 nodeHashHash;\n        RLPReader.RLPItem[] memory node;\n\n        RLPReader.RLPItem memory rlpValue;\n\n        if (stack.length == 0) {\n            // Root hash of empty Merkle-Patricia-Trie\n            require(rootHash == 0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421);\n            return new bytes(0);\n        }\n\n        // Traverse stack of nodes starting at root.\n        for (uint256 i = 0; i < stack.length; i++) {\n            // We use the fact that an rlp encoded list consists of some\n            // encoding of its length plus the concatenation of its\n            // *rlp-encoded* items.\n\n            // The root node is hashed with Keccak-256 ...\n            if (i == 0 && rootHash != stack[i].rlpBytesKeccak256()) {\n                revert();\n            }\n            // ... whereas all other nodes are hashed with the MPT\n            // hash function.\n            if (i != 0 && nodeHashHash != _mptHashHash(stack[i])) {\n                revert();\n            }\n            // We verified that stack[i] has the correct hash, so we\n            // may safely decode it.\n            node = stack[i].toList();\n\n            if (node.length == 2) {\n                // Extension or Leaf node\n\n                bool isLeaf;\n                bytes memory nodeKey;\n                (isLeaf, nodeKey) = _merklePatriciaCompactDecode(node[0].toBytes());\n\n                uint256 prefixLength = _sharedPrefixLength(mptKeyOffset, mptKey, nodeKey);\n                mptKeyOffset += prefixLength;\n\n                if (prefixLength < nodeKey.length) {\n                    // Proof claims divergent extension or leaf. (Only\n                    // relevant for proofs of exclusion.)\n                    // An Extension/Leaf node is divergent iff it 'skips' over\n                    // the point at which a Branch node should have been had the\n                    // excluded key been included in the trie.\n                    // Example: Imagine a proof of exclusion for path [1, 4],\n                    // where the current node is a Leaf node with\n                    // path [1, 3, 3, 7]. For [1, 4] to be included, there\n                    // should have been a Branch node at [1] with a child\n                    // at 3 and a child at 4.\n\n                    // Sanity check\n                    if (i < stack.length - 1) {\n                        // divergent node must come last in proof\n                        revert();\n                    }\n\n                    return new bytes(0);\n                }\n\n                if (isLeaf) {\n                    // Sanity check\n                    if (i < stack.length - 1) {\n                        // leaf node must come last in proof\n                        revert();\n                    }\n\n                    if (mptKeyOffset < mptKey.length) {\n                        return new bytes(0);\n                    }\n\n                    rlpValue = node[1];\n                    return rlpValue.toBytes();\n                } else {\n                    // extension\n                    // Sanity check\n                    if (i == stack.length - 1) {\n                        // shouldn't be at last level\n                        revert();\n                    }\n\n                    if (!node[1].isList()) {\n                        // rlp(child) was at least 32 bytes. node[1] contains\n                        // Keccak256(rlp(child)).\n                        nodeHashHash = node[1].payloadKeccak256();\n                    } else {\n                        // rlp(child) was less than 32 bytes. node[1] contains\n                        // rlp(child).\n                        nodeHashHash = node[1].rlpBytesKeccak256();\n                    }\n                }\n            } else if (node.length == 17) {\n                // Branch node\n\n                if (mptKeyOffset != mptKey.length) {\n                    // we haven't consumed the entire path, so we need to look at a child\n                    uint8 nibble = uint8(mptKey[mptKeyOffset]);\n                    mptKeyOffset += 1;\n                    if (nibble >= 16) {\n                        // each element of the path has to be a nibble\n                        revert();\n                    }\n\n                    if (_isEmptyBytesequence(node[nibble])) {\n                        // Sanity\n                        if (i != stack.length - 1) {\n                            // leaf node should be at last level\n                            revert();\n                        }\n\n                        return new bytes(0);\n                    } else if (!node[nibble].isList()) {\n                        nodeHashHash = node[nibble].payloadKeccak256();\n                    } else {\n                        nodeHashHash = node[nibble].rlpBytesKeccak256();\n                    }\n                } else {\n                    // we have consumed the entire mptKey, so we need to look at what's contained in this node.\n\n                    // Sanity\n                    if (i != stack.length - 1) {\n                        // should be at last level\n                        revert();\n                    }\n\n                    return node[16].toBytes();\n                }\n            }\n        }\n    }\n\n    /// @dev Computes the hash of the Merkle-Patricia-Trie hash of the RLP item.\n    ///      Merkle-Patricia-Tries use a weird 'hash function' that outputs\n    ///      *variable-length* hashes: If the item is shorter than 32 bytes,\n    ///      the MPT hash is the item. Otherwise, the MPT hash is the\n    ///      Keccak-256 hash of the item.\n    ///      The easiest way to compare variable-length byte sequences is\n    ///      to compare their Keccak-256 hashes.\n    /// @param item The RLP item to be hashed.\n    /// @return Keccak-256(MPT-hash(item))\n    function _mptHashHash(RLPReader.RLPItem memory item) private pure returns (bytes32) {\n        if (item.len < 32) {\n            return item.rlpBytesKeccak256();\n        } else {\n            return keccak256(abi.encodePacked(item.rlpBytesKeccak256()));\n        }\n    }\n\n    function _isEmptyBytesequence(RLPReader.RLPItem memory item) private pure returns (bool) {\n        if (item.len != 1) {\n            return false;\n        }\n        uint8 b;\n        uint256 memPtr = item.memPtr;\n        assembly {\n            b := byte(0, mload(memPtr))\n        }\n        return b == 0x80; /* empty byte string */\n    }\n\n    function _merklePatriciaCompactDecode(\n        bytes memory compact\n    ) private pure returns (bool isLeaf, bytes memory nibbles) {\n        require(compact.length > 0);\n        uint256 first_nibble = (uint8(compact[0]) >> 4) & 0xF;\n        uint256 skipNibbles;\n        if (first_nibble == 0) {\n            skipNibbles = 2;\n            isLeaf = false;\n        } else if (first_nibble == 1) {\n            skipNibbles = 1;\n            isLeaf = false;\n        } else if (first_nibble == 2) {\n            skipNibbles = 2;\n            isLeaf = true;\n        } else if (first_nibble == 3) {\n            skipNibbles = 1;\n            isLeaf = true;\n        } else {\n            // Not supposed to happen!\n            revert();\n        }\n        return (isLeaf, _decodeNibbles(compact, skipNibbles));\n    }\n\n    function _decodeNibbles(bytes memory compact, uint256 skipNibbles) private pure returns (bytes memory nibbles) {\n        require(compact.length > 0);\n\n        uint256 length = compact.length * 2;\n        require(skipNibbles <= length);\n        length -= skipNibbles;\n\n        nibbles = new bytes(length);\n        uint256 nibblesLength = 0;\n\n        for (uint256 i = skipNibbles; i < skipNibbles + length; i += 1) {\n            if (i % 2 == 0) {\n                nibbles[nibblesLength] = bytes1((uint8(compact[i / 2]) >> 4) & 0xF);\n            } else {\n                nibbles[nibblesLength] = bytes1((uint8(compact[i / 2]) >> 0) & 0xF);\n            }\n            nibblesLength += 1;\n        }\n\n        assert(nibblesLength == nibbles.length);\n    }\n\n    function _sharedPrefixLength(uint256 xsOffset, bytes memory xs, bytes memory ys) private pure returns (uint256) {\n        uint256 i;\n        for (i = 0; i + xsOffset < xs.length && i < ys.length; i++) {\n            if (xs[i + xsOffset] != ys[i]) {\n                return i;\n            }\n        }\n        return i;\n    }\n}\n"
    },
    "contracts/ownable/GiriGiriBashi.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.20;\n\nimport { ShuSo } from \"./ShuSo.sol\";\nimport { IAdapter } from \"../interfaces/IAdapter.sol\";\nimport { IHashi } from \"../interfaces/IHashi.sol\";\nimport { IGiriGiriBashi } from \"../interfaces/IGiriGiriBashi.sol\";\n\ncontract GiriGiriBashi is IGiriGiriBashi, ShuSo {\n    address payable public bondRecipient;\n\n    mapping(uint256 => uint256) private _heads;\n    mapping(uint256 => uint256) private _challengeRanges;\n    mapping(uint256 => mapping(IAdapter => Settings)) private _settings;\n    mapping(bytes32 => Challenge) private _challenges;\n\n    constructor(address _owner, address _hashi, address payable _bondRecipient) ShuSo(_owner, _hashi) {\n        bondRecipient = _bondRecipient;\n    }\n\n    modifier noConfidence(uint256 domain) {\n        if (getDomain(domain).threshold != type(uint256).max) revert NoConfidenceRequired();\n        _;\n    }\n\n    modifier zeroCount(uint256 domain) {\n        Domain memory domainConfigs = getDomain(domain);\n        if (domainConfigs.count != 0 && domainConfigs.threshold > 0) revert CountMustBeZero(domain);\n        _;\n    }\n\n    /// @inheritdoc IGiriGiriBashi\n    function challengeAdapter(uint256 domain, uint256 id, IAdapter adapter) public payable {\n        if (getAdapterLink(domain, adapter).previous == IAdapter(address(0))) revert AdapterNotEnabled(adapter);\n        if (msg.value < _settings[domain][adapter].minimumBond) revert NotEnoughValue(adapter, msg.value);\n        if (_settings[domain][adapter].quarantined) revert AlreadyQuarantined(adapter);\n\n        bytes32 challengeId = getChallengeId(domain, id, adapter);\n        if (_challenges[challengeId].challenger != address(0))\n            revert DuplicateChallenge(challengeId, domain, id, adapter);\n\n        // check if id is lower than startId, revert if true.\n        // check if id is less than highestId + challengeRange, revert if false\n        // check if id is lower than highestId - idDepth, revert if true\n        uint256 challengeRange = _challengeRanges[domain];\n        uint256 idDepth = _settings[domain][adapter].idDepth;\n        uint256 head = _heads[domain];\n        if (\n            id < _settings[domain][adapter].startId || // before start id\n            (challengeRange != 0 && id >= head && id - head > challengeRange) || // over domain challenge range\n            (idDepth != 0 && head > idDepth && id <= head - idDepth) // outside of adapter idDepth\n        ) revert OutOfRange(adapter, id);\n\n        Challenge storage challenge = _challenges[challengeId];\n        challenge.challenger = payable(msg.sender);\n        challenge.timestamp = block.timestamp;\n        challenge.bond = msg.value;\n\n        emit ChallengeCreated(challengeId, domain, id, adapter, msg.sender, block.timestamp, msg.value);\n    }\n\n    /// @inheritdoc IGiriGiriBashi\n    function enableAdapters(\n        uint256 domain,\n        IAdapter[] memory adapters,\n        Settings[] memory settings\n    ) public zeroCount(domain) {\n        _enableAdapters(domain, adapters);\n        initSettings(domain, adapters, settings);\n    }\n\n    /// @inheritdoc IGiriGiriBashi\n    function declareNoConfidence(uint256 domain, uint256 id, IAdapter[] memory adapters) public {\n        checkAdapterOrderAndValidity(domain, adapters);\n        (uint256 threshold, uint256 count) = getThresholdAndCount(domain);\n\n        if (adapters.length != count) revert CannotProveNoConfidence(domain, id, adapters);\n\n        bytes32[] memory hashes = new bytes32[](adapters.length);\n        uint256 zeroHashes = 0;\n        for (uint256 i = 0; i < adapters.length; i++) {\n            hashes[i] = adapters[i].getHash(domain, id);\n            if (hashes[i] == bytes32(0)) zeroHashes++;\n            if (zeroHashes == threshold) revert CannotProveNoConfidence(domain, id, adapters);\n        }\n\n        for (uint256 i = 0; i < hashes.length; i++) {\n            uint256 equalHashes = 1;\n            for (uint256 j = 0; j < hashes.length; j++) {\n                if (hashes[i] == hashes[j] && i != j) {\n                    equalHashes++;\n                }\n            }\n\n            if (equalHashes + zeroHashes >= threshold) revert CannotProveNoConfidence(domain, id, adapters);\n        }\n\n        _setDomainThreshold(domain, type(uint256).max);\n        delete _challengeRanges[domain];\n\n        emit NoConfidenceDeclared(domain);\n    }\n\n    /// @inheritdoc IGiriGiriBashi\n    function disableAdapters(uint256 domain, IAdapter[] memory adapters) public noConfidence(domain) {\n        _disableAdapters(domain, adapters);\n        if (getDomain(domain).count == 0) _setDomainThreshold(domain, 0);\n    }\n\n    /// @inheritdoc IGiriGiriBashi\n    function getSettings(uint256 domain, IAdapter adapter) external view returns (Settings memory) {\n        return _settings[domain][adapter];\n    }\n\n    /// @inheritdoc IGiriGiriBashi\n    function getChallenge(bytes32 challengeId) external view returns (Challenge memory) {\n        return _challenges[challengeId];\n    }\n\n    /// @inheritdoc IGiriGiriBashi\n    function getChallengeId(uint256 domain, uint256 id, IAdapter adapter) public pure returns (bytes32 challengeId) {\n        challengeId = keccak256(abi.encodePacked(domain, id, adapter));\n    }\n\n    /// @inheritdoc IGiriGiriBashi\n    function getChallengeRange(uint256 domain) external view returns (uint256) {\n        return _challengeRanges[domain];\n    }\n\n    /// @inheritdoc IGiriGiriBashi\n    function getHead(uint256 domain) external view returns (uint256) {\n        return _heads[domain];\n    }\n\n    /// @inheritdoc IGiriGiriBashi\n    function getThresholdHash(uint256 domain, uint256 id) public returns (bytes32 hash) {\n        hash = _getThresholdHash(domain, id);\n        updateHead(domain, id);\n    }\n\n    /// @inheritdoc IGiriGiriBashi\n    function getUnanimousHash(uint256 domain, uint256 id) public returns (bytes32 hash) {\n        hash = _getUnanimousHash(domain, id);\n        updateHead(domain, id);\n    }\n\n    /// @inheritdoc IGiriGiriBashi\n    function getHash(uint256 domain, uint256 id, IAdapter[] memory adapters) public returns (bytes32 hash) {\n        hash = _getHash(domain, id, adapters);\n        updateHead(domain, id);\n    }\n\n    /// @inheritdoc IGiriGiriBashi\n    function replaceQuarantinedAdapters(\n        uint256 domain,\n        IAdapter[] memory currentAdapters,\n        IAdapter[] memory newAdapters,\n        Settings[] memory settings\n    ) public onlyOwner {\n        if (currentAdapters.length != newAdapters.length || currentAdapters.length != settings.length)\n            revert UnequalArrayLengths();\n        for (uint256 i = 0; i < currentAdapters.length; i++) {\n            if (!_settings[domain][currentAdapters[i]].quarantined) revert AdapterNotQuarantined(currentAdapters[i]);\n        }\n        _disableAdapters(domain, currentAdapters);\n        _enableAdapters(domain, newAdapters);\n        initSettings(domain, newAdapters, settings);\n    }\n\n    /// @inheritdoc IGiriGiriBashi\n    function resolveChallenge(\n        uint256 domain,\n        uint256 id,\n        IAdapter adapter,\n        IAdapter[] memory adapters\n    ) public returns (bool success) {\n        // check if challenge exists, revert if false\n        bytes32 challengeId = getChallengeId(domain, id, adapter);\n        if (_challenges[challengeId].challenger == address(0))\n            revert ChallengeNotFound(challengeId, domain, id, adapter);\n\n        for (uint256 i = 0; i < adapters.length; ) {\n            if (adapters[i] == adapter) revert AdaptersCannotContainChallengedAdapter(adapters, adapter);\n            unchecked {\n                ++i;\n            }\n        }\n\n        Challenge storage challenge = _challenges[challengeId];\n        Settings storage adapterSettings = _settings[domain][adapter];\n        bytes32 storedHash = adapter.getHash(domain, id);\n\n        if (storedHash == bytes32(0)) {\n            if (block.timestamp < challenge.timestamp + adapterSettings.timeout)\n                revert AdapterHasNotYetTimedOut(adapter);\n            adapterSettings.quarantined = true;\n            challenge.challenger.transfer(challenge.bond);\n            success = true;\n        } else {\n            // if adapters + 1 equals threshold && adapters + adapter report the same header\n            if (adapters.length == getDomain(domain).threshold - 1) {\n                checkAdapterOrderAndValidity(domain, adapters);\n                bytes32 canonicalHash = hashi.getHash(domain, id, adapters);\n                if (canonicalHash == storedHash) {\n                    bondRecipient.transfer(challenge.bond);\n                    success = false;\n                } else {\n                    revert IHashi.AdaptersDisagree(adapter, adapters[0]);\n                }\n            } else {\n                // check if adapters report the same header as adapter\n                bytes32 canonicalHash = getHash(domain, id, adapters);\n                if (canonicalHash == storedHash) {\n                    bondRecipient.transfer(challenge.bond);\n                    success = false;\n                } else {\n                    adapterSettings.quarantined = true;\n                    challenge.challenger.transfer(challenge.bond);\n                    success = true;\n                }\n            }\n        }\n        emit ChallengeResolved(challengeId, domain, id, adapter, challenge.challenger, challenge.bond, success);\n\n        delete challenge.challenger;\n        delete challenge.timestamp;\n        delete challenge.bond;\n    }\n\n    /// @inheritdoc IGiriGiriBashi\n    function setBondRecipient(address payable _bondRecipient) public onlyOwner {\n        bondRecipient = _bondRecipient;\n        emit BondRecipientSet(_bondRecipient);\n    }\n\n    /// @inheritdoc IGiriGiriBashi\n    function setChallengeRange(uint256 domain, uint256 range) public onlyOwner {\n        if (_challengeRanges[domain] != 0) revert ChallengeRangeAlreadySet(domain);\n        _challengeRanges[domain] = range;\n        emit ChallengeRangeUpdated(domain, range);\n    }\n\n    function setHashi(IHashi _hashi) public override onlyInitializing {\n        _setHashi(_hashi);\n    }\n\n    /// @inheritdoc IGiriGiriBashi\n    function setThreshold(uint256 domain, uint256 threshold) public zeroCount(domain) {\n        _setThreshold(domain, threshold);\n    }\n\n    function initSettings(uint256 domain, IAdapter[] memory _adapters, Settings[] memory adapters) private {\n        if (_adapters.length != adapters.length) revert UnequalArrayLengths();\n        for (uint256 i = 0; i < _adapters.length; i++) {\n            IAdapter adapter = _adapters[i];\n            _settings[domain][adapter].quarantined = false;\n            _settings[domain][adapter].minimumBond = adapters[i].minimumBond;\n            _settings[domain][adapter].startId = adapters[i].startId;\n            _settings[domain][adapter].idDepth = adapters[i].idDepth;\n            _settings[domain][adapter].timeout = adapters[i].timeout;\n            emit SettingsInitialized(domain, adapter, adapters[i]);\n        }\n    }\n\n    function updateHead(uint256 domain, uint256 id) private {\n        if (id > _heads[domain]) _heads[domain] = id;\n        emit NewHead(domain, id);\n    }\n}\n"
    },
    "contracts/ownable/ShuSo.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.20;\n\nimport { OwnableUpgradeable } from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport { IAdapter } from \"../interfaces/IAdapter.sol\";\nimport { IHashi } from \"../interfaces/IHashi.sol\";\nimport { IShuSho } from \"../interfaces/IShuSho.sol\";\n\nabstract contract ShuSo is IShuSho, OwnableUpgradeable {\n    IAdapter internal constant LIST_END = IAdapter(address(0x1));\n\n    IHashi public hashi;\n    mapping(uint256 => mapping(IAdapter => Link)) private _adapters;\n    mapping(uint256 => Domain) private _domains;\n\n    constructor(address _owner, address _hashi) {\n        bytes memory initParams = abi.encode(_owner, _hashi);\n        init(initParams);\n    }\n\n    function init(bytes memory initParams) public initializer {\n        (address _owner, IHashi _hashi) = abi.decode(initParams, (address, IHashi));\n        __Ownable_init();\n        setHashi(_hashi);\n        transferOwnership(_owner);\n        emit Init(_owner, _hashi);\n    }\n\n    /// @inheritdoc IShuSho\n    function checkAdapterOrderAndValidity(uint256 domain, IAdapter[] memory adapters) public view {\n        for (uint256 i = 0; i < adapters.length; i++) {\n            IAdapter adapter = adapters[i];\n            if (i > 0 && adapter <= adapters[i - 1]) revert DuplicateOrOutOfOrderAdapters(adapter, adapters[i - 1]);\n            if (_adapters[domain][adapter].next == IAdapter(address(0))) revert InvalidAdapter(adapter);\n        }\n    }\n\n    /// @inheritdoc IShuSho\n    function getAdapterLink(uint256 domain, IAdapter adapter) public view returns (Link memory) {\n        return _adapters[domain][adapter];\n    }\n\n    /// @inheritdoc IShuSho\n    function getAdapters(uint256 domain) public view returns (IAdapter[] memory) {\n        IAdapter[] memory adapters = new IAdapter[](_domains[domain].count);\n        IAdapter currentAdapter = _adapters[domain][LIST_END].next;\n        for (uint256 i = 0; i < adapters.length; i++) {\n            adapters[i] = currentAdapter;\n            currentAdapter = _adapters[domain][currentAdapter].next;\n        }\n        return adapters;\n    }\n\n    /// @inheritdoc IShuSho\n    function getDomain(uint256 domain) public view returns (Domain memory) {\n        return _domains[domain];\n    }\n\n    /// @inheritdoc IShuSho\n    function getThresholdAndCount(uint256 domain_) public view returns (uint256, uint256) {\n        Domain storage domain = _domains[domain_];\n        uint256 threshold = domain.threshold;\n        uint256 count = domain.count;\n        if (threshold == 0) threshold = count;\n        return (threshold, count);\n    }\n\n    function setHashi(IHashi _hashi) public virtual;\n\n    /**\n     * @dev Disables the given adapters for a given domain.\n     * @param domain - Uint256 identifier for the domain for which to set adapters.\n     * @param adapters - Array of adapter addresses.\n     * @notice Reverts if adapters are out of order or contain duplicates.\n     * @notice Only callable by the owner of this contract.\n     */\n    function _disableAdapters(uint256 domain, IAdapter[] memory adapters) internal onlyOwner {\n        if (_domains[domain].count == 0) revert NoAdaptersEnabled(domain);\n        if (adapters.length == 0) revert NoAdaptersGiven();\n        for (uint256 i = 0; i < adapters.length; i++) {\n            IAdapter adapter = adapters[i];\n            if (adapter == IAdapter(address(0)) || adapter == LIST_END) revert InvalidAdapter(adapter);\n            Link memory current = _adapters[domain][adapter];\n            if (current.next == IAdapter(address(0))) revert AdapterNotEnabled(adapter);\n            IAdapter next = current.next;\n            IAdapter previous = current.previous;\n            _adapters[domain][next].previous = previous;\n            _adapters[domain][previous].next = next;\n            delete _adapters[domain][adapter].next;\n            delete _adapters[domain][adapter].previous;\n            _domains[domain].count--;\n        }\n        emit AdaptersDisabled(domain, adapters);\n    }\n\n    /**\n     * @dev Enables the given adapters for a given domain.\n     * @param domain - Uint256 identifier for the domain for which to set adapters.\n     * @param adapters - Array of adapter addresses.\n     * @notice Reverts if adapters are out of order or contain duplicates.\n     * @notice Only callable by the owner of this contract.\n     */\n    function _enableAdapters(uint256 domain, IAdapter[] memory adapters) internal onlyOwner {\n        if (_adapters[domain][LIST_END].next == IAdapter(address(0))) {\n            _adapters[domain][LIST_END].next = LIST_END;\n            _adapters[domain][LIST_END].previous = LIST_END;\n        }\n        if (adapters.length == 0) revert NoAdaptersGiven();\n        for (uint256 i = 0; i < adapters.length; i++) {\n            IAdapter adapter = adapters[i];\n            if (adapter == IAdapter(address(0)) || adapter == LIST_END) revert InvalidAdapter(adapter);\n            if (_adapters[domain][adapter].next != IAdapter(address(0))) revert AdapterAlreadyEnabled(adapter);\n            IAdapter previous = _adapters[domain][LIST_END].previous;\n            _adapters[domain][previous].next = adapter;\n            _adapters[domain][adapter].previous = previous;\n            _adapters[domain][LIST_END].previous = adapter;\n            _adapters[domain][adapter].next = LIST_END;\n            _domains[domain].count++;\n        }\n        emit AdaptersEnabled(domain, adapters);\n    }\n\n    /**\n     * @dev Returns the hash unanimously agreed upon by all of the given adapters.\n     * @param domain - Uint256 identifier for the domain to query.\n     * @param id - Uint256 identifier to query.\n     * @param adapters - Array of adapter addresses to query.\n     * @return hash - Bytes32 hash agreed upon by the adapters for the given domain.\n     * @notice adapters must be in numerical order from smallest to largest and contain no duplicates.\n     * @notice Reverts if adapters are out of order or contain duplicates.\n     * @notice Reverts if adapters disagree.\n     * @notice Revert if the adapters do not yet have the hash for the given ID.\n     * @notice Reverts if no adapters are set for the given domain.\n     */\n    function _getHash(uint256 domain, uint256 id, IAdapter[] memory adapters) internal view returns (bytes32) {\n        (uint256 threshold, uint256 count) = getThresholdAndCount(domain);\n        if (adapters.length == 0) revert NoAdaptersGiven();\n        if (count == 0) revert NoAdaptersEnabled(domain);\n        if (adapters.length < threshold) revert ThresholdNotMet();\n        checkAdapterOrderAndValidity(domain, adapters);\n        return hashi.getHash(domain, id, adapters);\n    }\n\n    /**\n     * @dev Returns the hash agreed upon by a threshold of the enabled adapters.\n     * @param domain - Uint256 identifier for the domain to query.\n     * @param id - Uint256 identifier to query.\n     * @return hash - Bytes32 hash agreed upon by a threshold of the adapters for the given domain.\n     * @notice If the threshold is set to 1, the function will return the hash of the first adapter in the list.\n     * @notice Reverts if no threshold is not reached.\n     * @notice Reverts if no adapters are set for the given domain.\n     */\n    function _getThresholdHash(uint256 domain, uint256 id) internal view returns (bytes32 hash) {\n        IAdapter[] memory adapters = getAdapters(domain);\n        (uint256 threshold, uint256 count) = getThresholdAndCount(domain);\n        if (count == 0) revert NoAdaptersEnabled(domain);\n        if (adapters.length < threshold) revert ThresholdNotMet();\n\n        bytes32[] memory hashes = new bytes32[](adapters.length);\n        for (uint256 i = 0; i < adapters.length; i++) {\n            hashes[i] = adapters[i].getHash(domain, id);\n        }\n\n        for (uint256 i = 0; i < hashes.length; i++) {\n            if (i > hashes.length - threshold) break;\n\n            bytes32 baseHash = hashes[i];\n            if (baseHash == bytes32(0)) continue;\n\n            uint256 num = 0;\n            for (uint256 j = i; j < hashes.length; j++) {\n                if (baseHash == hashes[j]) {\n                    num++;\n                    if (num == threshold) return hashes[i];\n                }\n            }\n        }\n        revert ThresholdNotMet();\n    }\n\n    /**\n     * @dev Returns the hash unanimously agreed upon by ALL of the enabled adapters.\n     * @param domain - Uint256 identifier for the domain to query.\n     * @param id - Uint256 identifier to query.\n     * @return hash - Bytes32 hash agreed upon by the adapters for the given domain.\n     * @notice Reverts if adapters disagree.\n     * @notice Revert if the adapters do not yet have the hash for the given ID.\n     * @notice Reverts if no adapters are set for the given domain.\n     */\n    function _getUnanimousHash(uint256 domain, uint256 id) internal view returns (bytes32 hash) {\n        IAdapter[] memory adapters = getAdapters(domain);\n        (uint256 threshold, uint256 count) = getThresholdAndCount(domain);\n        if (count == 0) revert NoAdaptersEnabled(domain);\n        if (adapters.length < threshold) revert ThresholdNotMet();\n        return hashi.getHash(domain, id, adapters);\n    }\n\n    /**\n     * @dev Sets the address of the IHashi contract.\n     * @param _hashi - Address of the hashi contract.\n     * @notice Only callable by the owner of this contract.\n     */\n    function _setHashi(IHashi _hashi) internal onlyOwner {\n        if (hashi == _hashi) revert DuplicateHashiAddress(_hashi);\n        hashi = _hashi;\n        emit HashiSet(hashi);\n    }\n\n    /**\n     * @dev Sets the threshold of adapters required for a given domain.\n     * @param domain - Uint256 identifier for the domain for which to set the threshold.\n     * @param threshold - Uint256 threshold to set for the given domain.\n     * @notice Only callable by the owner of this contract.\n     * @notice Reverts if threshold is already set to the given value.\n     */\n    function _setThreshold(uint256 domain, uint256 threshold) internal onlyOwner {\n        uint256 count = _domains[domain].count;\n        if (count == 0) revert CountCannotBeZero();\n        if (threshold < (count / 2) + 1) revert InvalidThreshold(threshold);\n        if (_domains[domain].threshold == threshold) revert DuplicateThreashold(threshold);\n        _domains[domain].threshold = threshold;\n        emit ThresholdSet(domain, threshold);\n    }\n\n    function _setDomainThreshold(uint256 domainId, uint256 threshold) internal {\n        _domains[domainId].threshold = threshold;\n    }\n}\n"
    },
    "contracts/Prover.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { RLPReader } from \"solidity-rlp/contracts/RLPReader.sol\";\nimport { MerklePatriciaProofVerifier } from \".//MerklePatriciaProofVerifier.sol\";\n\ninterface IGiriGiriBashi {\n\tfunction getThresholdHash(\n\t\tuint256 domain,\n\t\tuint256 id\n\t) external view returns (bytes32);\n}\n\nstruct Proof {\n\tuint256 blockNumber;\n\tuint256 nonce;\n\tbytes blockHeader;\n\tbytes32 storageRoot;\n\tbytes accountProof;\n\tbytes storageProof;\n}\n\ninterface IProver {\n\terror InvalidLatestCommitment(\n\t\tbytes32 latestCommitment,\n\t\tbytes32 expectedLatestCommitment\n\t);\n\terror InvalidBlockHeader(\n\t\tbytes32 blockHeaderHash,\n\t\tbytes32 expectedBlockHeaderHash\n\t);\n\terror InvalidAccountStorageRoot();\n\terror InvalidNonce(uint256 nonce, uint256 expectedNonce);\n\terror InvalidAccountRlp(bytes accountRlp);\n\n\tfunction setAccount(address account) external;\n}\n\ncontract Prover is IProver {\n\tusing RLPReader for RLPReader.RLPItem;\n\tusing RLPReader for bytes;\n\n\tuint256 public immutable SOURCE_CHAIN_ID;\n\tuint256 public immutable COMMITMENTS_SLOT;\n\taddress public ACCOUNT;\n\taddress public immutable GIRI_GIRI_BASHI;\n\n\tuint256 public expectedNonce;\n\n\tconstructor(\n\t\tuint256 sourceChainId,\n\t\tuint256 commitmentsSlot,\n\t\taddress giriGiriBashi\n\t) {\n\t\tSOURCE_CHAIN_ID = sourceChainId;\n\t\tCOMMITMENTS_SLOT = commitmentsSlot;\n\t\tGIRI_GIRI_BASHI = giriGiriBashi;\n\t}\n\n\t// @inheritdoc IProver\n\tfunction setAccount(address account) external {\n\t\tACCOUNT = account;\n\t}\n\n\tfunction _verifyProof(\n\t\tProof calldata proof,\n\t\tbytes memory data\n\t) public returns (bool) {\n\t\t// bytes32 expectedBlockHeaderHash = IGiriGiriBashi(GIRI_GIRI_BASHI)\n\t\t// \t.getThresholdHash(SOURCE_CHAIN_ID, proof.blockNumber);\n\t\t// bytes32 blockHeaderHash = keccak256(proof.blockHeader);\n\t\t// if (expectedBlockHeaderHash != blockHeaderHash)\n\t\t// \trevert InvalidBlockHeader(blockHeaderHash, expectedBlockHeaderHash);\n\n\t\tbytes32 expectedLatestCommitment = _verifyStorageProofAndGetValue(\n\t\t\t_verifyAccountProofAndGetStorageRoot(\n\t\t\t\tproof.blockHeader,\n\t\t\t\tproof.accountProof\n\t\t\t),\n\t\t\tproof.storageProof\n\t\t);\n\t\tbytes32 latestCommitment = keccak256(\n\t\t\tabi.encode(block.chainid, data, proof.nonce)\n\t\t);\n\t\tif (expectedLatestCommitment != latestCommitment) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// _checkNonceAndIncrementExpectedNonce(proof.nonce);\n\t\treturn true;\n\t}\n\n\tfunction _verifyAccountProofAndGetStorageRoot(\n\t\tbytes memory blockHeader,\n\t\tbytes memory accountProof\n\t) internal view returns (bytes32) {\n\t\tRLPReader.RLPItem[] memory blockHeaderFields = blockHeader\n\t\t\t.toRlpItem()\n\t\t\t.toList();\n\t\tbytes32 stateRoot = bytes32(blockHeaderFields[3].toUint());\n\t\tbytes memory accountRlp = MerklePatriciaProofVerifier.extractProofValue(\n\t\t\tstateRoot,\n\t\t\tabi.encodePacked(keccak256(abi.encodePacked(ACCOUNT))),\n\t\t\taccountProof.toRlpItem().toList()\n\t\t);\n\t\tbytes32 accountStorageRoot = bytes32(\n\t\t\taccountRlp.toRlpItem().toList()[2].toUint()\n\t\t);\n\t\tif (accountStorageRoot.length == 0) revert InvalidAccountStorageRoot();\n\t\tRLPReader.RLPItem[] memory accountFields = accountRlp\n\t\t\t.toRlpItem()\n\t\t\t.toList();\n\t\tif (accountFields.length != 4) revert InvalidAccountRlp(accountRlp); // [nonce, balance, storageRoot, codeHash]\n\t\treturn bytes32(accountFields[2].toUint());\n\t}\n\n\tfunction _verifyStorageProofAndGetValue(\n\t\tbytes32 storageRoot,\n\t\tbytes calldata storageProof\n\t) internal view returns (bytes32) {\n\t\tbytes memory slotValue = MerklePatriciaProofVerifier.extractProofValue(\n\t\t\tstorageRoot,\n\t\t\t// abi.encodePacked(\n\t\t\t// \tkeccak256(\n\t\t\t// \t\tabi.encode(\n\t\t\t// \t\t\tkeccak256(abi.encode(msg.sender, COMMITMENTS_SLOT))\n\t\t\t// \t\t)\n\t\t\t// \t)\n\t\t\t// ),\n\t\t\tabi.encodePacked(keccak256(abi.encodePacked(uint256(0)))),\n\t\t\tstorageProof.toRlpItem().toList()\n\t\t);\n\t\treturn _bytesToBytes32(slotValue);\n\t}\n\n\tfunction _checkNonceAndIncrementExpectedNonce(uint256 nonce) internal {\n\t\tif (nonce != expectedNonce) revert InvalidNonce(nonce, expectedNonce);\n\t\tunchecked {\n\t\t\t++expectedNonce;\n\t\t}\n\t}\n\n\tfunction _bytesToBytes32(\n\t\tbytes memory source\n\t) internal pure returns (bytes32 result) {\n\t\tif (source.length == 0) {\n\t\t\treturn bytes32(0);\n\t\t}\n\t\t// solhint-disable-next-line\n\t\tassembly {\n\t\t\tresult := mload(add(add(source, 1), 32))\n\t\t}\n\t}\n}\n"
    },
    "contracts/SimpleERC20.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/interfaces/IERC20.sol\";\n\ninterface ISimpleERC20 is IERC20 {\n    function mint(address to, uint256 amount) external;\n    function burn(address sender, uint256 amount) external;\n}\n\ncontract SimpleERC20 is ISimpleERC20, ERC20 {\n    address public owner = msg.sender;\n\n\tconstructor(\n\t\tstring memory name,\n\t\tstring memory symbol,\n\t\tuint256 initialSupply\n\t) ERC20(name, symbol) {\n\t\t_mint(msg.sender, initialSupply);\n\t}\n\n    function setOwner(address _owner) public {\n        require(msg.sender == owner, \"SimpleERC20: only owner can change owner\");\n        owner = _owner;\n    }\n\n    function mint(address to, uint256 amount) public {\n        require(msg.sender == owner, \"SimpleERC20: only owner can mint\");\n        _mint(to, amount);\n    }\n\n    function burn(address sender, uint256 amount) public {\n        _burn(sender, amount);\n    }\n\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nlibrary console {\n    address constant CONSOLE_ADDRESS =\n        0x000000000000000000636F6e736F6c652e6c6f67;\n\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\n        address consoleAddress = CONSOLE_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            pop(\n                staticcall(\n                    gas(),\n                    consoleAddress,\n                    add(payload, 32),\n                    mload(payload),\n                    0,\n                    0\n                )\n            )\n        }\n    }\n\n    function _castToPure(\n      function(bytes memory) internal view fnIn\n    ) internal pure returns (function(bytes memory) pure fnOut) {\n        assembly {\n            fnOut := fnIn\n        }\n    }\n\n    function _sendLogPayload(bytes memory payload) internal pure {\n        _castToPure(_sendLogPayloadImplementation)(payload);\n    }\n\n    function log() internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\n    }\n    function logInt(int256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n    }\n\n    function logUint(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function logString(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function logBool(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function logAddress(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function logBytes(bytes memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n    }\n\n    function logBytes1(bytes1 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n    }\n\n    function logBytes2(bytes2 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n    }\n\n    function logBytes3(bytes3 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n    }\n\n    function logBytes4(bytes4 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n    }\n\n    function logBytes5(bytes5 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n    }\n\n    function logBytes6(bytes6 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n    }\n\n    function logBytes7(bytes7 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n    }\n\n    function logBytes8(bytes8 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n    }\n\n    function logBytes9(bytes9 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n    }\n\n    function logBytes10(bytes10 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n    }\n\n    function logBytes11(bytes11 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n    }\n\n    function logBytes12(bytes12 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n    }\n\n    function logBytes13(bytes13 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n    }\n\n    function logBytes14(bytes14 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n    }\n\n    function logBytes15(bytes15 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n    }\n\n    function logBytes16(bytes16 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n    }\n\n    function logBytes17(bytes17 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n    }\n\n    function logBytes18(bytes18 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n    }\n\n    function logBytes19(bytes19 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n    }\n\n    function logBytes20(bytes20 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n    }\n\n    function logBytes21(bytes21 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n    }\n\n    function logBytes22(bytes22 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n    }\n\n    function logBytes23(bytes23 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n    }\n\n    function logBytes24(bytes24 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n    }\n\n    function logBytes25(bytes25 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n    }\n\n    function logBytes26(bytes26 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n    }\n\n    function logBytes27(bytes27 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n    }\n\n    function logBytes28(bytes28 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n    }\n\n    function logBytes29(bytes29 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n    }\n\n    function logBytes30(bytes30 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n    }\n\n    function logBytes31(bytes31 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n    }\n\n    function logBytes32(bytes32 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n    }\n\n    function log(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function log(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function log(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function log(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function log(uint256 p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n    }\n\n    function log(uint256 p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n    }\n\n    function log(uint256 p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n    }\n\n    function log(uint256 p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n    }\n\n    function log(string memory p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n    }\n\n    function log(string memory p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n\n    function log(string memory p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n    }\n\n    function log(string memory p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n    }\n\n    function log(bool p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n    }\n\n    function log(bool p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n    }\n\n    function log(bool p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n    }\n\n    function log(bool p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n    }\n\n    function log(address p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n    }\n\n    function log(address p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n    }\n\n    function log(address p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n    }\n\n    function log(address p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n    }\n\n}\n"
    },
    "solidity-rlp/contracts/RLPReader.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n * @author Hamdi Allam hamdi.allam97@gmail.com\n * Please reach out with any questions or concerns\n */\npragma solidity >=0.5.10 <0.9.0;\n\nlibrary RLPReader {\n    uint8 constant STRING_SHORT_START = 0x80;\n    uint8 constant STRING_LONG_START = 0xb8;\n    uint8 constant LIST_SHORT_START = 0xc0;\n    uint8 constant LIST_LONG_START = 0xf8;\n    uint8 constant WORD_SIZE = 32;\n\n    struct RLPItem {\n        uint256 len;\n        uint256 memPtr;\n    }\n\n    struct Iterator {\n        RLPItem item; // Item that's being iterated over.\n        uint256 nextPtr; // Position of the next item in the list.\n    }\n\n    /*\n     * @dev Returns the next element in the iteration. Reverts if it has not next element.\n     * @param self The iterator.\n     * @return The next element in the iteration.\n     */\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\n        require(hasNext(self));\n\n        uint256 ptr = self.nextPtr;\n        uint256 itemLength = _itemLength(ptr);\n        self.nextPtr = ptr + itemLength;\n\n        return RLPItem(itemLength, ptr);\n    }\n\n    /*\n     * @dev Returns true if the iteration has more elements.\n     * @param self The iterator.\n     * @return true if the iteration has more elements.\n     */\n    function hasNext(Iterator memory self) internal pure returns (bool) {\n        RLPItem memory item = self.item;\n        return self.nextPtr < item.memPtr + item.len;\n    }\n\n    /*\n     * @param item RLP encoded bytes\n     */\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\n        uint256 memPtr;\n        assembly {\n            memPtr := add(item, 0x20)\n        }\n\n        return RLPItem(item.length, memPtr);\n    }\n\n    /*\n     * @dev Create an iterator. Reverts if item is not a list.\n     * @param self The RLP item.\n     * @return An 'Iterator' over the item.\n     */\n    function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\n        require(isList(self));\n\n        uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\n        return Iterator(self, ptr);\n    }\n\n    /*\n     * @param the RLP item.\n     */\n    function rlpLen(RLPItem memory item) internal pure returns (uint256) {\n        return item.len;\n    }\n\n    /*\n     * @param the RLP item.\n     * @return (memPtr, len) pair: location of the item's payload in memory.\n     */\n    function payloadLocation(RLPItem memory item) internal pure returns (uint256, uint256) {\n        uint256 offset = _payloadOffset(item.memPtr);\n        uint256 memPtr = item.memPtr + offset;\n        uint256 len = item.len - offset; // data length\n        return (memPtr, len);\n    }\n\n    /*\n     * @param the RLP item.\n     */\n    function payloadLen(RLPItem memory item) internal pure returns (uint256) {\n        (, uint256 len) = payloadLocation(item);\n        return len;\n    }\n\n    /*\n     * @param the RLP item containing the encoded list.\n     */\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\n        require(isList(item));\n\n        uint256 items = numItems(item);\n        RLPItem[] memory result = new RLPItem[](items);\n\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\n        uint256 dataLen;\n        for (uint256 i = 0; i < items; i++) {\n            dataLen = _itemLength(memPtr);\n            result[i] = RLPItem(dataLen, memPtr);\n            memPtr = memPtr + dataLen;\n        }\n\n        return result;\n    }\n\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\n    function isList(RLPItem memory item) internal pure returns (bool) {\n        if (item.len == 0) return false;\n\n        uint8 byte0;\n        uint256 memPtr = item.memPtr;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n\n        if (byte0 < LIST_SHORT_START) return false;\n        return true;\n    }\n\n    /*\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\n     * @return keccak256 hash of RLP encoded bytes.\n     */\n    function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\n        uint256 ptr = item.memPtr;\n        uint256 len = item.len;\n        bytes32 result;\n        assembly {\n            result := keccak256(ptr, len)\n        }\n        return result;\n    }\n\n    /*\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\n     * @return keccak256 hash of the item payload.\n     */\n    function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\n        bytes32 result;\n        assembly {\n            result := keccak256(memPtr, len)\n        }\n        return result;\n    }\n\n    /** RLPItem conversions into data types **/\n\n    // @returns raw rlp encoding in bytes\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\n        bytes memory result = new bytes(item.len);\n        if (result.length == 0) return result;\n\n        uint256 ptr;\n        assembly {\n            ptr := add(0x20, result)\n        }\n\n        copy(item.memPtr, ptr, item.len);\n        return result;\n    }\n\n    // any non-zero byte except \"0x80\" is considered true\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\n        require(item.len == 1);\n        uint256 result;\n        uint256 memPtr = item.memPtr;\n        assembly {\n            result := byte(0, mload(memPtr))\n        }\n\n        // SEE Github Issue #5.\n        // Summary: Most commonly used RLP libraries (i.e Geth) will encode\n        // \"0\" as \"0x80\" instead of as \"0\". We handle this edge case explicitly\n        // here.\n        if (result == 0 || result == STRING_SHORT_START) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    function toAddress(RLPItem memory item) internal pure returns (address) {\n        // 1 byte for the length prefix\n        require(item.len == 21);\n\n        return address(uint160(toUint(item)));\n    }\n\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\n        require(item.len > 0 && item.len <= 33);\n\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\n\n        uint256 result;\n        assembly {\n            result := mload(memPtr)\n\n            // shift to the correct location if neccesary\n            if lt(len, 32) {\n                result := div(result, exp(256, sub(32, len)))\n            }\n        }\n\n        return result;\n    }\n\n    // enforces 32 byte length\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\n        // one byte prefix\n        require(item.len == 33);\n\n        uint256 result;\n        uint256 memPtr = item.memPtr + 1;\n        assembly {\n            result := mload(memPtr)\n        }\n\n        return result;\n    }\n\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\n        require(item.len > 0);\n\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\n        bytes memory result = new bytes(len);\n\n        uint256 destPtr;\n        assembly {\n            destPtr := add(0x20, result)\n        }\n\n        copy(memPtr, destPtr, len);\n        return result;\n    }\n\n    /*\n     * Private Helpers\n     */\n\n    // @return number of payload items inside an encoded list.\n    function numItems(RLPItem memory item) private pure returns (uint256) {\n        if (item.len == 0) return 0;\n\n        uint256 count = 0;\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\n        uint256 endPtr = item.memPtr + item.len;\n        while (currPtr < endPtr) {\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\n            count++;\n        }\n\n        return count;\n    }\n\n    // @return entire rlp item byte length\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\n        uint256 itemLen;\n        uint256 byte0;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n\n        if (byte0 < STRING_SHORT_START) {\n            itemLen = 1;\n        } else if (byte0 < STRING_LONG_START) {\n            itemLen = byte0 - STRING_SHORT_START + 1;\n        } else if (byte0 < LIST_SHORT_START) {\n            assembly {\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\n                memPtr := add(memPtr, 1) // skip over the first byte\n\n                /* 32 byte word size */\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\n                itemLen := add(dataLen, add(byteLen, 1))\n            }\n        } else if (byte0 < LIST_LONG_START) {\n            itemLen = byte0 - LIST_SHORT_START + 1;\n        } else {\n            assembly {\n                let byteLen := sub(byte0, 0xf7)\n                memPtr := add(memPtr, 1)\n\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\n                itemLen := add(dataLen, add(byteLen, 1))\n            }\n        }\n\n        return itemLen;\n    }\n\n    // @return number of bytes until the data\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\n        uint256 byte0;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n\n        if (byte0 < STRING_SHORT_START) {\n            return 0;\n        } else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)) {\n            return 1;\n        } else if (byte0 < LIST_SHORT_START) {\n            // being explicit\n            return byte0 - (STRING_LONG_START - 1) + 1;\n        } else {\n            return byte0 - (LIST_LONG_START - 1) + 1;\n        }\n    }\n\n    /*\n     * @param src Pointer to source\n     * @param dest Pointer to destination\n     * @param len Amount of memory to copy from the source\n     */\n    function copy(uint256 src, uint256 dest, uint256 len) private pure {\n        if (len == 0) return;\n\n        // copy as many word sizes as possible\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n\n            src += WORD_SIZE;\n            dest += WORD_SIZE;\n        }\n\n        if (len > 0) {\n            // left over bytes. Mask is used to remove unwanted bytes from the word\n            uint256 mask = 256**(WORD_SIZE - len) - 1;\n            assembly {\n                let srcpart := and(mload(src), not(mask)) // zero out src\n                let destpart := and(mload(dest), mask) // retrieve the bytes\n                mstore(dest, or(destpart, srcpart))\n            }\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "viaIR": true,
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}