/**
 * This file is autogenerated by Scaffold-ETH.
 * You should not edit it manually or your changes might be overwritten.
 */
import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";

const deployedContracts = {
  10200: {
Å“    GiriGiriBashi: {
      address: "0xA85A89e38b6bE6378Aa07145F7eC46F96baBcA43",
      abi: [
        {
          inputs: [
            {
              internalType: "address",
              name: "_owner",
              type: "address",
            },
            {
              internalType: "address",
              name: "_hashi",
              type: "address",
            },
            {
              internalType: "address payable",
              name: "_bondRecipient",
              type: "address",
            },
          ],
          stateMutability: "nonpayable",
          type: "constructor",
        },
        {
          inputs: [
            {
              internalType: "contract IAdapter",
              name: "adapter",
              type: "address",
            },
          ],
          name: "AdapterAlreadyEnabled",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "contract IAdapter",
              name: "adapter",
              type: "address",
            },
          ],
          name: "AdapterHasNotYetTimedOut",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "contract IAdapter",
              name: "adapter",
              type: "address",
            },
          ],
          name: "AdapterNotEnabled",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "contract IAdapter",
              name: "adapter",
              type: "address",
            },
          ],
          name: "AdapterNotQuarantined",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "contract IAdapter[]",
              name: "adapters",
              type: "address[]",
            },
            {
              internalType: "contract IAdapter",
              name: "adapter",
              type: "address",
            },
          ],
          name: "AdaptersCannotContainChallengedAdapter",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "contract IAdapter",
              name: "adapterOne",
              type: "address",
            },
            {
              internalType: "contract IAdapter",
              name: "adapterTwo",
              type: "address",
            },
          ],
          name: "AdaptersDisagree",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "contract IAdapter",
              name: "adapter",
              type: "address",
            },
          ],
          name: "AlreadyQuarantined",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "domain",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "id",
              type: "uint256",
            },
            {
              internalType: "contract IAdapter[]",
              name: "adapters",
              type: "address[]",
            },
          ],
          name: "CannotProveNoConfidence",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "challengeId",
              type: "bytes32",
            },
            {
              internalType: "uint256",
              name: "domain",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "id",
              type: "uint256",
            },
            {
              internalType: "contract IAdapter",
              name: "adapter",
              type: "address",
            },
          ],
          name: "ChallengeNotFound",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "domain",
              type: "uint256",
            },
          ],
          name: "ChallengeRangeAlreadySet",
          type: "error",
        },
        {
          inputs: [],
          name: "CountCannotBeZero",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "domain",
              type: "uint256",
            },
          ],
          name: "CountMustBeZero",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "challengeId",
              type: "bytes32",
            },
            {
              internalType: "uint256",
              name: "domain",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "id",
              type: "uint256",
            },
            {
              internalType: "contract IAdapter",
              name: "adapter",
              type: "address",
            },
          ],
          name: "DuplicateChallenge",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "contract IHashi",
              name: "hashi",
              type: "address",
            },
          ],
          name: "DuplicateHashiAddress",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "contract IAdapter",
              name: "adapterOne",
              type: "address",
            },
            {
              internalType: "contract IAdapter",
              name: "adapterTwo",
              type: "address",
            },
          ],
          name: "DuplicateOrOutOfOrderAdapters",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "threshold",
              type: "uint256",
            },
          ],
          name: "DuplicateThreashold",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "contract IAdapter",
              name: "adapter",
              type: "address",
            },
          ],
          name: "InvalidAdapter",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "threshold",
              type: "uint256",
            },
          ],
          name: "InvalidThreshold",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "domain",
              type: "uint256",
            },
          ],
          name: "NoAdaptersEnabled",
          type: "error",
        },
        {
          inputs: [],
          name: "NoAdaptersGiven",
          type: "error",
        },
        {
          inputs: [],
          name: "NoConfidenceRequired",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "contract IAdapter",
              name: "adapter",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256",
            },
          ],
          name: "NotEnoughValue",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "contract IAdapter",
              name: "adapter",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "id",
              type: "uint256",
            },
          ],
          name: "OutOfRange",
          type: "error",
        },
        {
          inputs: [],
          name: "ThresholdNotMet",
          type: "error",
        },
        {
          inputs: [],
          name: "UnequalArrayLengths",
          type: "error",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "uint256",
              name: "domain",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "contract IAdapter[]",
              name: "adapters",
              type: "address[]",
            },
          ],
          name: "AdaptersDisabled",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "uint256",
              name: "domain",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "contract IAdapter[]",
              name: "adapters",
              type: "address[]",
            },
          ],
          name: "AdaptersEnabled",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address payable",
              name: "bondRecipient",
              type: "address",
            },
          ],
          name: "BondRecipientSet",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "bytes32",
              name: "challengeId",
              type: "bytes32",
            },
            {
              indexed: true,
              internalType: "uint256",
              name: "domain",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "id",
              type: "uint256",
            },
            {
              indexed: true,
              internalType: "contract IAdapter",
              name: "adapter",
              type: "address",
            },
            {
              indexed: true,
              internalType: "address",
              name: "challenger",
              type: "address",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "timestamp",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "bond",
              type: "uint256",
            },
          ],
          name: "ChallengeCreated",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "uint256",
              name: "domain",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "range",
              type: "uint256",
            },
          ],
          name: "ChallengeRangeUpdated",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "bytes32",
              name: "challengeId",
              type: "bytes32",
            },
            {
              indexed: true,
              internalType: "uint256",
              name: "domain",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "id",
              type: "uint256",
            },
            {
              indexed: true,
              internalType: "contract IAdapter",
              name: "adapter",
              type: "address",
            },
            {
              indexed: true,
              internalType: "address",
              name: "challenger",
              type: "address",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "bond",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "bool",
              name: "challengeSuccessful",
              type: "bool",
            },
          ],
          name: "ChallengeResolved",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "contract IHashi",
              name: "hashi",
              type: "address",
            },
          ],
          name: "HashiSet",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "owner",
              type: "address",
            },
            {
              indexed: true,
              internalType: "contract IHashi",
              name: "hashi",
              type: "address",
            },
          ],
          name: "Init",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "uint8",
              name: "version",
              type: "uint8",
            },
          ],
          name: "Initialized",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "uint256",
              name: "domain",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "head",
              type: "uint256",
            },
          ],
          name: "NewHead",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "uint256",
              name: "domain",
              type: "uint256",
            },
          ],
          name: "NoConfidenceDeclared",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "previousOwner",
              type: "address",
            },
            {
              indexed: true,
              internalType: "address",
              name: "newOwner",
              type: "address",
            },
          ],
          name: "OwnershipTransferred",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "uint256",
              name: "domain",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "contract IAdapter",
              name: "adapter",
              type: "address",
            },
            {
              components: [
                {
                  internalType: "bool",
                  name: "quarantined",
                  type: "bool",
                },
                {
                  internalType: "uint256",
                  name: "minimumBond",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "startId",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "idDepth",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "timeout",
                  type: "uint256",
                },
              ],
              indexed: false,
              internalType: "struct IGiriGiriBashi.Settings",
              name: "settings",
              type: "tuple",
            },
          ],
          name: "SettingsInitialized",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "uint256",
              name: "domain",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "threshold",
              type: "uint256",
            },
          ],
          name: "ThresholdSet",
          type: "event",
        },
        {
          inputs: [],
          name: "bondRecipient",
          outputs: [
            {
              internalType: "address payable",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "domain",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "id",
              type: "uint256",
            },
            {
              internalType: "contract IAdapter",
              name: "adapter",
              type: "address",
            },
          ],
          name: "challengeAdapter",
          outputs: [],
          stateMutability: "payable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "domain",
              type: "uint256",
            },
            {
              internalType: "contract IAdapter[]",
              name: "adapters",
              type: "address[]",
            },
          ],
          name: "checkAdapterOrderAndValidity",
          outputs: [],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "domain",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "id",
              type: "uint256",
            },
            {
              internalType: "contract IAdapter[]",
              name: "adapters",
              type: "address[]",
            },
          ],
          name: "declareNoConfidence",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "domain",
              type: "uint256",
            },
            {
              internalType: "contract IAdapter[]",
              name: "adapters",
              type: "address[]",
            },
          ],
          name: "disableAdapters",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "domain",
              type: "uint256",
            },
            {
              internalType: "contract IAdapter[]",
              name: "adapters",
              type: "address[]",
            },
            {
              components: [
                {
                  internalType: "bool",
                  name: "quarantined",
                  type: "bool",
                },
                {
                  internalType: "uint256",
                  name: "minimumBond",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "startId",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "idDepth",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "timeout",
                  type: "uint256",
                },
              ],
              internalType: "struct IGiriGiriBashi.Settings[]",
              name: "settings",
              type: "tuple[]",
            },
          ],
          name: "enableAdapters",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "domain",
              type: "uint256",
            },
            {
              internalType: "contract IAdapter",
              name: "adapter",
              type: "address",
            },
          ],
          name: "getAdapterLink",
          outputs: [
            {
              components: [
                {
                  internalType: "contract IAdapter",
                  name: "previous",
                  type: "address",
                },
                {
                  internalType: "contract IAdapter",
                  name: "next",
                  type: "address",
                },
              ],
              internalType: "struct IShuSho.Link",
              name: "",
              type: "tuple",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "domain",
              type: "uint256",
            },
          ],
          name: "getAdapters",
          outputs: [
            {
              internalType: "contract IAdapter[]",
              name: "",
              type: "address[]",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "challengeId",
              type: "bytes32",
            },
          ],
          name: "getChallenge",
          outputs: [
            {
              components: [
                {
                  internalType: "address payable",
                  name: "challenger",
                  type: "address",
                },
                {
                  internalType: "uint256",
                  name: "timestamp",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "bond",
                  type: "uint256",
                },
              ],
              internalType: "struct IGiriGiriBashi.Challenge",
              name: "",
              type: "tuple",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "domain",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "id",
              type: "uint256",
            },
            {
              internalType: "contract IAdapter",
              name: "adapter",
              type: "address",
            },
          ],
          name: "getChallengeId",
          outputs: [
            {
              internalType: "bytes32",
              name: "challengeId",
              type: "bytes32",
            },
          ],
          stateMutability: "pure",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "domain",
              type: "uint256",
            },
          ],
          name: "getChallengeRange",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "domain",
              type: "uint256",
            },
          ],
          name: "getDomain",
          outputs: [
            {
              components: [
                {
                  internalType: "uint256",
                  name: "threshold",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "count",
                  type: "uint256",
                },
              ],
              internalType: "struct IShuSho.Domain",
              name: "",
              type: "tuple",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "domain",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "id",
              type: "uint256",
            },
            {
              internalType: "contract IAdapter[]",
              name: "adapters",
              type: "address[]",
            },
          ],
          name: "getHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "hash",
              type: "bytes32",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "domain",
              type: "uint256",
            },
          ],
          name: "getHead",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "domain",
              type: "uint256",
            },
            {
              internalType: "contract IAdapter",
              name: "adapter",
              type: "address",
            },
          ],
          name: "getSettings",
          outputs: [
            {
              components: [
                {
                  internalType: "bool",
                  name: "quarantined",
                  type: "bool",
                },
                {
                  internalType: "uint256",
                  name: "minimumBond",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "startId",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "idDepth",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "timeout",
                  type: "uint256",
                },
              ],
              internalType: "struct IGiriGiriBashi.Settings",
              name: "",
              type: "tuple",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "domain_",
              type: "uint256",
            },
          ],
          name: "getThresholdAndCount",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "domain",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "id",
              type: "uint256",
            },
          ],
          name: "getThresholdHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "hash",
              type: "bytes32",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "domain",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "id",
              type: "uint256",
            },
          ],
          name: "getUnanimousHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "hash",
              type: "bytes32",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "hashi",
          outputs: [
            {
              internalType: "contract IHashi",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "initParams",
              type: "bytes",
            },
          ],
          name: "init",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "owner",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "renounceOwnership",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "domain",
              type: "uint256",
            },
            {
              internalType: "contract IAdapter[]",
              name: "currentAdapters",
              type: "address[]",
            },
            {
              internalType: "contract IAdapter[]",
              name: "newAdapters",
              type: "address[]",
            },
            {
              components: [
                {
                  internalType: "bool",
                  name: "quarantined",
                  type: "bool",
                },
                {
                  internalType: "uint256",
                  name: "minimumBond",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "startId",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "idDepth",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "timeout",
                  type: "uint256",
                },
              ],
              internalType: "struct IGiriGiriBashi.Settings[]",
              name: "settings",
              type: "tuple[]",
            },
          ],
          name: "replaceQuarantinedAdapters",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "domain",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "id",
              type: "uint256",
            },
            {
              internalType: "contract IAdapter",
              name: "adapter",
              type: "address",
            },
            {
              internalType: "contract IAdapter[]",
              name: "adapters",
              type: "address[]",
            },
          ],
          name: "resolveChallenge",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address payable",
              name: "_bondRecipient",
              type: "address",
            },
          ],
          name: "setBondRecipient",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "domain",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "range",
              type: "uint256",
            },
          ],
          name: "setChallengeRange",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "contract IHashi",
              name: "_hashi",
              type: "address",
            },
          ],
          name: "setHashi",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "domain",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "threshold",
              type: "uint256",
            },
          ],
          name: "setThreshold",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "newOwner",
              type: "address",
            },
          ],
          name: "transferOwnership",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
      ],
      inheritedFunctions: {
        challengeAdapter: "contracts/interfaces/IGiriGiriBashi.sol",
        checkAdapterOrderAndValidity: "contracts/ownable/ShuSo.sol",
        declareNoConfidence: "contracts/interfaces/IGiriGiriBashi.sol",
        disableAdapters: "contracts/interfaces/IGiriGiriBashi.sol",
        enableAdapters: "contracts/interfaces/IGiriGiriBashi.sol",
        getAdapterLink: "contracts/ownable/ShuSo.sol",
        getAdapters: "contracts/ownable/ShuSo.sol",
        getChallenge: "contracts/interfaces/IGiriGiriBashi.sol",
        getChallengeId: "contracts/interfaces/IGiriGiriBashi.sol",
        getChallengeRange: "contracts/interfaces/IGiriGiriBashi.sol",
        getDomain: "contracts/ownable/ShuSo.sol",
        getHash: "contracts/interfaces/IGiriGiriBashi.sol",
        getHead: "contracts/interfaces/IGiriGiriBashi.sol",
        getSettings: "contracts/interfaces/IGiriGiriBashi.sol",
        getThresholdAndCount: "contracts/ownable/ShuSo.sol",
        getThresholdHash: "contracts/interfaces/IGiriGiriBashi.sol",
        getUnanimousHash: "contracts/interfaces/IGiriGiriBashi.sol",
        hashi: "contracts/ownable/ShuSo.sol",
        replaceQuarantinedAdapters: "contracts/interfaces/IGiriGiriBashi.sol",
        resolveChallenge: "contracts/interfaces/IGiriGiriBashi.sol",
        setBondRecipient: "contracts/interfaces/IGiriGiriBashi.sol",
        setChallengeRange: "contracts/interfaces/IGiriGiriBashi.sol",
        setThreshold: "contracts/interfaces/IGiriGiriBashi.sol",
        init: "contracts/ownable/ShuSo.sol",
        owner: "contracts/ownable/ShuSo.sol",
        renounceOwnership: "contracts/ownable/ShuSo.sol",
        setHashi: "contracts/ownable/ShuSo.sol",
        transferOwnership: "contracts/ownable/ShuSo.sol",
      },
    },
    ETFIssuingChain: {
      address: "0x79aa80021eD7F22A1c494F851A8254733383B232",
      abi: [
        {
          inputs: [
            {
              internalType: "uint32",
              name: "_mainChain",
              type: "uint32",
            },
            {
              internalType: "uint32",
              name: "_chainId",
              type: "uint32",
            },
            {
              components: [
                {
                  internalType: "address",
                  name: "_address",
                  type: "address",
                },
                {
                  internalType: "uint256",
                  name: "_quantity",
                  type: "uint256",
                },
                {
                  internalType: "uint32",
                  name: "_chainId",
                  type: "uint32",
                },
                {
                  internalType: "address",
                  name: "_contributor",
                  type: "address",
                },
                {
                  internalType: "address",
                  name: "_aggregator",
                  type: "address",
                },
              ],
              internalType: "struct TokenQuantity[]",
              name: "_requiredTokens",
              type: "tuple[]",
            },
            {
              internalType: "address",
              name: "_hashi",
              type: "address",
            },
            {
              internalType: "address",
              name: "_hyperlaneAdapter",
              type: "address",
            },
            {
              internalType: "address",
              name: "_hyperlaneReporter",
              type: "address",
            },
            {
              internalType: "address",
              name: "_yahoAddress",
              type: "address",
            },
            {
              internalType: "address",
              name: "_etfToken",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "_etfTokenPerVault",
              type: "uint256",
            },
          ],
          stateMutability: "nonpayable",
          type: "constructor",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "uint256",
              name: "_vaultId",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "address",
              name: "_address",
              type: "address",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "_quantity",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "uint32",
              name: "_chainId",
              type: "uint32",
            },
            {
              indexed: false,
              internalType: "address",
              name: "_contributor",
              type: "address",
            },
          ],
          name: "Deposit",
          type: "event",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          name: "accountContributionsPerVault",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          name: "addressToToken",
          outputs: [
            {
              internalType: "address",
              name: "_address",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "_quantity",
              type: "uint256",
            },
            {
              internalType: "uint32",
              name: "_chainId",
              type: "uint32",
            },
            {
              internalType: "address",
              name: "_contributor",
              type: "address",
            },
            {
              internalType: "address",
              name: "_aggregator",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_vaultId",
              type: "uint256",
            },
            {
              components: [
                {
                  internalType: "uint256",
                  name: "blockNumber",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "nonce",
                  type: "uint256",
                },
                {
                  internalType: "bytes",
                  name: "blockHeader",
                  type: "bytes",
                },
                {
                  internalType: "bytes32",
                  name: "storageRoot",
                  type: "bytes32",
                },
                {
                  internalType: "bytes",
                  name: "accountProof",
                  type: "bytes",
                },
                {
                  internalType: "bytes",
                  name: "storageProof",
                  type: "bytes",
                },
              ],
              internalType: "struct Proof",
              name: "proof",
              type: "tuple",
            },
          ],
          name: "burn",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "chainId",
          outputs: [
            {
              internalType: "uint32",
              name: "",
              type: "uint32",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              components: [
                {
                  internalType: "uint256",
                  name: "vaultId",
                  type: "uint256",
                },
                {
                  components: [
                    {
                      internalType: "address",
                      name: "_address",
                      type: "address",
                    },
                    {
                      internalType: "uint256",
                      name: "_quantity",
                      type: "uint256",
                    },
                    {
                      internalType: "uint32",
                      name: "_chainId",
                      type: "uint32",
                    },
                    {
                      internalType: "address",
                      name: "_contributor",
                      type: "address",
                    },
                    {
                      internalType: "address",
                      name: "_aggregator",
                      type: "address",
                    },
                  ],
                  internalType: "struct TokenQuantity[]",
                  name: "tokens",
                  type: "tuple[]",
                },
              ],
              internalType: "struct DepositInfo",
              name: "_depositInfo",
              type: "tuple",
            },
          ],
          name: "deposit",
          outputs: [],
          stateMutability: "payable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "contract IReporter[]",
              name: "reporters",
              type: "address[]",
            },
            {
              internalType: "contract IAdapter[]",
              name: "adapters",
              type: "address[]",
            },
          ],
          name: "dispatchCommitment",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "etfToken",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "etfTokenPerVault",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              components: [
                {
                  internalType: "address",
                  name: "_address",
                  type: "address",
                },
                {
                  internalType: "uint256",
                  name: "_quantity",
                  type: "uint256",
                },
                {
                  internalType: "uint32",
                  name: "_chainId",
                  type: "uint32",
                },
                {
                  internalType: "address",
                  name: "_contributor",
                  type: "address",
                },
                {
                  internalType: "address",
                  name: "_aggregator",
                  type: "address",
                },
              ],
              internalType: "struct TokenQuantity",
              name: "_tokenQuantity",
              type: "tuple",
            },
          ],
          name: "getIndexForDepositInfo",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "getRequiredTokens",
          outputs: [
            {
              components: [
                {
                  internalType: "address",
                  name: "_address",
                  type: "address",
                },
                {
                  internalType: "uint256",
                  name: "_quantity",
                  type: "uint256",
                },
                {
                  internalType: "uint32",
                  name: "_chainId",
                  type: "uint32",
                },
                {
                  internalType: "address",
                  name: "_contributor",
                  type: "address",
                },
                {
                  internalType: "address",
                  name: "_aggregator",
                  type: "address",
                },
              ],
              internalType: "struct TokenQuantity[]",
              name: "",
              type: "tuple[]",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_vaultId",
              type: "uint256",
            },
          ],
          name: "getVault",
          outputs: [
            {
              components: [
                {
                  components: [
                    {
                      internalType: "address",
                      name: "_address",
                      type: "address",
                    },
                    {
                      internalType: "uint256",
                      name: "_quantity",
                      type: "uint256",
                    },
                    {
                      internalType: "uint32",
                      name: "_chainId",
                      type: "uint32",
                    },
                    {
                      internalType: "address",
                      name: "_contributor",
                      type: "address",
                    },
                    {
                      internalType: "address",
                      name: "_aggregator",
                      type: "address",
                    },
                  ],
                  internalType: "struct TokenQuantity[]",
                  name: "_tokens",
                  type: "tuple[]",
                },
                {
                  internalType: "enum VaultState",
                  name: "state",
                  type: "uint8",
                },
              ],
              internalType: "struct Vault",
              name: "",
              type: "tuple",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "getVaultStates",
          outputs: [
            {
              internalType: "enum VaultState[]",
              name: "",
              type: "uint8[]",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint32",
              name: "_origin",
              type: "uint32",
            },
            {
              internalType: "bytes32",
              name: "_sender",
              type: "bytes32",
            },
            {
              internalType: "bytes",
              name: "_message",
              type: "bytes",
            },
          ],
          name: "handle",
          outputs: [],
          stateMutability: "payable",
          type: "function",
        },
        {
          inputs: [],
          name: "isMainChain",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "latestCommitment",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "mainChainId",
          outputs: [
            {
              internalType: "uint32",
              name: "",
              type: "uint32",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "mainChainLock",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          name: "receivedMessages",
          outputs: [
            {
              internalType: "uint32",
              name: "",
              type: "uint32",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          name: "requiredTokens",
          outputs: [
            {
              internalType: "address",
              name: "_address",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "_quantity",
              type: "uint256",
            },
            {
              internalType: "uint32",
              name: "_chainId",
              type: "uint32",
            },
            {
              internalType: "address",
              name: "_contributor",
              type: "address",
            },
            {
              internalType: "address",
              name: "_aggregator",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_vaultId",
              type: "uint256",
            },
            {
              internalType: "bytes32",
              name: "mainChainLastCommitment",
              type: "bytes32",
            },
            {
              components: [
                {
                  internalType: "uint256",
                  name: "blockNumber",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "nonce",
                  type: "uint256",
                },
                {
                  internalType: "bytes",
                  name: "blockHeader",
                  type: "bytes",
                },
                {
                  internalType: "bytes32",
                  name: "storageRoot",
                  type: "bytes32",
                },
                {
                  internalType: "bytes",
                  name: "accountProof",
                  type: "bytes",
                },
                {
                  internalType: "bytes",
                  name: "storageProof",
                  type: "bytes",
                },
              ],
              internalType: "struct Proof",
              name: "proof",
              type: "tuple",
            },
          ],
          name: "secureBurn",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_sideChainLock",
              type: "address",
            },
            {
              internalType: "uint32",
              name: "_sideChainId",
              type: "uint32",
            },
            {
              internalType: "address",
              name: "_outbox",
              type: "address",
            },
            {
              internalType: "address",
              name: "_securityModule",
              type: "address",
            },
          ],
          name: "setMainChainParams",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_mainChainLock",
              type: "address",
            },
            {
              internalType: "address",
              name: "_outbox",
              type: "address",
            },
            {
              internalType: "address",
              name: "_securityModule",
              type: "address",
            },
          ],
          name: "setSideChainParams",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_vaultId",
              type: "uint256",
            },
            {
              internalType: "enum VaultState",
              name: "_state",
              type: "uint8",
            },
          ],
          name: "setVaultState",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "sideChainId",
          outputs: [
            {
              internalType: "uint32",
              name: "",
              type: "uint32",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "sideChainLock",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "updateCommitment",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          name: "vaults",
          outputs: [
            {
              internalType: "enum VaultState",
              name: "state",
              type: "uint8",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
      ],
      inheritedFunctions: {},
    },
    MockAggregator: {
      address: "0x6BADE66fbD5279debC73ee48D2C6D0972087d986",
      abi: [
        {
          inputs: [
            {
              internalType: "int256",
              name: "_price",
              type: "int256",
            },
            {
              internalType: "uint8",
              name: "_decimals",
              type: "uint8",
            },
          ],
          stateMutability: "nonpayable",
          type: "constructor",
        },
        {
          inputs: [],
          name: "decimals",
          outputs: [
            {
              internalType: "uint8",
              name: "",
              type: "uint8",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "description",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string",
            },
          ],
          stateMutability: "pure",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint80",
              name: "_roundId",
              type: "uint80",
            },
          ],
          name: "getRoundData",
          outputs: [
            {
              internalType: "uint80",
              name: "roundId",
              type: "uint80",
            },
            {
              internalType: "int256",
              name: "answer",
              type: "int256",
            },
            {
              internalType: "uint256",
              name: "startedAt",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "updatedAt",
              type: "uint256",
            },
            {
              internalType: "uint80",
              name: "answeredInRound",
              type: "uint80",
            },
          ],
          stateMutability: "pure",
          type: "function",
        },
        {
          inputs: [],
          name: "latestRoundData",
          outputs: [
            {
              internalType: "uint80",
              name: "roundId",
              type: "uint80",
            },
            {
              internalType: "int256",
              name: "answer",
              type: "int256",
            },
            {
              internalType: "uint256",
              name: "startedAt",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "updatedAt",
              type: "uint256",
            },
            {
              internalType: "uint80",
              name: "answeredInRound",
              type: "uint80",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "version",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "pure",
          type: "function",
        },
      ],
      inheritedFunctions: {
        decimals:
          "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol",
        description:
          "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol",
        getRoundData:
          "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol",
        latestRoundData:
          "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol",
        version:
          "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol",
      },
    },
    SimpleERC20: {
      address: "0xf1D2ABFDB8142A1E37C256ac43E92e8B04e29e3A",
      abi: [
        {
          inputs: [
            {
              internalType: "string",
              name: "name",
              type: "string",
            },
            {
              internalType: "string",
              name: "symbol",
              type: "string",
            },
            {
              internalType: "uint256",
              name: "initialSupply",
              type: "uint256",
            },
          ],
          stateMutability: "nonpayable",
          type: "constructor",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "owner",
              type: "address",
            },
            {
              indexed: true,
              internalType: "address",
              name: "spender",
              type: "address",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "value",
              type: "uint256",
            },
          ],
          name: "Approval",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "from",
              type: "address",
            },
            {
              indexed: true,
              internalType: "address",
              name: "to",
              type: "address",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "value",
              type: "uint256",
            },
          ],
          name: "Transfer",
          type: "event",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address",
            },
            {
              internalType: "address",
              name: "spender",
              type: "address",
            },
          ],
          name: "allowance",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "spender",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "amount",
              type: "uint256",
            },
          ],
          name: "approve",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "account",
              type: "address",
            },
          ],
          name: "balanceOf",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "sender",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "amount",
              type: "uint256",
            },
          ],
          name: "burn",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "decimals",
          outputs: [
            {
              internalType: "uint8",
              name: "",
              type: "uint8",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "spender",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "subtractedValue",
              type: "uint256",
            },
          ],
          name: "decreaseAllowance",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "spender",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "addedValue",
              type: "uint256",
            },
          ],
          name: "increaseAllowance",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "amount",
              type: "uint256",
            },
          ],
          name: "mint",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "name",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "owner",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_owner",
              type: "address",
            },
          ],
          name: "setOwner",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "symbol",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "totalSupply",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "amount",
              type: "uint256",
            },
          ],
          name: "transfer",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "from",
              type: "address",
            },
            {
              internalType: "address",
              name: "to",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "amount",
              type: "uint256",
            },
          ],
          name: "transferFrom",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
        },
      ],
      inheritedFunctions: {
        allowance: "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        approve: "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        balanceOf: "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        decimals: "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        decreaseAllowance: "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        increaseAllowance: "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        name: "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        symbol: "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        totalSupply: "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        transfer: "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        transferFrom: "@openzeppelin/contracts/token/ERC20/ERC20.sol",
      },
    },
  },
  11155111: {
    Committer: {
      address: "0xb365Ad4228B32e3983c2692711B512f4E48f1b61",
      abi: [
        {
          inputs: [
            {
              internalType: "uint256",
              name: "targetChainId",
              type: "uint256",
            },
          ],
          stateMutability: "nonpayable",
          type: "constructor",
        },
        {
          inputs: [],
          name: "BROADCAST_CHAIN_ID",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "TARGET_CHAIN_ID",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "data",
              type: "bytes",
            },
          ],
          name: "_generateCommitment",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "latestCommitment",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "nonce",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
      ],
      inheritedFunctions: {},
    },
    ETFIssuingChain: {
      address: "0xb7979b6D6ff00E34Fb7b2823e825ba16232C3551",
      abi: [
        {
          inputs: [
            {
              internalType: "uint32",
              name: "_mainChain",
              type: "uint32",
            },
            {
              internalType: "uint32",
              name: "_chainId",
              type: "uint32",
            },
            {
              components: [
                {
                  internalType: "address",
                  name: "_address",
                  type: "address",
                },
                {
                  internalType: "uint256",
                  name: "_quantity",
                  type: "uint256",
                },
                {
                  internalType: "uint32",
                  name: "_chainId",
                  type: "uint32",
                },
                {
                  internalType: "address",
                  name: "_contributor",
                  type: "address",
                },
                {
                  internalType: "address",
                  name: "_aggregator",
                  type: "address",
                },
              ],
              internalType: "struct TokenQuantity[]",
              name: "_requiredTokens",
              type: "tuple[]",
            },
            {
              internalType: "address",
              name: "_hashi",
              type: "address",
            },
            {
              internalType: "address",
              name: "_hyperlaneAdapter",
              type: "address",
            },
            {
              internalType: "address",
              name: "_hyperlaneReporter",
              type: "address",
            },
            {
              internalType: "address",
              name: "_yahoAddress",
              type: "address",
            },
            {
              internalType: "address",
              name: "_etfToken",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "_etfTokenPerVault",
              type: "uint256",
            },
          ],
          stateMutability: "nonpayable",
          type: "constructor",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "uint256",
              name: "_vaultId",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "address",
              name: "_address",
              type: "address",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "_quantity",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "uint32",
              name: "_chainId",
              type: "uint32",
            },
            {
              indexed: false,
              internalType: "address",
              name: "_contributor",
              type: "address",
            },
          ],
          name: "Deposit",
          type: "event",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          name: "accountContributionsPerVault",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          name: "addressToToken",
          outputs: [
            {
              internalType: "address",
              name: "_address",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "_quantity",
              type: "uint256",
            },
            {
              internalType: "uint32",
              name: "_chainId",
              type: "uint32",
            },
            {
              internalType: "address",
              name: "_contributor",
              type: "address",
            },
            {
              internalType: "address",
              name: "_aggregator",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_vaultId",
              type: "uint256",
            },
            {
              components: [
                {
                  internalType: "uint256",
                  name: "blockNumber",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "nonce",
                  type: "uint256",
                },
                {
                  internalType: "bytes",
                  name: "blockHeader",
                  type: "bytes",
                },
                {
                  internalType: "bytes32",
                  name: "storageRoot",
                  type: "bytes32",
                },
                {
                  internalType: "bytes",
                  name: "accountProof",
                  type: "bytes",
                },
                {
                  internalType: "bytes",
                  name: "storageProof",
                  type: "bytes",
                },
              ],
              internalType: "struct Proof",
              name: "proof",
              type: "tuple",
            },
          ],
          name: "burn",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "chainId",
          outputs: [
            {
              internalType: "uint32",
              name: "",
              type: "uint32",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              components: [
                {
                  internalType: "uint256",
                  name: "vaultId",
                  type: "uint256",
                },
                {
                  components: [
                    {
                      internalType: "address",
                      name: "_address",
                      type: "address",
                    },
                    {
                      internalType: "uint256",
                      name: "_quantity",
                      type: "uint256",
                    },
                    {
                      internalType: "uint32",
                      name: "_chainId",
                      type: "uint32",
                    },
                    {
                      internalType: "address",
                      name: "_contributor",
                      type: "address",
                    },
                    {
                      internalType: "address",
                      name: "_aggregator",
                      type: "address",
                    },
                  ],
                  internalType: "struct TokenQuantity[]",
                  name: "tokens",
                  type: "tuple[]",
                },
              ],
              internalType: "struct DepositInfo",
              name: "_depositInfo",
              type: "tuple",
            },
          ],
          name: "deposit",
          outputs: [],
          stateMutability: "payable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "contract IReporter[]",
              name: "reporters",
              type: "address[]",
            },
            {
              internalType: "contract IAdapter[]",
              name: "adapters",
              type: "address[]",
            },
          ],
          name: "dispatchCommitment",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "etfToken",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "etfTokenPerVault",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              components: [
                {
                  internalType: "address",
                  name: "_address",
                  type: "address",
                },
                {
                  internalType: "uint256",
                  name: "_quantity",
                  type: "uint256",
                },
                {
                  internalType: "uint32",
                  name: "_chainId",
                  type: "uint32",
                },
                {
                  internalType: "address",
                  name: "_contributor",
                  type: "address",
                },
                {
                  internalType: "address",
                  name: "_aggregator",
                  type: "address",
                },
              ],
              internalType: "struct TokenQuantity",
              name: "_tokenQuantity",
              type: "tuple",
            },
          ],
          name: "getIndexForDepositInfo",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "getRequiredTokens",
          outputs: [
            {
              components: [
                {
                  internalType: "address",
                  name: "_address",
                  type: "address",
                },
                {
                  internalType: "uint256",
                  name: "_quantity",
                  type: "uint256",
                },
                {
                  internalType: "uint32",
                  name: "_chainId",
                  type: "uint32",
                },
                {
                  internalType: "address",
                  name: "_contributor",
                  type: "address",
                },
                {
                  internalType: "address",
                  name: "_aggregator",
                  type: "address",
                },
              ],
              internalType: "struct TokenQuantity[]",
              name: "",
              type: "tuple[]",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_vaultId",
              type: "uint256",
            },
          ],
          name: "getVault",
          outputs: [
            {
              components: [
                {
                  components: [
                    {
                      internalType: "address",
                      name: "_address",
                      type: "address",
                    },
                    {
                      internalType: "uint256",
                      name: "_quantity",
                      type: "uint256",
                    },
                    {
                      internalType: "uint32",
                      name: "_chainId",
                      type: "uint32",
                    },
                    {
                      internalType: "address",
                      name: "_contributor",
                      type: "address",
                    },
                    {
                      internalType: "address",
                      name: "_aggregator",
                      type: "address",
                    },
                  ],
                  internalType: "struct TokenQuantity[]",
                  name: "_tokens",
                  type: "tuple[]",
                },
                {
                  internalType: "enum VaultState",
                  name: "state",
                  type: "uint8",
                },
              ],
              internalType: "struct Vault",
              name: "",
              type: "tuple",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "getVaultStates",
          outputs: [
            {
              internalType: "enum VaultState[]",
              name: "",
              type: "uint8[]",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint32",
              name: "_origin",
              type: "uint32",
            },
            {
              internalType: "bytes32",
              name: "_sender",
              type: "bytes32",
            },
            {
              internalType: "bytes",
              name: "_message",
              type: "bytes",
            },
          ],
          name: "handle",
          outputs: [],
          stateMutability: "payable",
          type: "function",
        },
        {
          inputs: [],
          name: "isMainChain",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "latestCommitment",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "mainChainId",
          outputs: [
            {
              internalType: "uint32",
              name: "",
              type: "uint32",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "mainChainLock",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          name: "receivedMessages",
          outputs: [
            {
              internalType: "uint32",
              name: "",
              type: "uint32",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          name: "requiredTokens",
          outputs: [
            {
              internalType: "address",
              name: "_address",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "_quantity",
              type: "uint256",
            },
            {
              internalType: "uint32",
              name: "_chainId",
              type: "uint32",
            },
            {
              internalType: "address",
              name: "_contributor",
              type: "address",
            },
            {
              internalType: "address",
              name: "_aggregator",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_vaultId",
              type: "uint256",
            },
            {
              internalType: "bytes32",
              name: "mainChainLastCommitment",
              type: "bytes32",
            },
            {
              components: [
                {
                  internalType: "uint256",
                  name: "blockNumber",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "nonce",
                  type: "uint256",
                },
                {
                  internalType: "bytes",
                  name: "blockHeader",
                  type: "bytes",
                },
                {
                  internalType: "bytes32",
                  name: "storageRoot",
                  type: "bytes32",
                },
                {
                  internalType: "bytes",
                  name: "accountProof",
                  type: "bytes",
                },
                {
                  internalType: "bytes",
                  name: "storageProof",
                  type: "bytes",
                },
              ],
              internalType: "struct Proof",
              name: "proof",
              type: "tuple",
            },
          ],
          name: "secureBurn",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_sideChainLock",
              type: "address",
            },
            {
              internalType: "uint32",
              name: "_sideChainId",
              type: "uint32",
            },
            {
              internalType: "address",
              name: "_outbox",
              type: "address",
            },
            {
              internalType: "address",
              name: "_securityModule",
              type: "address",
            },
          ],
          name: "setMainChainParams",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_mainChainLock",
              type: "address",
            },
            {
              internalType: "address",
              name: "_outbox",
              type: "address",
            },
            {
              internalType: "address",
              name: "_securityModule",
              type: "address",
            },
          ],
          name: "setSideChainParams",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_vaultId",
              type: "uint256",
            },
            {
              internalType: "enum VaultState",
              name: "_state",
              type: "uint8",
            },
          ],
          name: "setVaultState",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "sideChainId",
          outputs: [
            {
              internalType: "uint32",
              name: "",
              type: "uint32",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "sideChainLock",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "updateCommitment",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          name: "vaults",
          outputs: [
            {
              internalType: "enum VaultState",
              name: "state",
              type: "uint8",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
      ],
      inheritedFunctions: {},
    },
    Prover: {
      address: "0x17A5e7695A052816E06Fd5013A95482643D5a65c",
      abi: [
        {
          inputs: [
            {
              internalType: "uint256",
              name: "sourceChainId",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "commitmentsSlot",
              type: "uint256",
            },
            {
              internalType: "address",
              name: "giriGiriBashi",
              type: "address",
            },
          ],
          stateMutability: "nonpayable",
          type: "constructor",
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "accountRlp",
              type: "bytes",
            },
          ],
          name: "InvalidAccountRlp",
          type: "error",
        },
        {
          inputs: [],
          name: "InvalidAccountStorageRoot",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "blockHeaderHash",
              type: "bytes32",
            },
            {
              internalType: "bytes32",
              name: "expectedBlockHeaderHash",
              type: "bytes32",
            },
          ],
          name: "InvalidBlockHeader",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "latestCommitment",
              type: "bytes32",
            },
            {
              internalType: "bytes32",
              name: "expectedLatestCommitment",
              type: "bytes32",
            },
          ],
          name: "InvalidLatestCommitment",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "nonce",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "expectedNonce",
              type: "uint256",
            },
          ],
          name: "InvalidNonce",
          type: "error",
        },
        {
          inputs: [],
          name: "ACCOUNT",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "COMMITMENTS_SLOT",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "GIRI_GIRI_BASHI",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "SOURCE_CHAIN_ID",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              components: [
                {
                  internalType: "uint256",
                  name: "blockNumber",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "nonce",
                  type: "uint256",
                },
                {
                  internalType: "bytes",
                  name: "blockHeader",
                  type: "bytes",
                },
                {
                  internalType: "bytes32",
                  name: "storageRoot",
                  type: "bytes32",
                },
                {
                  internalType: "bytes",
                  name: "accountProof",
                  type: "bytes",
                },
                {
                  internalType: "bytes",
                  name: "storageProof",
                  type: "bytes",
                },
              ],
              internalType: "struct Proof",
              name: "proof",
              type: "tuple",
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes",
            },
          ],
          name: "_verifyProof",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "expectedNonce",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "account",
              type: "address",
            },
          ],
          name: "setAccount",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
      ],
      inheritedFunctions: {},
    },
    SimpleERC20: {
      address: "0x3A9A620b1E8B151A575c067605150347887819E4",
      abi: [
        {
          inputs: [
            {
              internalType: "string",
              name: "name",
              type: "string",
            },
            {
              internalType: "string",
              name: "symbol",
              type: "string",
            },
            {
              internalType: "uint256",
              name: "initialSupply",
              type: "uint256",
            },
          ],
          stateMutability: "nonpayable",
          type: "constructor",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "owner",
              type: "address",
            },
            {
              indexed: true,
              internalType: "address",
              name: "spender",
              type: "address",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "value",
              type: "uint256",
            },
          ],
          name: "Approval",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "from",
              type: "address",
            },
            {
              indexed: true,
              internalType: "address",
              name: "to",
              type: "address",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "value",
              type: "uint256",
            },
          ],
          name: "Transfer",
          type: "event",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address",
            },
            {
              internalType: "address",
              name: "spender",
              type: "address",
            },
          ],
          name: "allowance",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "spender",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "amount",
              type: "uint256",
            },
          ],
          name: "approve",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "account",
              type: "address",
            },
          ],
          name: "balanceOf",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "sender",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "amount",
              type: "uint256",
            },
          ],
          name: "burn",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "decimals",
          outputs: [
            {
              internalType: "uint8",
              name: "",
              type: "uint8",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "spender",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "subtractedValue",
              type: "uint256",
            },
          ],
          name: "decreaseAllowance",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "spender",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "addedValue",
              type: "uint256",
            },
          ],
          name: "increaseAllowance",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "amount",
              type: "uint256",
            },
          ],
          name: "mint",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "name",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "owner",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_owner",
              type: "address",
            },
          ],
          name: "setOwner",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "symbol",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "totalSupply",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "amount",
              type: "uint256",
            },
          ],
          name: "transfer",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "from",
              type: "address",
            },
            {
              internalType: "address",
              name: "to",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "amount",
              type: "uint256",
            },
          ],
          name: "transferFrom",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
        },
      ],
      inheritedFunctions: {
        allowance: "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        approve: "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        balanceOf: "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        decimals: "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        decreaseAllowance: "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        increaseAllowance: "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        name: "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        symbol: "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        totalSupply: "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        transfer: "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        transferFrom: "@openzeppelin/contracts/token/ERC20/ERC20.sol",
      },
    },
  },
} as const;

export default deployedContracts satisfies GenericContractsDeclaration;
