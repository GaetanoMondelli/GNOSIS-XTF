{
  "address": "0xAf775F72fC4158e4A4bD6EA4B389B09DF556BD46",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "headerStorage",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "yaho",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "hyperlaneMailbox",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DomainNotAvailable",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "expectedYaho",
          "type": "address"
        }
      ],
      "name": "NotYaho",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "targetChainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "contract IAdapter",
          "name": "adapter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "blockHeader",
          "type": "bytes32"
        }
      ],
      "name": "BlockDispatched",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "domain",
          "type": "uint32"
        }
      ],
      "name": "DomainSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "targetChainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "contract IAdapter",
          "name": "adapter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "messageId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "messageHash",
          "type": "bytes32"
        }
      ],
      "name": "MessageDispatched",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "HEADER_STORAGE",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HYPERLANE_MAILBOX",
      "outputs": [
        {
          "internalType": "contract IMailbox",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROVIDER",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "YAHO",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "targetChainId",
          "type": "uint256"
        },
        {
          "internalType": "contract IAdapter",
          "name": "adapter",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "blockNumbers",
          "type": "uint256[]"
        }
      ],
      "name": "dispatchBlocks",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "targetChainId",
          "type": "uint256"
        },
        {
          "internalType": "contract IAdapter",
          "name": "adapter",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "messageIds",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "messageHashes",
          "type": "bytes32[]"
        }
      ],
      "name": "dispatchMessages",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "domains",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "domain",
          "type": "uint32"
        }
      ],
      "name": "setDomainByChainId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfc4a76f0add73f9a19dbcce8d95762d3892f228e2d87627bc732957aa903bc1a",
  "receipt": {
    "to": null,
    "from": "0x2a1F5eB3e84e58e6F1e565306298B9dE1273f203",
    "contractAddress": "0xAf775F72fC4158e4A4bD6EA4B389B09DF556BD46",
    "transactionIndex": 0,
    "gasUsed": "722145",
    "logsBloom": "0x
    "blockHash": "0x5c4cee4aec12df7406f0e6748fd852d7bbbaaaef5b15300d667efc00eeb0d6f5",
    "transactionHash": "0xfc4a76f0add73f9a19dbcce8d95762d3892f228e2d87627bc732957aa903bc1a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9364237,
        "transactionHash": "0xfc4a76f0add73f9a19dbcce8d95762d3892f228e2d87627bc732957aa903bc1a",
        "address": "0xAf775F72fC4158e4A4bD6EA4B389B09DF556BD46",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002a1f5eb3e84e58e6f1e565306298b9de1273f203"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x5c4cee4aec12df7406f0e6748fd852d7bbbaaaef5b15300d667efc00eeb0d6f5"
      }
    ],
    "blockNumber": 9364237,
    "cumulativeGasUsed": "722145",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x690878fB6118d99882c6B27e495E2f07f6df3b2b",
    "0x73a7d1B252300b2e2e9a1119D1E490C6F9bf9c9B",
    "0xC946BF8e51E6861BEf8831a458cF174771a777F7"
  ],
  "numDeployments": 5,
  "solcInputHash": "960947c8ec317e86ce562757e19b2848",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"headerStorage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"yaho\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"hyperlaneMailbox\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DomainNotAvailable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expectedYaho\",\"type\":\"address\"}],\"name\":\"NotYaho\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IAdapter\",\"name\":\"adapter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHeader\",\"type\":\"bytes32\"}],\"name\":\"BlockDispatched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"}],\"name\":\"DomainSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IAdapter\",\"name\":\"adapter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"messageId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"}],\"name\":\"MessageDispatched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HEADER_STORAGE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HYPERLANE_MAILBOX\",\"outputs\":[{\"internalType\":\"contract IMailbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROVIDER\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"YAHO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"contract IAdapter\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"blockNumbers\",\"type\":\"uint256[]\"}],\"name\":\"dispatchBlocks\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"contract IAdapter\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"messageIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"messageHashes\",\"type\":\"bytes32[]\"}],\"name\":\"dispatchMessages\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"domains\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"}],\"name\":\"setDomainByChainId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"BlockDispatched(uint256,address,uint256,bytes32)\":{\"details\":\"Emitted when a block is dispatched to another chain.\",\"params\":{\"adapter\":\"- The adapter address associated with the dispatched block.\",\"blockHeader\":\"- The dispatched block header as a bytes32 value.\",\"blockNumber\":\"- The block number associated with the dispatched block.\",\"targetChainId\":\"- The target chain's identifier associated with the dispatched block.\"}},\"MessageDispatched(uint256,address,uint256,bytes32)\":{\"details\":\"Emitted when a message is dispatched to another chain.\",\"params\":{\"adapter\":\"- The adapter address associated with the dispatched message.\",\"messageHash\":\"- The dispatched message hash as a bytes32 value.\",\"messageId\":\"- The message identifier associated with the dispatched message.\",\"targetChainId\":\"- The target chain's identifier associated with the dispatched message.\"}}},\"kind\":\"dev\",\"methods\":{\"dispatchBlocks(uint256,address,uint256[])\":{\"details\":\"Dispatches blocks to a given adapter on the target chaib.\",\"params\":{\"adapter\":\"- The adapter instance to use.\",\"blockNumbers\":\"- An array of Uint256 block numbers to dispatch.\",\"targetChainId\":\"- The target chain's Uint256 identifier.\"},\"returns\":{\"_0\":\"result - The result returned by the adapter as bytes.\"}},\"dispatchMessages(uint256,address,uint256[],bytes32[])\":{\"details\":\"Dispatches messages to a target chain using the specified adapter.\",\"params\":{\"adapter\":\"- The adapter instance to use.\",\"messageHashes\":\"- An array of bytes32 message hashes.\",\"messageIds\":\"- An array of Uint256 message identifiers.\",\"targetChainId\":\"- The target chain's Uint256 identifier.\"},\"returns\":{\"_0\":\"result - The result returned by the adapter as bytes.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"dispatchBlocks(uint256,address,uint256[])\":{\"notice\":\"blockNumbers must include block numbers that are greater than or equal to (currentBlock - 256) due to EVM limitations.\"},\"dispatchMessages(uint256,address,uint256[],bytes32[])\":{\"notice\":\"This function can be called only by Yaho\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/adapeters/Hyperlane/HyperlaneReporter.sol\":\"HyperlaneReporter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@hyperlane-xyz/core/contracts/interfaces/IInterchainSecurityModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\ninterface IInterchainSecurityModule {\\n    enum Types {\\n        UNUSED,\\n        ROUTING,\\n        AGGREGATION,\\n        LEGACY_MULTISIG,\\n        MERKLE_ROOT_MULTISIG,\\n        MESSAGE_ID_MULTISIG,\\n        NULL, // used with relayer carrying no metadata\\n        CCIP_READ\\n    }\\n\\n    /**\\n     * @notice Returns an enum that represents the type of security model\\n     * encoded by this ISM.\\n     * @dev Relayers infer how to fetch and format metadata.\\n     */\\n    function moduleType() external view returns (uint8);\\n\\n    /**\\n     * @notice Defines a security model responsible for verifying interchain\\n     * messages based on the provided metadata.\\n     * @param _metadata Off-chain metadata provided by a relayer, specific to\\n     * the security model encoded by the module (e.g. validator signatures)\\n     * @param _message Hyperlane encoded interchain message\\n     * @return True if the message was verified\\n     */\\n    function verify(\\n        bytes calldata _metadata,\\n        bytes calldata _message\\n    ) external returns (bool);\\n}\\n\\ninterface ISpecifiesInterchainSecurityModule {\\n    function interchainSecurityModule()\\n        external\\n        view\\n        returns (IInterchainSecurityModule);\\n}\\n\",\"keccak256\":\"0xd144a00a15eef18012f8dae28ca1a7d965012f88ff4a07382a172ae6e02811ce\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/interfaces/IMailbox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.8.0;\\n\\nimport {IInterchainSecurityModule} from \\\"./IInterchainSecurityModule.sol\\\";\\nimport {IPostDispatchHook} from \\\"./hooks/IPostDispatchHook.sol\\\";\\n\\ninterface IMailbox {\\n    // ============ Events ============\\n    /**\\n     * @notice Emitted when a new message is dispatched via Hyperlane\\n     * @param sender The address that dispatched the message\\n     * @param destination The destination domain of the message\\n     * @param recipient The message recipient address on `destination`\\n     * @param message Raw bytes of message\\n     */\\n    event Dispatch(\\n        address indexed sender,\\n        uint32 indexed destination,\\n        bytes32 indexed recipient,\\n        bytes message\\n    );\\n\\n    /**\\n     * @notice Emitted when a new message is dispatched via Hyperlane\\n     * @param messageId The unique message identifier\\n     */\\n    event DispatchId(bytes32 indexed messageId);\\n\\n    /**\\n     * @notice Emitted when a Hyperlane message is processed\\n     * @param messageId The unique message identifier\\n     */\\n    event ProcessId(bytes32 indexed messageId);\\n\\n    /**\\n     * @notice Emitted when a Hyperlane message is delivered\\n     * @param origin The origin domain of the message\\n     * @param sender The message sender address on `origin`\\n     * @param recipient The address that handled the message\\n     */\\n    event Process(\\n        uint32 indexed origin,\\n        bytes32 indexed sender,\\n        address indexed recipient\\n    );\\n\\n    function localDomain() external view returns (uint32);\\n\\n    function delivered(bytes32 messageId) external view returns (bool);\\n\\n    function defaultIsm() external view returns (IInterchainSecurityModule);\\n\\n    function defaultHook() external view returns (IPostDispatchHook);\\n\\n    function requiredHook() external view returns (IPostDispatchHook);\\n\\n    function latestDispatchedId() external view returns (bytes32);\\n\\n    function dispatch(\\n        uint32 destinationDomain,\\n        bytes32 recipientAddress,\\n        bytes calldata messageBody\\n    ) external payable returns (bytes32 messageId);\\n\\n    function quoteDispatch(\\n        uint32 destinationDomain,\\n        bytes32 recipientAddress,\\n        bytes calldata messageBody\\n    ) external view returns (uint256 fee);\\n\\n    function dispatch(\\n        uint32 destinationDomain,\\n        bytes32 recipientAddress,\\n        bytes calldata body,\\n        bytes calldata defaultHookMetadata\\n    ) external payable returns (bytes32 messageId);\\n\\n    function quoteDispatch(\\n        uint32 destinationDomain,\\n        bytes32 recipientAddress,\\n        bytes calldata messageBody,\\n        bytes calldata defaultHookMetadata\\n    ) external view returns (uint256 fee);\\n\\n    function dispatch(\\n        uint32 destinationDomain,\\n        bytes32 recipientAddress,\\n        bytes calldata body,\\n        bytes calldata customHookMetadata,\\n        IPostDispatchHook customHook\\n    ) external payable returns (bytes32 messageId);\\n\\n    function quoteDispatch(\\n        uint32 destinationDomain,\\n        bytes32 recipientAddress,\\n        bytes calldata messageBody,\\n        bytes calldata customHookMetadata,\\n        IPostDispatchHook customHook\\n    ) external view returns (uint256 fee);\\n\\n    function process(\\n        bytes calldata metadata,\\n        bytes calldata message\\n    ) external payable;\\n\\n    function recipientIsm(\\n        address recipient\\n    ) external view returns (IInterchainSecurityModule module);\\n}\\n\",\"keccak256\":\"0x9cd728ba304279775818f8c7b4c02f8c5dd2b28e051ec466dbe36129be01a6ee\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/interfaces/hooks/IPostDispatchHook.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.8.0;\\n\\n/*@@@@@@@       @@@@@@@@@\\n @@@@@@@@@       @@@@@@@@@\\n  @@@@@@@@@       @@@@@@@@@\\n   @@@@@@@@@       @@@@@@@@@\\n    @@@@@@@@@@@@@@@@@@@@@@@@@\\n     @@@@@  HYPERLANE  @@@@@@@\\n    @@@@@@@@@@@@@@@@@@@@@@@@@\\n   @@@@@@@@@       @@@@@@@@@\\n  @@@@@@@@@       @@@@@@@@@\\n @@@@@@@@@       @@@@@@@@@\\n@@@@@@@@@       @@@@@@@@*/\\n\\ninterface IPostDispatchHook {\\n    enum Types {\\n        UNUSED,\\n        ROUTING,\\n        AGGREGATION,\\n        MERKLE_TREE,\\n        INTERCHAIN_GAS_PAYMASTER,\\n        FALLBACK_ROUTING,\\n        ID_AUTH_ISM,\\n        PAUSABLE,\\n        PROTOCOL_FEE,\\n        LAYER_ZERO_V1\\n    }\\n\\n    /**\\n     * @notice Returns an enum that represents the type of hook\\n     */\\n    function hookType() external view returns (uint8);\\n\\n    /**\\n     * @notice Returns whether the hook supports metadata\\n     * @param metadata metadata\\n     * @return Whether the hook supports metadata\\n     */\\n    function supportsMetadata(\\n        bytes calldata metadata\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Post action after a message is dispatched via the Mailbox\\n     * @param metadata The metadata required for the hook\\n     * @param message The message passed from the Mailbox.dispatch() call\\n     */\\n    function postDispatch(\\n        bytes calldata metadata,\\n        bytes calldata message\\n    ) external payable;\\n\\n    /**\\n     * @notice Compute the payment required by the postDispatch call\\n     * @param metadata The metadata required for the hook\\n     * @param message The message passed from the Mailbox.dispatch() call\\n     * @return Quoted payment for the postDispatch call\\n     */\\n    function quoteDispatch(\\n        bytes calldata metadata,\\n        bytes calldata message\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x29201c5597a02b691be7815554a9a2815198bb8b76b061c1f4f6daf77d5d1d75\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/libs/TypeCasts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\nlibrary TypeCasts {\\n    // alignment preserving cast\\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\\n        return bytes32(uint256(uint160(_addr)));\\n    }\\n\\n    // alignment preserving cast\\n    function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\\n        return address(uint160(uint256(_buf)));\\n    }\\n}\\n\",\"keccak256\":\"0x7e3608c35e1109fc137cea688760f9c10223b1e7d110be113ad44ff716974ead\",\"license\":\"MIT OR Apache-2.0\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/adapeters/Hyperlane/HyperlaneReporter.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IMailbox } from \\\"@hyperlane-xyz/core/contracts/interfaces/IMailbox.sol\\\";\\nimport { TypeCasts } from \\\"@hyperlane-xyz/core/contracts/libs/TypeCasts.sol\\\";\\nimport { Reporter } from \\\"../Reporter.sol\\\";\\n\\ncontract HyperlaneReporter is Reporter, Ownable {\\n    using TypeCasts for address;\\n\\n    string public constant PROVIDER = \\\"hyperlane\\\";\\n    IMailbox public immutable HYPERLANE_MAILBOX;\\n\\n    mapping(uint256 => uint32) public domains;\\n\\n    error DomainNotAvailable();\\n\\n    event DomainSet(uint256 indexed chainId, uint32 indexed domain);\\n\\n    constructor(address headerStorage, address yaho, address hyperlaneMailbox) Reporter(headerStorage, yaho) {\\n        HYPERLANE_MAILBOX = IMailbox(hyperlaneMailbox);\\n    }\\n\\n    function setDomainByChainId(uint256 chainId, uint32 domain) external onlyOwner {\\n        domains[chainId] = domain;\\n        emit DomainSet(chainId, domain);\\n    }\\n\\n    function _dispatch(\\n        uint256 targetChainId,\\n        address adapter,\\n        uint256[] memory ids,\\n        bytes32[] memory hashes\\n    ) internal override returns (bytes32) {\\n        uint32 targetDomain = domains[targetChainId];\\n        if (targetDomain == 0) revert DomainNotAvailable();\\n        bytes memory payload = abi.encode(ids, hashes);\\n        \\t\\tuint256 fee = HYPERLANE_MAILBOX.quoteDispatch(\\n\\t\\t\\ttargetDomain, adapter.addressToBytes32(), payload\\n\\t\\t);\\n        if (fee > msg.value) revert(\\\"Insufficient fee\\\");\\n        HYPERLANE_MAILBOX.dispatch{ value: fee }(targetDomain, adapter.addressToBytes32(), payload);\\n\\n        return bytes32(0);\\n    }\\n}\\n\",\"keccak256\":\"0xcc0aa487252a86545e758e0318c92f3184d60f61d0729c940623c0efc67ec2fa\",\"license\":\"LGPL-3.0-only\"},\"contracts/adapeters/Reporter.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.20;\\n\\nimport { IHeaderStorage } from \\\"../interfaces/IHeaderStorage.sol\\\";\\nimport { IReporter } from \\\"../interfaces/IReporter.sol\\\";\\nimport { IAdapter } from \\\"../interfaces/IAdapter.sol\\\";\\n\\nabstract contract Reporter is IReporter {\\n    address public immutable HEADER_STORAGE;\\n    address public immutable YAHO;\\n\\n    modifier onlyYaho() {\\n        if (msg.sender != YAHO) revert NotYaho(msg.sender, YAHO);\\n        _;\\n    }\\n\\n    constructor(address headerStorage, address yaho) {\\n        HEADER_STORAGE = headerStorage;\\n        YAHO = yaho;\\n    }\\n\\n    /// @inheritdoc IReporter\\n    function dispatchBlocks(\\n        uint256 targetChainId,\\n        IAdapter adapter,\\n        uint256[] memory blockNumbers\\n    ) external payable returns (bytes32) {\\n        bytes32[] memory blockHeaders = IHeaderStorage(HEADER_STORAGE).storeBlockHeaders(blockNumbers);\\n        for (uint256 i = 0; i < blockNumbers.length; ) {\\n            emit BlockDispatched(targetChainId, adapter, blockNumbers[i], blockHeaders[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return _dispatch(targetChainId, address(adapter), blockNumbers, blockHeaders);\\n    }\\n\\n    /// @inheritdoc IReporter\\n    function dispatchMessages(\\n        uint256 targetChainId,\\n        IAdapter adapter,\\n        uint256[] memory messageIds,\\n        bytes32[] memory messageHashes\\n    ) external payable onlyYaho returns (bytes32) {\\n        for (uint256 i = 0; i < messageIds.length; ) {\\n            emit MessageDispatched(targetChainId, adapter, messageIds[i], messageHashes[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return _dispatch(targetChainId, address(adapter), messageIds, messageHashes);\\n    }\\n\\n    function _dispatch(\\n        uint256 targetChainId,\\n        address adapter,\\n        uint256[] memory messageIds,\\n        bytes32[] memory messageHashes\\n    ) internal virtual returns (bytes32);\\n}\\n\",\"keccak256\":\"0x3f8081c63b672a227b7d8daa6d8b497207f7fc83429d5cf18da34d4de5514d51\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IAdapter\\n */\\ninterface IAdapter {\\n    error ConflictingBlockHeader(uint256 blockNumber, bytes32 blockHash, bytes32 storedBlockHash);\\n    error InvalidBlockHeaderLength(uint256 length);\\n    error InvalidBlockHeaderRLP();\\n\\n    /**\\n     * @dev Emitted when a hash is stored.\\n     * @param id - The ID of the stored hash.\\n     * @param hash - The stored hash as bytes32 values.\\n     */\\n    event HashStored(uint256 indexed id, bytes32 indexed hash);\\n\\n    /**\\n     * @dev Returns the hash for a given ID.\\n     * @param domain - Identifier for the domain to query.\\n     * @param id - Identifier for the ID to query.\\n     * @return hash Bytes32 hash for the given ID on the given domain.\\n     * @notice MUST return bytes32(0) if the hash is not present.\\n     */\\n    function getHash(uint256 domain, uint256 id) external view returns (bytes32 hash);\\n}\\n\",\"keccak256\":\"0xc3c6fca20c390f619072fe34bde40b91ceca4bbd1627a892af627b2e10f8a38d\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IHeaderStorage.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IHeaderStorage\\n */\\ninterface IHeaderStorage {\\n    error HeaderOutOfRange(uint256 blockNumber);\\n\\n    /**\\n     * @dev Emitted when a block header is stored.\\n     * @param blockNumber - The block number associated with the stored header.\\n     * @param blockHeader - The stored block header as a bytes32 value.\\n     */\\n    event HeaderStored(uint256 indexed blockNumber, bytes32 indexed blockHeader);\\n\\n    /**\\n     * @dev Retrieves the stored block header for a specific block number.\\n     * @param blockNumber - The block number as a uint256 value.\\n     * @return The block header as a bytes32 value.\\n     */\\n    function headers(uint256 blockNumber) external view returns (bytes32);\\n\\n    /**\\n     * @dev Stores and returns the header for the given block.\\n     * @param blockNumber - Block number.\\n     * @return blockHeader - Block header stored.\\n     * @notice Reverts if the given block header was not previously stored and is now out of range.\\n     */\\n    function storeBlockHeader(uint256 blockNumber) external returns (bytes32);\\n\\n    /**\\n     * @dev Stores and returns the header for an array of given blocks.\\n     * @param blockNumbers - Array of block numbers.\\n     * @return blockHeaders - Array of block headers stored.\\n     * @notice Reverts if the given block header was not previously stored and is now out of range.\\n     */\\n    function storeBlockHeaders(uint256[] memory blockNumbers) external returns (bytes32[] memory);\\n}\\n\",\"keccak256\":\"0x8ac05c0f5a8e9afbe26337ff6858d3597ff540cc3e365fd8a98fc861643a9eb3\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IReporter.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport { IAdapter } from \\\"./IAdapter.sol\\\";\\n\\ninterface IReporter {\\n    error NotYaho(address sender, address expectedYaho);\\n\\n    /**\\n     * @dev Emitted when a block is dispatched to another chain.\\n     * @param targetChainId - The target chain's identifier associated with the dispatched block.\\n     * @param adapter - The adapter address associated with the dispatched block.\\n     * @param blockNumber - The block number associated with the dispatched block.\\n     * @param blockHeader - The dispatched block header as a bytes32 value.\\n     */\\n    event BlockDispatched(\\n        uint256 indexed targetChainId,\\n        IAdapter adapter,\\n        uint256 indexed blockNumber,\\n        bytes32 blockHeader\\n    );\\n\\n    /**\\n     * @dev Emitted when a message is dispatched to another chain.\\n     * @param targetChainId - The target chain's identifier associated with the dispatched message.\\n     * @param adapter - The adapter address associated with the dispatched message.\\n     * @param messageId - The message identifier associated with the dispatched message.\\n     * @param messageHash - The dispatched message hash as a bytes32 value.\\n     */\\n    event MessageDispatched(\\n        uint256 indexed targetChainId,\\n        IAdapter adapter,\\n        uint256 indexed messageId,\\n        bytes32 messageHash\\n    );\\n\\n    /**\\n     * @dev Dispatches blocks to a given adapter on the target chaib.\\n     * @param targetChainId - The target chain's Uint256 identifier.\\n     * @param adapter - The adapter instance to use.\\n     * @param blockNumbers - An array of Uint256 block numbers to dispatch.\\n     * @notice blockNumbers must include block numbers that are greater than or equal to (currentBlock - 256) due to EVM limitations.\\n     * @return result - The result returned by the adapter as bytes.\\n     */\\n    function dispatchBlocks(\\n        uint256 targetChainId,\\n        IAdapter adapter,\\n        uint256[] memory blockNumbers\\n    ) external payable returns (bytes32);\\n\\n    /**\\n     * @dev Dispatches messages to a target chain using the specified adapter.\\n     * @param targetChainId - The target chain's Uint256 identifier.\\n     * @param adapter - The adapter instance to use.\\n     * @param messageIds - An array of Uint256 message identifiers.\\n     * @param messageHashes - An array of bytes32 message hashes.\\n     * @notice This function can be called only by Yaho\\n     * @return result - The result returned by the adapter as bytes.\\n     */\\n    function dispatchMessages(\\n        uint256 targetChainId,\\n        IAdapter adapter,\\n        uint256[] memory messageIds,\\n        bytes32[] memory messageHashes\\n    ) external payable returns (bytes32);\\n}\\n\",\"keccak256\":\"0xda2089ab19b5517907b3ea017e2d6bb83bd38eb687eca8867f1bec7533e3d0a3\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60e0346100f357601f610cc638819003918201601f19168301916001600160401b038311848410176100f8578084926060946040528339810103126100f3576100478161010e565b9061006060406100596020840161010e565b920161010e565b60809290925260a05260008054336001600160a01b0319821681178355604051936001600160a01b039390928416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a31660c052610ba39081610123823960805181818161043f01526106ab015260a0518181816102740152610393015260c0518181816101aa01526109ba0152f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036100f35756fe608060408181526004908136101561001657600080fd5b600092833560e01c908162d34411146106cf575080631073f93d1461068b57806320888ebc1461062057806366cf8fab146105f2578063715018a61461058c5780638da5cb5b146105665780639ac41b98146103b75780639e83334b14610373578063b4a90ff7146101d2578063c751fbfb1461018a5763f2fde38b1461009c57600080fd5b34610186576020366003190112610186578135916001600160a01b0391828416809403610182576100cb61085e565b831561011957505082548273ffffffffffffffffffffffffffffffffffffffff198216178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8480fd5b8280fd5b8382346101ce57816003193601126101ce57602090516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b5080fd5b509160803660031901126103705781356101ea6107cd565b67ffffffffffffffff926044358481116101ce5761020b9036908701610800565b90606435948511610370573660238601121561037057848601359061022f826107e8565b9561023c89519788610755565b82875260209260248489019160051b8301019136831161036c576024859101915b83831061035c57505050506001600160a01b0396877f0000000000000000000000000000000000000000000000000000000000000000168033036103265750505b825181101561030e57806102b4600192856108ea565b51867fd05d8e0013365e4d441d98e6459477af9dd142c5cf590e87ca927921993b6c626103056102e4858c6108ea565b518d516001600160a01b038b16815260208101919091529081906040820190565b0390a30161029e565b50959461031f949391921690610939565b9051908152f35b604492508951917fce98f81500000000000000000000000000000000000000000000000000000000835233908301526024820152fd5b823581529181019185910161025d565b8380fd5b80fd5b8382346101ce57816003193601126101ce57602090516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b50919060603660031901126101ce5780356103d06107cd565b67ffffffffffffffff92604435848111610562576103f19036908301610800565b908651957fceee6e55000000000000000000000000000000000000000000000000000000008752602080928801528661042d60248201856108b6565b039681816001600160a01b039981838c7f0000000000000000000000000000000000000000000000000000000000000000165af19687156105585782976104c1575b50505b825181101561030e5780610488600192856108ea565b51867fdfde4db189423e6f919a3d3cb1306e03dc18b4e72bc0c6c13fe07c58b395335c6104b86102e4858c6108ea565b0390a301610472565b909196503d8088843e6104d48184610755565b820191838184031261055457805191821161055457019080601f83011215610550578151610501816107e8565b9261050e8b519485610755565b818452848085019260051b82010192831161054c5784809101915b83831061053c575050505094388061046f565b8251815291810191859101610529565b8880fd5b8680fd5b8780fd5b89513d84823e3d90fd5b8580fd5b8382346101ce57816003193601126101ce576001600160a01b0360209254169051908152f35b83346103705780600319360112610370576105a561085e565b806001600160a01b03815473ffffffffffffffffffffffffffffffffffffffff1981168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b509034610186576020366003190112610186578160209363ffffffff92358152600185522054169051908152f35b509034610186578160031936011261018657356024359163ffffffff831680930361036c5761064d61085e565b81845260016020528320805463ffffffff1916831790557fd9c9e56222fe2b65a0022908f00615ccf568720470e84992da2945e08eae3bd48380a380f35b8382346101ce57816003193601126101ce57602090516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b92939050346103705780600319360112610370578183019083821067ffffffffffffffff831117610742575061073e93508152600982527f68797065726c616e65000000000000000000000000000000000000000000000060208301525191829160208352602083019061078d565b0390f35b80604186634e487b7160e01b6024945252fd5b90601f8019910116810190811067ffffffffffffffff82111761077757604052565b634e487b7160e01b600052604160045260246000fd5b919082519283825260005b8481106107b9575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610798565b602435906001600160a01b03821682036107e357565b600080fd5b67ffffffffffffffff81116107775760051b60200190565b81601f820112156107e357803591610817836107e8565b926108256040519485610755565b808452602092838086019260051b8201019283116107e3578301905b82821061084f575050505090565b81358152908301908301610841565b6001600160a01b0360005416330361087257565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b90815180825260208080930193019160005b8281106108d6575050505090565b8351855293810193928101926001016108c8565b80518210156108fe5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b610936939263ffffffff6060931682526020820152816040820152019061078d565b90565b9291600093845260019160209383855260409363ffffffff8588205416918215610b445790610976948651958691888a84015260608301906108b6565b92601f19928383860301898401528980835196878152019201908b5b8b878210610b2e57505050506109af935003908101855284610755565b6001600160a01b03807f0000000000000000000000000000000000000000000000000000000000000000169216908451907f9c42bd18000000000000000000000000000000000000000000000000000000008252868280610a1588878660048501610914565b0381875afa918215610b24578892610af5575b50348211610ab25791869391869593610a6f9751978895869485937ffa31de0100000000000000000000000000000000000000000000000000000000855260048501610914565b03925af1908115610aa95750610a8457505090565b813d8311610aa2575b610a978183610755565b810103126103705790565b503d610a8d565b513d85823e3d90fd5b60648787519062461bcd60e51b82526004820152601060248201527f496e73756666696369656e7420666565000000000000000000000000000000006044820152fd5b9091508681813d8311610b1d575b610b0d8183610755565b8101031261055457519038610a28565b503d610b03565b86513d8a823e3d90fd5b835185528a955093840193909201918101610992565b600486517f5cfc0eb6000000000000000000000000000000000000000000000000000000008152fdfea264697066735822122063829a7a656fca0b71effc200e3fe3fa3b70e978f0662fb637046b30b717748164736f6c63430008140033",
  "deployedBytecode": "0x608060408181526004908136101561001657600080fd5b600092833560e01c908162d34411146106cf575080631073f93d1461068b57806320888ebc1461062057806366cf8fab146105f2578063715018a61461058c5780638da5cb5b146105665780639ac41b98146103b75780639e83334b14610373578063b4a90ff7146101d2578063c751fbfb1461018a5763f2fde38b1461009c57600080fd5b34610186576020366003190112610186578135916001600160a01b0391828416809403610182576100cb61085e565b831561011957505082548273ffffffffffffffffffffffffffffffffffffffff198216178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8480fd5b8280fd5b8382346101ce57816003193601126101ce57602090516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b5080fd5b509160803660031901126103705781356101ea6107cd565b67ffffffffffffffff926044358481116101ce5761020b9036908701610800565b90606435948511610370573660238601121561037057848601359061022f826107e8565b9561023c89519788610755565b82875260209260248489019160051b8301019136831161036c576024859101915b83831061035c57505050506001600160a01b0396877f0000000000000000000000000000000000000000000000000000000000000000168033036103265750505b825181101561030e57806102b4600192856108ea565b51867fd05d8e0013365e4d441d98e6459477af9dd142c5cf590e87ca927921993b6c626103056102e4858c6108ea565b518d516001600160a01b038b16815260208101919091529081906040820190565b0390a30161029e565b50959461031f949391921690610939565b9051908152f35b604492508951917fce98f81500000000000000000000000000000000000000000000000000000000835233908301526024820152fd5b823581529181019185910161025d565b8380fd5b80fd5b8382346101ce57816003193601126101ce57602090516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b50919060603660031901126101ce5780356103d06107cd565b67ffffffffffffffff92604435848111610562576103f19036908301610800565b908651957fceee6e55000000000000000000000000000000000000000000000000000000008752602080928801528661042d60248201856108b6565b039681816001600160a01b039981838c7f0000000000000000000000000000000000000000000000000000000000000000165af19687156105585782976104c1575b50505b825181101561030e5780610488600192856108ea565b51867fdfde4db189423e6f919a3d3cb1306e03dc18b4e72bc0c6c13fe07c58b395335c6104b86102e4858c6108ea565b0390a301610472565b909196503d8088843e6104d48184610755565b820191838184031261055457805191821161055457019080601f83011215610550578151610501816107e8565b9261050e8b519485610755565b818452848085019260051b82010192831161054c5784809101915b83831061053c575050505094388061046f565b8251815291810191859101610529565b8880fd5b8680fd5b8780fd5b89513d84823e3d90fd5b8580fd5b8382346101ce57816003193601126101ce576001600160a01b0360209254169051908152f35b83346103705780600319360112610370576105a561085e565b806001600160a01b03815473ffffffffffffffffffffffffffffffffffffffff1981168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b509034610186576020366003190112610186578160209363ffffffff92358152600185522054169051908152f35b509034610186578160031936011261018657356024359163ffffffff831680930361036c5761064d61085e565b81845260016020528320805463ffffffff1916831790557fd9c9e56222fe2b65a0022908f00615ccf568720470e84992da2945e08eae3bd48380a380f35b8382346101ce57816003193601126101ce57602090516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b92939050346103705780600319360112610370578183019083821067ffffffffffffffff831117610742575061073e93508152600982527f68797065726c616e65000000000000000000000000000000000000000000000060208301525191829160208352602083019061078d565b0390f35b80604186634e487b7160e01b6024945252fd5b90601f8019910116810190811067ffffffffffffffff82111761077757604052565b634e487b7160e01b600052604160045260246000fd5b919082519283825260005b8481106107b9575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610798565b602435906001600160a01b03821682036107e357565b600080fd5b67ffffffffffffffff81116107775760051b60200190565b81601f820112156107e357803591610817836107e8565b926108256040519485610755565b808452602092838086019260051b8201019283116107e3578301905b82821061084f575050505090565b81358152908301908301610841565b6001600160a01b0360005416330361087257565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b90815180825260208080930193019160005b8281106108d6575050505090565b8351855293810193928101926001016108c8565b80518210156108fe5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b610936939263ffffffff6060931682526020820152816040820152019061078d565b90565b9291600093845260019160209383855260409363ffffffff8588205416918215610b445790610976948651958691888a84015260608301906108b6565b92601f19928383860301898401528980835196878152019201908b5b8b878210610b2e57505050506109af935003908101855284610755565b6001600160a01b03807f0000000000000000000000000000000000000000000000000000000000000000169216908451907f9c42bd18000000000000000000000000000000000000000000000000000000008252868280610a1588878660048501610914565b0381875afa918215610b24578892610af5575b50348211610ab25791869391869593610a6f9751978895869485937ffa31de0100000000000000000000000000000000000000000000000000000000855260048501610914565b03925af1908115610aa95750610a8457505090565b813d8311610aa2575b610a978183610755565b810103126103705790565b503d610a8d565b513d85823e3d90fd5b60648787519062461bcd60e51b82526004820152601060248201527f496e73756666696369656e7420666565000000000000000000000000000000006044820152fd5b9091508681813d8311610b1d575b610b0d8183610755565b8101031261055457519038610a28565b503d610b03565b86513d8a823e3d90fd5b835185528a955093840193909201918101610992565b600486517f5cfc0eb6000000000000000000000000000000000000000000000000000000008152fdfea264697066735822122063829a7a656fca0b71effc200e3fe3fa3b70e978f0662fb637046b30b717748164736f6c63430008140033",
  "devdoc": {
    "events": {
      "BlockDispatched(uint256,address,uint256,bytes32)": {
        "details": "Emitted when a block is dispatched to another chain.",
        "params": {
          "adapter": "- The adapter address associated with the dispatched block.",
          "blockHeader": "- The dispatched block header as a bytes32 value.",
          "blockNumber": "- The block number associated with the dispatched block.",
          "targetChainId": "- The target chain's identifier associated with the dispatched block."
        }
      },
      "MessageDispatched(uint256,address,uint256,bytes32)": {
        "details": "Emitted when a message is dispatched to another chain.",
        "params": {
          "adapter": "- The adapter address associated with the dispatched message.",
          "messageHash": "- The dispatched message hash as a bytes32 value.",
          "messageId": "- The message identifier associated with the dispatched message.",
          "targetChainId": "- The target chain's identifier associated with the dispatched message."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "dispatchBlocks(uint256,address,uint256[])": {
        "details": "Dispatches blocks to a given adapter on the target chaib.",
        "params": {
          "adapter": "- The adapter instance to use.",
          "blockNumbers": "- An array of Uint256 block numbers to dispatch.",
          "targetChainId": "- The target chain's Uint256 identifier."
        },
        "returns": {
          "_0": "result - The result returned by the adapter as bytes."
        }
      },
      "dispatchMessages(uint256,address,uint256[],bytes32[])": {
        "details": "Dispatches messages to a target chain using the specified adapter.",
        "params": {
          "adapter": "- The adapter instance to use.",
          "messageHashes": "- An array of bytes32 message hashes.",
          "messageIds": "- An array of Uint256 message identifiers.",
          "targetChainId": "- The target chain's Uint256 identifier."
        },
        "returns": {
          "_0": "result - The result returned by the adapter as bytes."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "dispatchBlocks(uint256,address,uint256[])": {
        "notice": "blockNumbers must include block numbers that are greater than or equal to (currentBlock - 256) due to EVM limitations."
      },
      "dispatchMessages(uint256,address,uint256[],bytes32[])": {
        "notice": "This function can be called only by Yaho"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 296,
        "contract": "contracts/adapeters/Hyperlane/HyperlaneReporter.sol:HyperlaneReporter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 450,
        "contract": "contracts/adapeters/Hyperlane/HyperlaneReporter.sol:HyperlaneReporter",
        "label": "domains",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_uint32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_uint32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}