{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "@hyperlane-xyz/core/contracts/interfaces/hooks/IPostDispatchHook.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.8.0;\n\n/*@@@@@@@       @@@@@@@@@\n @@@@@@@@@       @@@@@@@@@\n  @@@@@@@@@       @@@@@@@@@\n   @@@@@@@@@       @@@@@@@@@\n    @@@@@@@@@@@@@@@@@@@@@@@@@\n     @@@@@  HYPERLANE  @@@@@@@\n    @@@@@@@@@@@@@@@@@@@@@@@@@\n   @@@@@@@@@       @@@@@@@@@\n  @@@@@@@@@       @@@@@@@@@\n @@@@@@@@@       @@@@@@@@@\n@@@@@@@@@       @@@@@@@@*/\n\ninterface IPostDispatchHook {\n    enum Types {\n        UNUSED,\n        ROUTING,\n        AGGREGATION,\n        MERKLE_TREE,\n        INTERCHAIN_GAS_PAYMASTER,\n        FALLBACK_ROUTING,\n        ID_AUTH_ISM,\n        PAUSABLE,\n        PROTOCOL_FEE,\n        LAYER_ZERO_V1\n    }\n\n    /**\n     * @notice Returns an enum that represents the type of hook\n     */\n    function hookType() external view returns (uint8);\n\n    /**\n     * @notice Returns whether the hook supports metadata\n     * @param metadata metadata\n     * @return Whether the hook supports metadata\n     */\n    function supportsMetadata(\n        bytes calldata metadata\n    ) external view returns (bool);\n\n    /**\n     * @notice Post action after a message is dispatched via the Mailbox\n     * @param metadata The metadata required for the hook\n     * @param message The message passed from the Mailbox.dispatch() call\n     */\n    function postDispatch(\n        bytes calldata metadata,\n        bytes calldata message\n    ) external payable;\n\n    /**\n     * @notice Compute the payment required by the postDispatch call\n     * @param metadata The metadata required for the hook\n     * @param message The message passed from the Mailbox.dispatch() call\n     * @return Quoted payment for the postDispatch call\n     */\n    function quoteDispatch(\n        bytes calldata metadata,\n        bytes calldata message\n    ) external view returns (uint256);\n}\n"
    },
    "@hyperlane-xyz/core/contracts/interfaces/IInterchainSecurityModule.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.6.11;\n\ninterface IInterchainSecurityModule {\n    enum Types {\n        UNUSED,\n        ROUTING,\n        AGGREGATION,\n        LEGACY_MULTISIG,\n        MERKLE_ROOT_MULTISIG,\n        MESSAGE_ID_MULTISIG,\n        NULL, // used with relayer carrying no metadata\n        CCIP_READ\n    }\n\n    /**\n     * @notice Returns an enum that represents the type of security model\n     * encoded by this ISM.\n     * @dev Relayers infer how to fetch and format metadata.\n     */\n    function moduleType() external view returns (uint8);\n\n    /**\n     * @notice Defines a security model responsible for verifying interchain\n     * messages based on the provided metadata.\n     * @param _metadata Off-chain metadata provided by a relayer, specific to\n     * the security model encoded by the module (e.g. validator signatures)\n     * @param _message Hyperlane encoded interchain message\n     * @return True if the message was verified\n     */\n    function verify(\n        bytes calldata _metadata,\n        bytes calldata _message\n    ) external returns (bool);\n}\n\ninterface ISpecifiesInterchainSecurityModule {\n    function interchainSecurityModule()\n        external\n        view\n        returns (IInterchainSecurityModule);\n}\n"
    },
    "@hyperlane-xyz/core/contracts/interfaces/IMailbox.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.8.0;\n\nimport {IInterchainSecurityModule} from \"./IInterchainSecurityModule.sol\";\nimport {IPostDispatchHook} from \"./hooks/IPostDispatchHook.sol\";\n\ninterface IMailbox {\n    // ============ Events ============\n    /**\n     * @notice Emitted when a new message is dispatched via Hyperlane\n     * @param sender The address that dispatched the message\n     * @param destination The destination domain of the message\n     * @param recipient The message recipient address on `destination`\n     * @param message Raw bytes of message\n     */\n    event Dispatch(\n        address indexed sender,\n        uint32 indexed destination,\n        bytes32 indexed recipient,\n        bytes message\n    );\n\n    /**\n     * @notice Emitted when a new message is dispatched via Hyperlane\n     * @param messageId The unique message identifier\n     */\n    event DispatchId(bytes32 indexed messageId);\n\n    /**\n     * @notice Emitted when a Hyperlane message is processed\n     * @param messageId The unique message identifier\n     */\n    event ProcessId(bytes32 indexed messageId);\n\n    /**\n     * @notice Emitted when a Hyperlane message is delivered\n     * @param origin The origin domain of the message\n     * @param sender The message sender address on `origin`\n     * @param recipient The address that handled the message\n     */\n    event Process(\n        uint32 indexed origin,\n        bytes32 indexed sender,\n        address indexed recipient\n    );\n\n    function localDomain() external view returns (uint32);\n\n    function delivered(bytes32 messageId) external view returns (bool);\n\n    function defaultIsm() external view returns (IInterchainSecurityModule);\n\n    function defaultHook() external view returns (IPostDispatchHook);\n\n    function requiredHook() external view returns (IPostDispatchHook);\n\n    function latestDispatchedId() external view returns (bytes32);\n\n    function dispatch(\n        uint32 destinationDomain,\n        bytes32 recipientAddress,\n        bytes calldata messageBody\n    ) external payable returns (bytes32 messageId);\n\n    function quoteDispatch(\n        uint32 destinationDomain,\n        bytes32 recipientAddress,\n        bytes calldata messageBody\n    ) external view returns (uint256 fee);\n\n    function dispatch(\n        uint32 destinationDomain,\n        bytes32 recipientAddress,\n        bytes calldata body,\n        bytes calldata defaultHookMetadata\n    ) external payable returns (bytes32 messageId);\n\n    function quoteDispatch(\n        uint32 destinationDomain,\n        bytes32 recipientAddress,\n        bytes calldata messageBody,\n        bytes calldata defaultHookMetadata\n    ) external view returns (uint256 fee);\n\n    function dispatch(\n        uint32 destinationDomain,\n        bytes32 recipientAddress,\n        bytes calldata body,\n        bytes calldata customHookMetadata,\n        IPostDispatchHook customHook\n    ) external payable returns (bytes32 messageId);\n\n    function quoteDispatch(\n        uint32 destinationDomain,\n        bytes32 recipientAddress,\n        bytes calldata messageBody,\n        bytes calldata customHookMetadata,\n        IPostDispatchHook customHook\n    ) external view returns (uint256 fee);\n\n    function process(\n        bytes calldata metadata,\n        bytes calldata message\n    ) external payable;\n\n    function recipientIsm(\n        address recipient\n    ) external view returns (IInterchainSecurityModule module);\n}\n"
    },
    "@hyperlane-xyz/core/contracts/interfaces/IMessageRecipient.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.6.11;\n\ninterface IMessageRecipient {\n    function handle(\n        uint32 _origin,\n        bytes32 _sender,\n        bytes calldata _message\n    ) external payable;\n}\n"
    },
    "@hyperlane-xyz/core/contracts/libs/TypeCasts.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.6.11;\n\nlibrary TypeCasts {\n    // alignment preserving cast\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(_addr)));\n    }\n\n    // alignment preserving cast\n    function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\n        return address(uint160(uint256(_buf)));\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/adapeters/Adapter.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.20;\n\nimport { IAdapter } from \"../interfaces/IAdapter.sol\";\n\nabstract contract Adapter is IAdapter {\n    mapping(uint256 => mapping(uint256 => bytes32)) private _hashes;\n\n    /// @inheritdoc IAdapter\n    function getHash(uint256 domain, uint256 id) public view returns (bytes32) {\n        return _hashes[domain][id];\n    }\n\n    function _storeHashes(uint256 domain, uint256[] memory ids, bytes32[] memory hashes) internal {\n        for (uint256 i = 0; i < ids.length; ) {\n            _storeHash(domain, ids[i], hashes[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function _storeHash(uint256 domain, uint256 id, bytes32 hash) internal {\n        bytes32 currentHash = _hashes[domain][id];\n        if (currentHash != hash) {\n            _hashes[domain][id] = hash;\n            emit HashStored(id, hash);\n        }\n    }\n}\n"
    },
    "contracts/adapeters/BlockHashAdapter.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.20;\n\nimport { RLPReader } from \"solidity-rlp/contracts/RLPReader.sol\";\nimport { Adapter } from \"./Adapter.sol\";\nimport { IBlockHashAdapter } from \"../interfaces/IBlockHashAdapter.sol\";\n\nabstract contract BlockHashAdapter is IBlockHashAdapter, Adapter {\n    using RLPReader for RLPReader.RLPItem;\n\n    /// @inheritdoc IBlockHashAdapter\n    function proveAncestralBlockHashes(uint256 chainId, bytes[] memory blockHeaders) external {\n        for (uint256 i = 0; i < blockHeaders.length; i++) {\n            RLPReader.RLPItem memory blockHeaderRLP = RLPReader.toRlpItem(blockHeaders[i]);\n\n            if (!blockHeaderRLP.isList()) revert InvalidBlockHeaderRLP();\n\n            RLPReader.RLPItem[] memory blockHeaderContent = blockHeaderRLP.toList();\n\n            // A block header should have between 15 and 17 elements (baseFee and withdrawalsRoot have been added later)\n            if (blockHeaderContent.length < 15 || blockHeaderContent.length > 17)\n                revert InvalidBlockHeaderLength(blockHeaderContent.length);\n\n            bytes32 blockParent = bytes32(blockHeaderContent[0].toUint());\n            uint256 blockNumber = uint256(blockHeaderContent[8].toUint());\n\n            bytes32 blockHash = keccak256(blockHeaders[i]);\n            bytes32 storedBlockHash = getHash(chainId, blockNumber);\n\n            if (blockHash != storedBlockHash) revert ConflictingBlockHeader(blockNumber, blockHash, storedBlockHash);\n\n            _storeHash(chainId, blockNumber - 1, blockParent);\n        }\n    }\n}\n"
    },
    "contracts/adapeters/Hyperlane/HyperlaneAdapter.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.20;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { IMessageRecipient } from \"@hyperlane-xyz/core/contracts/interfaces/IMessageRecipient.sol\";\nimport { IInterchainSecurityModule } from \"@hyperlane-xyz/core/contracts/interfaces/IInterchainSecurityModule.sol\";\nimport { BlockHashAdapter } from \"../BlockHashAdapter.sol\";\n\ncontract HyperlaneAdapter is BlockHashAdapter, Ownable, IMessageRecipient {\n    string public constant PROVIDER = \"hyperlane\";\n\n    address public immutable HYPERLANE_MAILBOX;\n\n    mapping(uint32 => bytes32) public enabledReporters;\n    mapping(uint32 => uint256) public chainIds;\n\n    error UnauthorizedHyperlaneReceive();\n\n    event ReporterSet(uint256 indexed chainId, uint32 indexed domain, bytes32 indexed reporter);\n\n    constructor(address hyperlaneMailbox) {\n        HYPERLANE_MAILBOX = hyperlaneMailbox;\n    }\n\n    function handle(uint32 origin, bytes32 sender, bytes calldata message) external payable {\n        if (msg.sender != HYPERLANE_MAILBOX || enabledReporters[origin] != sender)\n            revert UnauthorizedHyperlaneReceive();\n        uint256 sourceChainId = chainIds[origin];\n        (uint256[] memory ids, bytes32[] memory hashes) = abi.decode(message, (uint256[], bytes32[]));\n        _storeHashes(sourceChainId, ids, hashes);\n    }\n\n    function setReporterByChain(uint256 chainId, uint32 domain, bytes32 reporter) external onlyOwner {\n        enabledReporters[domain] = reporter;\n        chainIds[domain] = chainId;\n        emit ReporterSet(chainId, domain, reporter);\n    }\n}\n"
    },
    "contracts/adapeters/Hyperlane/HyperlaneReporter.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.20;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { IMailbox } from \"@hyperlane-xyz/core/contracts/interfaces/IMailbox.sol\";\nimport { TypeCasts } from \"@hyperlane-xyz/core/contracts/libs/TypeCasts.sol\";\nimport { Reporter } from \"../Reporter.sol\";\n\ncontract HyperlaneReporter is Reporter, Ownable {\n    using TypeCasts for address;\n\n    string public constant PROVIDER = \"hyperlane\";\n    IMailbox public immutable HYPERLANE_MAILBOX;\n\n    mapping(uint256 => uint32) public domains;\n\n    error DomainNotAvailable();\n\n    event DomainSet(uint256 indexed chainId, uint32 indexed domain);\n\n    constructor(address headerStorage, address yaho, address hyperlaneMailbox) Reporter(headerStorage, yaho) {\n        HYPERLANE_MAILBOX = IMailbox(hyperlaneMailbox);\n    }\n\n    function setDomainByChainId(uint256 chainId, uint32 domain) external onlyOwner {\n        domains[chainId] = domain;\n        emit DomainSet(chainId, domain);\n    }\n\n    function _dispatch(\n        uint256 targetChainId,\n        address adapter,\n        uint256[] memory ids,\n        bytes32[] memory hashes\n    ) internal override returns (bytes32) {\n        uint32 targetDomain = domains[targetChainId];\n        if (targetDomain == 0) revert DomainNotAvailable();\n        bytes memory payload = abi.encode(ids, hashes);\n        HYPERLANE_MAILBOX.dispatch{ value: msg.value }(targetDomain, adapter.addressToBytes32(), payload);\n\n        return bytes32(0);\n    }\n}\n"
    },
    "contracts/adapeters/Reporter.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.20;\n\nimport { IHeaderStorage } from \"../interfaces/IHeaderStorage.sol\";\nimport { IReporter } from \"../interfaces/IReporter.sol\";\nimport { IAdapter } from \"../interfaces/IAdapter.sol\";\n\nabstract contract Reporter is IReporter {\n    address public immutable HEADER_STORAGE;\n    address public immutable YAHO;\n\n    modifier onlyYaho() {\n        if (msg.sender != YAHO) revert NotYaho(msg.sender, YAHO);\n        _;\n    }\n\n    constructor(address headerStorage, address yaho) {\n        HEADER_STORAGE = headerStorage;\n        YAHO = yaho;\n    }\n\n    /// @inheritdoc IReporter\n    function dispatchBlocks(\n        uint256 targetChainId,\n        IAdapter adapter,\n        uint256[] memory blockNumbers\n    ) external payable returns (bytes32) {\n        bytes32[] memory blockHeaders = IHeaderStorage(HEADER_STORAGE).storeBlockHeaders(blockNumbers);\n        for (uint256 i = 0; i < blockNumbers.length; ) {\n            emit BlockDispatched(targetChainId, adapter, blockNumbers[i], blockHeaders[i]);\n            unchecked {\n                ++i;\n            }\n        }\n        return _dispatch(targetChainId, address(adapter), blockNumbers, blockHeaders);\n    }\n\n    /// @inheritdoc IReporter\n    function dispatchMessages(\n        uint256 targetChainId,\n        IAdapter adapter,\n        uint256[] memory messageIds,\n        bytes32[] memory messageHashes\n    ) external payable onlyYaho returns (bytes32) {\n        for (uint256 i = 0; i < messageIds.length; ) {\n            emit MessageDispatched(targetChainId, adapter, messageIds[i], messageHashes[i]);\n            unchecked {\n                ++i;\n            }\n        }\n        return _dispatch(targetChainId, address(adapter), messageIds, messageHashes);\n    }\n\n    function _dispatch(\n        uint256 targetChainId,\n        address adapter,\n        uint256[] memory messageIds,\n        bytes32[] memory messageHashes\n    ) internal virtual returns (bytes32);\n}\n"
    },
    "contracts/ETFIssuingChain.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { IERC721 } from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { ISimpleERC20 } from \"./SimpleERC20.sol\";\nimport \"@hyperlane-xyz/core/contracts/interfaces/IMailbox.sol\";\nimport { IInterchainSecurityModule } from \"@hyperlane-xyz/core/contracts/interfaces/IInterchainSecurityModule.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"hardhat/console.sol\";\n\nstruct TokenQuantity {\n\taddress _address;\n\tuint256 _quantity;\n\tuint32 _chainId;\n\taddress _contributor;\n\taddress _aggregator;\n}\n\nstruct Vault {\n\tTokenQuantity[] _tokens;\n\tVaultState state;\n}\n\nenum VaultState {\n\tEMPTY,\n\tOPEN,\n\tMINTED,\n\tBURNED\n}\n\nstruct EventInfo {\n\taddress sender;\n\tuint256 quantity;\n\tuint32 chainId;\n\taddress contributor;\n}\n\nstruct DepositInfo {\n\tuint256 vaultId;\n\tTokenQuantity[] tokens;\n}\n\ncontract ETFIssuingChain {\n\taddress public sideChainLock;\n\tuint32 public sideChainId;\n\tTokenQuantity[] public requiredTokens;\n\tmapping(address => TokenQuantity) public addressToToken;\n\tuint32 public chainId;\n\tuint32 public mainChainId;\n\n\tuint32[] public receivedMessages;\n\n\t// Siechain params\n\taddress public mainChainLock;\n\tIMailbox outbox;\n\tIInterchainSecurityModule securityModule;\n\n\t// Mainchain params\n\taddress public etfToken;\n\tuint256 public etfTokenPerVault;\n\n\tmapping(uint256 => address[]) contributorsByVault;\n\tmapping(uint256 => mapping(address => uint256))\n\t\tpublic accountContributionsPerVault;\n\n\tevent Deposit(\n\t\tuint256 _vaultId,\n\t\taddress _address,\n\t\tuint256 _quantity,\n\t\tuint32 _chainId,\n\t\taddress _contributor\n\t);\n\n\tmapping(uint256 => Vault) public vaults;\n\n\tconstructor(\n\t\tuint32 _mainChain,\n\t\tuint32 _chainId,\n\t\tTokenQuantity[] memory _requiredTokens,\n\t\taddress _etfToken,\n\t\tuint256 _etfTokenPerVault\n\t) {\n\t\tmainChainId = _mainChain;\n\t\tchainId = _chainId;\n\t\tetfToken = _etfToken;\n\t\tetfTokenPerVault = _etfTokenPerVault;\n\t\tfor (uint256 i = 0; i < _requiredTokens.length; i++) {\n\t\t\trequiredTokens.push(_requiredTokens[i]);\n\t\t\taddressToToken[_requiredTokens[i]._address] = _requiredTokens[i];\n\t\t}\n\t}\n\n\tfunction setSideChainParams(\n\t\taddress _mainChainLock,\n\t\taddress _outbox,\n\t\taddress _securityModule\n\t) public {\n\t\trequire(\n\t\t\t!isMainChain(),\n\t\t\t\"Main chain lock address cannot be set on main chain\"\n\t\t);\n\t\tmainChainLock = _mainChainLock;\n\t\toutbox = IMailbox(_outbox);\n\t\tsecurityModule = IInterchainSecurityModule(_securityModule);\n\t}\n\n\tfunction setMainChainParams(\n\t\taddress _sideChainLock,\n\t\tuint32 _sideChainId,\n\t\taddress _outbox,\n\t\taddress _securityModule\n\t) public {\n\t\trequire(\n\t\t\tisMainChain(),\n\t\t\t\"Side Chain lock address can only be set mainchain\"\n\t\t);\n\t\toutbox = IMailbox(_outbox);\n\t\tsideChainId = _sideChainId;\n\t\tsecurityModule = IInterchainSecurityModule(_securityModule);\n\t\tsideChainLock = _sideChainLock;\n\t}\n\n\tfunction getVaultStates() public view returns (VaultState[] memory) {\n\t\tVaultState[] memory states = new VaultState[](90);\n\t\tfor (uint256 i = 0; i < states.length; i++) {\n\t\t\tstates[i] = vaults[i].state;\n\t\t}\n\t\treturn states;\n\t}\n\n\tfunction getVault(uint256 _vaultId) public view returns (Vault memory) {\n\t\treturn vaults[_vaultId];\n\t}\n\n\tfunction getRequiredTokens() public view returns (TokenQuantity[] memory) {\n\t\treturn requiredTokens;\n\t}\n\n\tfunction setVaultState(uint256 _vaultId, VaultState _state) public {\n\t\tvaults[_vaultId].state = _state;\n\t}\n\n\tfunction isMainChain() public view returns (bool) {\n\t\treturn chainId == mainChainId;\n\t}\n\n\n\tfunction getIndexForDepositInfo(TokenQuantity memory _tokenQuantity) public view returns (uint256) {\n\t\t// return the index of the token in the requiredTokens array\n\t\tfor (uint256 i = 0; i < requiredTokens.length; i++) {\n\t\t\tif (requiredTokens[i]._address == _tokenQuantity._address) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n\n\tfunction _deposit(\n\t\tDepositInfo memory _depositInfo,\n\t\tuint32 _chainId\n\t) internal {\n\t\tuint256 _vaultId = _depositInfo.vaultId;\n\t\tTokenQuantity[] memory _tokens = _depositInfo.tokens;\n\t\trequire(\n\t\t\tvaults[_vaultId].state == VaultState.OPEN ||\n\t\t\t\tvaults[_vaultId].state == VaultState.EMPTY,\n\t\t\t\"Vault is not open or empty\"\n\t\t);\n\n\t\t// require(_chainId == chainId, \"ChainId does not match the contract chainId\")\n\n\t\tif (vaults[_vaultId].state == VaultState.EMPTY) {\n\t\t\tfor (uint256 i = 0; i < requiredTokens.length; i++) {\n\t\t\t\tvaults[_vaultId]._tokens.push(\n\t\t\t\t\tTokenQuantity(\n\t\t\t\t\t\trequiredTokens[i]._address,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\trequiredTokens[i]._chainId,\n\t\t\t\t\t\taddress(0),\n\t\t\t\t\t\trequiredTokens[i]._aggregator\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\t\t\tvaults[_vaultId].state = VaultState.OPEN;\n\t\t}\n\n\t\tfor (uint256 i = 0; i < _tokens.length; i++) {\n\t\t\t// if (_tokens[i]._chainId != _chainId) {\n\t\t\t// \trevert(\n\t\t\t// \t\t\"Token chainId does not match the chainId of the contract\"\n\t\t\t// \t);\n\t\t\t// }\n\t\t\tif (\n\t\t\t\t_tokens[i]._quantity + vaults[_vaultId]._tokens[i]._quantity >\n\t\t\t\taddressToToken[_tokens[i]._address]._quantity\n\t\t\t) {\n\t\t\t\trevert(\"Token quantity exceeds the required amount\");\n\t\t\t}\n\n\n\t\t\tuint256 index = getIndexForDepositInfo(_tokens[i]);\n\n\t\t\tif (_tokens[i]._chainId == _chainId) {\n\t\t\t\tIERC20(_tokens[i]._address).transferFrom(\n\t\t\t\t\t_tokens[i]._contributor,\n\t\t\t\t\taddress(this),\n\t\t\t\t\t_tokens[i]._quantity\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t\n\t\t\tvaults[_vaultId]._tokens[index]._quantity += _tokens[i]._quantity;\n\n\t\t\temit Deposit(\n\t\t\t\t_vaultId,\n\t\t\t\t_tokens[i]._address,\n\t\t\t\t_tokens[i]._quantity,\n\t\t\t\t_tokens[i]._chainId,\n\t\t\t\t_tokens[i]._contributor\n\t\t\t);\n\n\t\t\tif (isMainChain()) {\n\t\t\t\tif (accountContributionsPerVault[_vaultId][_tokens[i]._contributor] == 0) {\n\t\t\t\t\tcontributorsByVault[_vaultId].push(_tokens[i]._contributor);\n\t\t\t\t}\n\n\t\t\t\t// uint256 price = AggregatorV3Interface(_tokens[i]._aggretator).latestRoundData().answer;\n\n\t\t\t\t// (, /* uint80 roundID */ int answer, , , ) = AggregatorV3Interface(\n\t\t\t\t// \t_tokens[i]._aggregator\n\t\t\t\t// ).latestRoundData();\n\n\t\t\t\taccountContributionsPerVault[_vaultId][_tokens[i]._contributor] += _tokens[i]\n\t\t\t\t\t._quantity;\n\t\t\t}\n\t\t}\n\n\t\tfor (uint256 i = 0; i < requiredTokens.length; i++) {\n\t\t\tif (\n\t\t\t\tvaults[_vaultId]._tokens[i]._quantity <\n\t\t\t\trequiredTokens[i]._quantity\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tvaults[_vaultId].state = VaultState.MINTED;\n\n\t\tif (isMainChain()) {\n\t\t\tdistributeShares(_vaultId);\n\t\t} else {\n\t\t\tnotifyDepositToMainChain(_depositInfo);\n\t\t}\n\t}\n\n\tfunction notifyDepositToMainChain(\n\t\tDepositInfo memory _depositInfo\n\t) internal {\n\t\tbytes32 mainChainLockBytes32 = addressToBytes32(mainChainLock);\n\t\tuint256 fee = outbox.quoteDispatch(\n\t\t\tmainChainId,\n\t\t\tmainChainLockBytes32,\n\t\t\tabi.encode(_depositInfo)\n\t\t);\n\t\toutbox.dispatch{ value: fee }(\n\t\t\tmainChainId,\n\t\t\tmainChainLockBytes32,\n\t\t\tabi.encode(_depositInfo)\n\t\t);\n\t}\n\n\tfunction distributeShares(uint256 _vaultId) internal {\n\t\tuint256 totalContributions = 0;\n\t\tfor (uint256 i = 0; i < contributorsByVault[_vaultId].length; i++) {\n\t\t\ttotalContributions += accountContributionsPerVault[_vaultId][\n\t\t\t\tcontributorsByVault[_vaultId][i]\n\t\t\t];\n\t\t}\n\n\t\tfor (uint256 i = 0; i < contributorsByVault[_vaultId].length; i++) {\n\t\t\tuint256 shares = (accountContributionsPerVault[_vaultId][\n\t\t\t\tcontributorsByVault[_vaultId][i]\n\t\t\t] * etfTokenPerVault) / totalContributions;\n\t\t\tISimpleERC20(etfToken).mint(\n\t\t\t\tcontributorsByVault[_vaultId][i],\n\t\t\t\tshares\n\t\t\t);\n\t\t}\n\t}\n\n\tfunction deposit(DepositInfo memory _depositInfo) public payable {\n\t\t_deposit(_depositInfo, chainId);\n\t}\n\n\tfunction handle(\n\t\tuint32 _origin,\n\t\tbytes32 _sender,\n\t\tbytes calldata _message\n\t) external payable {\n\t\t// require(\n\t\t// \tisMainChain() && bytes32ToAddress(_sender) == sideChainLock,\n\t\t// \t\"Sender to mainChain is not the sideChainLock\"\n\t\t// );\n\n\t\t// require(\n\t\t// \t!isMainChain() && bytes32ToAddress(_sender) == mainChainLock,\n\t\t// \t\"Sender to sideChain is not the mainChainLock\"\n\t\t// );\n\n\n\t\tif(isMainChain()) {\n\t\t\tDepositInfo memory _depositInfo = abi.decode(_message, (DepositInfo));\n\t\t\t// uint32 _chainId = _depositInfo.tokens[0]._chainId;\n\t\t\t_deposit(_depositInfo, chainId);\n\t\t\treturn;\n\t\t}\n\t\telse {\n\t\t\tuint256 _vaultId = abi.decode(_message, (uint256));\n\t\t\tburn(_vaultId);\n\t\t}\n\t}\n\n\tfunction burn(uint256 _vaultId) public {\n\t\trequire(\n\t\t\tvaults[_vaultId].state == VaultState.MINTED,\n\t\t\t\"Vault is not minted\"\n\t\t);\n\t\t// require to pay back the etfToken\n\t\trequire(isMainChain(), \"Only main chain can burn\");\n\t\tISimpleERC20(etfToken).burn(msg.sender, etfTokenPerVault);\n\t\tfor (uint256 j = 0; j < vaults[_vaultId]._tokens.length; j++) {\n\t\t\tif (vaults[_vaultId]._tokens[j]._chainId == chainId) {\n\t\t\t\tIERC20(vaults[_vaultId]._tokens[j]._address).transfer(\n\t\t\t\t\tmsg.sender,\n\t\t\t\t\tvaults[_vaultId]._tokens[j]._quantity\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tvaults[_vaultId].state = VaultState.BURNED;\n\n\t\t// notify burn to sidechain\n\t\tbytes32 sideChainLockBytes32 = addressToBytes32(sideChainLock);\n\t\tuint256 fee = outbox.quoteDispatch(\n\t\t\tsideChainId,\n\t\t\tsideChainLockBytes32,\n\t\t\tabi.encode(_vaultId)\n\t\t);\n\t\toutbox.dispatch{ value: fee }(\n\t\t\tsideChainId,\n\t\t\tsideChainLockBytes32,\n\t\t\tabi.encode(_vaultId)\n\t\t);\n\t}\n\n\tfunction addressToBytes32(address _addr) internal pure returns (bytes32) {\n\t\treturn bytes32(uint256(uint160(_addr)));\n\t}\n\n\tfunction bytes32ToAddress(\n\t\tbytes32 _bytes32\n\t) internal pure returns (address) {\n\t\treturn address(uint160(uint256(_bytes32)));\n\t}\n}\n"
    },
    "contracts/ETFLockingChain.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@hyperlane-xyz/core/contracts/interfaces/IMailbox.sol\";\nimport { IInterchainSecurityModule } from \"@hyperlane-xyz/core/contracts/interfaces/IInterchainSecurityModule.sol\";\nimport { ISimpleERC20 } from \"./SimpleERC20.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"hardhat/console.sol\";\n\nstruct TokenQuantity {\n\taddress _address;\n\tuint256 _quantity;\n\tuint32 _chainId;\n\taddress _contributor;\n\taddress _aggregator;\n}\n\nstruct Vault {\n\tTokenQuantity[] _tokens;\n\tVaultState state;\n}\n\nenum VaultState {\n\tEMPTY,\n\tOPEN,\n\tMINTED,\n\tBURNED\n}\n\nstruct EventInfo {\n\taddress sender;\n\tuint256 quantity;\n\tuint32 chainId;\n\taddress contributor;\n}\n\nstruct DepositInfo {\n\tuint256 vaultId;\n\tTokenQuantity[] tokens;\n}\n\ncontract ETFLockingChain {\n\taddress public sideChainLock;\n\tTokenQuantity[] public requiredTokens;\n\tmapping(address => TokenQuantity) public addressToToken;\n\tuint32 public chainId;\n\n\taddress public mainChainLock;\n\tIMailbox outbox;\n\tIInterchainSecurityModule securityModule;\n\n\taddress public bridge;\n\n\tmapping(uint256 => address[]) contributorsByVault;\n\tmapping(uint256 => mapping(address => uint256))\n\t\tpublic accountContributionsPerVault;\n\n\tevent Deposit(\n\t\tuint256 _vaultId,\n\t\taddress _address,\n\t\tuint256 _quantity,\n\t\tuint32 _chainId,\n\t\taddress _contributor\n\t);\n\n\tmapping(uint256 => Vault) public vaults;\n\n\tconstructor(\n\t\tuint32 _chainId,\n\t\tTokenQuantity[] memory _requiredTokens,\n\t\taddress _outbox,\n\t\taddress _securityModule\n\t) {\n\t\tchainId = _chainId;\n\t\toutbox = IMailbox(_outbox);\n\t\tsecurityModule = IInterchainSecurityModule(_securityModule);\n\t\tfor (uint256 i = 0; i < _requiredTokens.length; i++) {\n\t\t\trequiredTokens.push(_requiredTokens[i]);\n\t\t\taddressToToken[_requiredTokens[i]._address] = _requiredTokens[i];\n\t\t}\n\t}\n\n\tfunction getVaultStates() public view returns (VaultState[] memory) {\n\t\tVaultState[] memory states = new VaultState[](90);\n\t\tfor (uint256 i = 0; i < states.length; i++) {\n\t\t\tstates[i] = vaults[i].state;\n\t\t}\n\t\treturn states;\n\t}\n\n\tfunction getVault(uint256 _vaultId) public view returns (Vault memory) {\n\t\treturn vaults[_vaultId];\n\t}\n\n\tfunction getRequiredTokens() public view returns (TokenQuantity[] memory) {\n\t\treturn requiredTokens;\n\t}\n\n\tfunction _deposit(\n\t\tDepositInfo memory _depositInfo,\n\t\tuint32 _chainId\n\t) internal {\n\t\tuint256 _vaultId = _depositInfo.vaultId;\n\t\tTokenQuantity[] memory _tokens = _depositInfo.tokens;\n\t\trequire(\n\t\t\tvaults[_vaultId].state == VaultState.OPEN ||\n\t\t\t\tvaults[_vaultId].state == VaultState.EMPTY,\n\t\t\t\"Vault is not open or empty\"\n\t\t);\n\n\t\t// require(_chainId == chainId, \"ChainId does not match the contract chainId\")\n\n\t\tif (vaults[_vaultId].state == VaultState.EMPTY) {\n\t\t\tfor (uint256 i = 0; i < requiredTokens.length; i++) {\n\t\t\t\tvaults[_vaultId]._tokens.push(\n\t\t\t\t\tTokenQuantity(\n\t\t\t\t\t\trequiredTokens[i]._address,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\t_chainId,\n\t\t\t\t\t\taddress(0),\n\t\t\t\t\t\trequiredTokens[i]._aggregator\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\t\t\tvaults[_vaultId].state = VaultState.OPEN;\n\t\t}\n\n\t\tfor (uint256 i = 0; i < _tokens.length; i++) {\n\t\t\tif (_tokens[i]._chainId != _chainId) {\n\t\t\t\trevert(\n\t\t\t\t\t\"Token chainId does not match the chainId of the contract\"\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (\n\t\t\t\t_tokens[i]._quantity + vaults[_vaultId]._tokens[i]._quantity >\n\t\t\t\taddressToToken[_tokens[i]._address]._quantity\n\t\t\t) {\n\t\t\t\trevert(\"Token quantity exceeds the required amount\");\n\t\t\t}\n\n\t\t\tIERC20(_tokens[i]._address).transferFrom(\n\t\t\t\t_tokens[i]._contributor,\n\t\t\t\taddress(this),\n\t\t\t\t_tokens[i]._quantity\n\t\t\t);\n\t\t\tvaults[_vaultId]._tokens[i]._quantity += _tokens[i]._quantity;\n\n\t\t\temit Deposit(\n\t\t\t\t_vaultId,\n\t\t\t\t_tokens[i]._address,\n\t\t\t\t_tokens[i]._quantity,\n\t\t\t\t_tokens[i]._chainId,\n\t\t\t\t_tokens[i]._contributor\n\t\t\t);\n\n\t\t\tif (accountContributionsPerVault[_vaultId][msg.sender] == 0) {\n\t\t\t\tcontributorsByVault[_vaultId].push(msg.sender);\n\t\t\t}\n\n\t\t\taccountContributionsPerVault[_vaultId][msg.sender] += _tokens[i]\n\t\t\t\t._quantity;\n\t\t}\n\n\t\tfor (uint256 i = 0; i < requiredTokens.length; i++) {\n\t\t\tif (\n\t\t\t\tvaults[_vaultId]._tokens[i]._quantity <\n\t\t\t\trequiredTokens[i]._quantity\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tvaults[_vaultId].state = VaultState.MINTED;\n\t}\n\n\tfunction depositAndNotify(\n\t\tDepositInfo calldata _depositInfo\n\t) public payable {\n\t\t_deposit(_depositInfo, chainId);\n\t\tbytes32 mainChainLockBytes32 = addressToBytes32(mainChainLock);\n\t\tuint256 fee = outbox.quoteDispatch(\n\t\t\tchainId,\n\t\t\tmainChainLockBytes32,\n\t\t\tabi.encode(_depositInfo)\n\t\t);\n\t\toutbox.dispatch{ value: fee }(\n\t\t\tchainId,\n\t\t\tmainChainLockBytes32,\n\t\t\tabi.encode(_depositInfo)\n\t\t);\n\t}\n\n\t// modifier that allows only bridge to execute\n\tmodifier onlyBridge() {\n\t\trequire(\n\t\t\tmsg.sender == address(securityModule),\n\t\t\t\"Only bridge can call this function\"\n\t\t);\n\t\t_;\n\t}\n\n\tfunction _burn(uint256 _vaultId, address burner) internal {\n\t\trequire(\n\t\t\tvaults[_vaultId].state == VaultState.MINTED,\n\t\t\t\"Vault is not minted\"\n\t\t);\n\n\t\tfor (uint256 j = 0; j < vaults[_vaultId]._tokens.length; j++) {\n\t\t\tIERC20(vaults[_vaultId]._tokens[j]._address).transfer(\n\t\t\t\tburner,\n\t\t\t\tvaults[_vaultId]._tokens[j]._quantity\n\t\t\t);\n\t\t}\n\t\tvaults[_vaultId].state = VaultState.BURNED;\n\t}\n\n\tfunction handle(\n\t\tuint32 _origin,\n\t\tbytes32 _sender,\n\t\tbytes calldata _message\n\t) external payable {\n\t\trequire(\n\t\t\tbytes32ToAddress(_sender) == sideChainLock,\n\t\t\t\"Sender is not the sideChainLock\"\n\t\t);\n\n\t\tDepositInfo memory _depositInfo = abi.decode(_message, (DepositInfo));\n\t\tuint32 _chainId = _depositInfo.tokens[0]._chainId;\n\t\taddress burner = _depositInfo.tokens[0]._contributor;\n\t\t_burn(_depositInfo.vaultId, burner);\n\t}\n\n\tfunction addressToBytes32(address _addr) internal pure returns (bytes32) {\n\t\treturn bytes32(uint256(uint160(_addr)));\n\t}\n\n\tfunction bytes32ToAddress(\n\t\tbytes32 _bytes32\n\t) internal pure returns (address) {\n\t\treturn address(uint160(uint256(_bytes32)));\n\t}\n}\n"
    },
    "contracts/Hashi.sol": {
      "content": "/*\n                  ███▄▄▄                               ,▄▄███▄\n                  ████▀`                      ,╓▄▄▄████████████▄\n                  ███▌             ,╓▄▄▄▄█████████▀▀▀▀▀▀╙└`\n                  ███▌       ▀▀▀▀▀▀▀▀▀▀╙└└-  ████L\n                  ███▌                      ████`               ╓██▄\n                  ███▌    ╓▄    ╓╓╓╓╓╓╓╓╓╓╓████▄╓╓╓╓╓╓╓╓╓╓╓╓╓╓▄███████▄\n                  ███▌  ▄█████▄ ▀▀▀▀▀▀▀▀▀▀████▀▀▀▀▀▀██▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀\n         ███████████████████████_       ▄███▀        ██µ\n                 ▐███▌                ,███▀           ▀██µ\n                 ████▌               ▄███▌,           ▄████▄\n                ▐████▌             ▄██▀████▀▀▀▀▀▀▀▀▀▀█████▀███▄\n               ,█████▌          ,▄██▀_ ▓███          ▐███_  ▀████▄▄\n               ██████▌,       ▄██▀_    ▓███          ▐███_    ▀███████▄-\n              ███▀███▌▀███▄  ╙\"        ▓███▄▄▄▄▄▄▄▄▄▄▄███_      `▀███└\n             ▄██^ ███▌  ^████▄         ▓███▀▀▀▀▀▀▀▀▀▀▀███_         `\n            ▄██_  ███▌    ╙███         ▓██▀          └▀▀_        ▄,\n           ██▀    ███▌      ▀└ ▐███▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄████▄µ\n          ██^     ███▌         ▐███▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀██████▀\n        ╓█▀       ███▌         ▐███⌐      µ          ╓          ▐███\n        ▀         ███▌         ▐███⌐      ███▄▄▄▄▄▄▄████▄       ▐███\n                  ███▌         ▐███⌐      ████▀▀▀▀▀▀▀████▀      ▐███\n                  ███▌         ▐███⌐      ███▌      J███M       ▐███\n                  ███▌         ▐███⌐      ███▌      J███M       ▐███\n                  ███▌         ▐███⌐      ████▄▄▄▄▄▄████M       ▐███\n                  ███▌         ▐███⌐      ███▌      ▐███M       ▐███\n                  ███▌         ▐███⌐      ███▌       ▀▀_        ████\n                  ███▌         ▐███⌐      ▀▀_             ▀▀▀███████\n                  ███^         ▐███_                          ▐██▀▀　\n\n                                           Made with ❤️ by Gnosis Guild\n*/\n// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.20;\n\nimport { IAdapter } from \"./interfaces/IAdapter.sol\";\nimport { IHashi } from \"./interfaces/IHashi.sol\";\n\ncontract Hashi is IHashi {\n    /// @inheritdoc IHashi\n    function checkHashWithThresholdFromAdapters(\n        uint256 domain,\n        uint256 id,\n        uint256 threshold,\n        IAdapter[] calldata adapters\n    ) external view returns (bool) {\n        if (adapters.length == 0) revert NoAdaptersGiven();\n        if (threshold > adapters.length || threshold == 0) revert InvalidThreshold(threshold, adapters.length);\n\n        bytes32[] memory hashes = new bytes32[](adapters.length);\n        for (uint256 i = 0; i < adapters.length; ) {\n            hashes[i] = adapters[i].getHash(domain, id);\n            unchecked {\n                ++i;\n            }\n        }\n\n        for (uint256 i = 0; i < hashes.length; ) {\n            if (i > hashes.length - threshold) break;\n\n            bytes32 baseHash = hashes[i];\n            if (baseHash == bytes32(0)) {\n                unchecked {\n                    ++i;\n                }\n                continue;\n            }\n\n            uint256 num = 0;\n            for (uint256 j = i; j < hashes.length; ) {\n                if (baseHash == hashes[j]) {\n                    unchecked {\n                        ++num;\n                    }\n                    if (num == threshold) return true;\n                }\n                unchecked {\n                    ++j;\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n        return false;\n    }\n\n    /// @inheritdoc IHashi\n    function getHashFromAdapter(uint256 domain, uint256 id, IAdapter adapter) public view returns (bytes32) {\n        return adapter.getHash(domain, id);\n    }\n\n    /// @inheritdoc IHashi\n    function getHashesFromAdapters(\n        uint256 domain,\n        uint256 id,\n        IAdapter[] calldata adapters\n    ) public view returns (bytes32[] memory) {\n        if (adapters.length == 0) revert NoAdaptersGiven();\n        bytes32[] memory hashes = new bytes32[](adapters.length);\n        for (uint256 i = 0; i < adapters.length; ) {\n            hashes[i] = getHashFromAdapter(domain, id, adapters[i]);\n            unchecked {\n                ++i;\n            }\n        }\n        return hashes;\n    }\n\n    /// @inheritdoc IHashi\n    function getHash(uint256 domain, uint256 id, IAdapter[] calldata adapters) external view returns (bytes32 hash) {\n        if (adapters.length == 0) revert NoAdaptersGiven();\n        bytes32[] memory hashes = getHashesFromAdapters(domain, id, adapters);\n        hash = hashes[0];\n        if (hash == bytes32(0)) revert HashNotAvailableInAdapter(adapters[0]);\n        for (uint256 i = 1; i < hashes.length; ) {\n            if (hashes[i] == bytes32(0)) revert HashNotAvailableInAdapter(adapters[i]);\n            if (hash != hashes[i]) revert AdaptersDisagree(adapters[i - 1], adapters[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IAdapter.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.0;\n\n/**\n * @title IAdapter\n */\ninterface IAdapter {\n    error ConflictingBlockHeader(uint256 blockNumber, bytes32 blockHash, bytes32 storedBlockHash);\n    error InvalidBlockHeaderLength(uint256 length);\n    error InvalidBlockHeaderRLP();\n\n    /**\n     * @dev Emitted when a hash is stored.\n     * @param id - The ID of the stored hash.\n     * @param hash - The stored hash as bytes32 values.\n     */\n    event HashStored(uint256 indexed id, bytes32 indexed hash);\n\n    /**\n     * @dev Returns the hash for a given ID.\n     * @param domain - Identifier for the domain to query.\n     * @param id - Identifier for the ID to query.\n     * @return hash Bytes32 hash for the given ID on the given domain.\n     * @notice MUST return bytes32(0) if the hash is not present.\n     */\n    function getHash(uint256 domain, uint256 id) external view returns (bytes32 hash);\n}\n"
    },
    "contracts/interfaces/IBlockHashAdapter.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport { IAdapter } from \"./IAdapter.sol\";\n\n/**\n * @title IBlockHashAdapter\n */\ninterface IBlockHashAdapter is IAdapter {\n    /**\n     * @dev Proves and stores valid ancestral block hashes for a given chain ID.\n     * @param chainId - The ID of the chain to prove block hashes for.\n     * @param blockHeaders - The RLP encoded block headers to prove the hashes for.\n     * @notice Block headers should be ordered by descending block number and should start with a known block header.\n     */\n    function proveAncestralBlockHashes(uint256 chainId, bytes[] memory blockHeaders) external;\n}\n"
    },
    "contracts/interfaces/IGiriGiriBashi.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport { IAdapter } from \"./IAdapter.sol\";\nimport { IHashi } from \"./IHashi.sol\";\nimport { IShuSho } from \"./IShuSho.sol\";\n\n/**\n * @title IGiriGiriBashi\n */\ninterface IGiriGiriBashi is IShuSho {\n    struct Challenge {\n        address payable challenger; // account that raised the challenge.\n        uint256 timestamp; // timestamp when the challenge was created.\n        uint256 bond; // bond paid by the challenger.\n    }\n\n    struct Settings {\n        bool quarantined; // whether or not the adapter has been quarantined.\n        uint256 minimumBond; // amount that must be bonded alongside a challenge.\n        uint256 startId; // earliest id that the adapter could have stored.\n        uint256 idDepth; // how far behind the current head can this adapter safely report. 0 equals infinite.\n        uint256 timeout; // grace period in which the adapter must report on an in-range id after being challenged.\n    }\n\n    error AdaptersCannotContainChallengedAdapter(IAdapter[] adapters, IAdapter adapter);\n    error AdapterHasNotYetTimedOut(IAdapter adapter);\n    error AdapterNotQuarantined(IAdapter adapter);\n    error AlreadyQuarantined(IAdapter adapter);\n    error CannotProveNoConfidence(uint256 domain, uint256 id, IAdapter[] adapters);\n    error ChallengeNotFound(bytes32 challengeId, uint256 domain, uint256 id, IAdapter adapter);\n    error ChallengeRangeAlreadySet(uint256 domain);\n    error CountMustBeZero(uint256 domain);\n    error DuplicateChallenge(bytes32 challengeId, uint256 domain, uint256 id, IAdapter adapter);\n    error NoConfidenceRequired();\n    error NotEnoughValue(IAdapter adapter, uint256 value);\n    error OutOfRange(IAdapter adapter, uint256 id);\n    error UnequalArrayLengths();\n\n    /**\n     * @dev Emitted when the bond recipient address is set.\n     * @param bondRecipient - The new bond recipient address as an Ethereum address.\n     */\n    event BondRecipientSet(address payable bondRecipient);\n\n    /**\n     * @dev Emitted when a challenge is created.\n     * @param challengeId - The unique identifier for the challenge.\n     * @param domain - The domain associated with the challenge.\n     * @param id - The identifier associated with the challenge.\n     * @param adapter - The adapter address associated with the challenge.\n     * @param challenger - The address of the challenger.\n     * @param timestamp - The timestamp when the challenge was created.\n     * @param bond - The bond amount associated with the challenge.\n     */\n    event ChallengeCreated(\n        bytes32 challengeId,\n        uint256 indexed domain,\n        uint256 id,\n        IAdapter indexed adapter,\n        address indexed challenger,\n        uint256 timestamp,\n        uint256 bond\n    );\n\n    /**\n     * @dev Emitted when the challenge range is updated.\n     * @param domain - The domain associated with the updated challenge range.\n     * @param range - The new challenge range as a Uint256 identifier.\n     */\n    event ChallengeRangeUpdated(uint256 domain, uint256 range);\n\n    /**\n     * @dev Emitted when a challenge is resolved.\n     * @param challengeId - The unique identifier for the resolved challenge.\n     * @param domain - The domain associated with the resolved challenge.\n     * @param id - The identifier associated with the resolved challenge.\n     * @param adapter - The adapter address associated with the resolved challenge.\n     * @param challenger - The address of the challenger.\n     * @param bond - The bond amount associated with the resolved challenge.\n     * @param challengeSuccessful - A boolean indicating whether the challenge was successful.\n     */\n    event ChallengeResolved(\n        bytes32 challengeId,\n        uint256 indexed domain,\n        uint256 id,\n        IAdapter indexed adapter,\n        address indexed challenger,\n        uint256 bond,\n        bool challengeSuccessful\n    );\n\n    /**\n     * @dev Emitted when a new head is updated.\n     * @param domain - The domain associated with the new head.\n     * @param head - The new head as a Uint256 identifier.\n     */\n    event NewHead(uint256 domain, uint256 head);\n\n    /**\n     * @dev Emitted when a declaration of no confidence is made for a specific domain.\n     * @param domain - The domain associated with the declaration.\n     */\n    event NoConfidenceDeclared(uint256 domain);\n\n    /**\n     * @dev Emitted when settings are initialized for a specific domain and adapter.\n     * @param domain - The domain associated with the initialized settings.\n     * @param adapter - The adapter address associated with the initialized settings.\n     * @param settings - The initialized settings object.\n     */\n    event SettingsInitialized(uint256 domain, IAdapter adapter, Settings settings);\n\n    /**\n     * @dev Challenges the adapter to provide a response. If the adapter fails, it can be quarantined.\n     * @param domain - The Uint256 identifier for the domain.\n     * @param id - The Uint256 identifier for the challenge.\n     * @param adapter - The address of the adapter to challenge.\n     * @notice Caller must pay a minimum bond to issue the challenge. This bond should be high enough to cover the gas costs for successfully completing the challenge.\n     */\n    function challengeAdapter(uint256 domain, uint256 id, IAdapter adapter) external payable;\n\n    /**\n     * @dev Show that enough adapters disagree that they could not make a threshold if the remainder all agree with one.\n     * @param domain - The Uint256 identifier for the domain.\n     * @param id - The Uint256 identifier.\n     * @param adapters - An array of adapter instances.\n     */\n    function declareNoConfidence(uint256 domain, uint256 id, IAdapter[] memory adapters) external;\n\n    /**\n     * @dev Disables a set of adapters for a given domain.\n     * @param domain - The Uint256 identifier for the domain.\n     * @param adapters - An array of adapter instances to be disabled.\n     */\n    function disableAdapters(uint256 domain, IAdapter[] memory adapters) external;\n\n    /**\n     * @dev Enables a set of adapters for a given domain with specific settings.\n     * @param domain - The Uint256 identifier for the domain.\n     * @param adapters - An array of adapter instances.\n     * @param settings - An array of settings, corresponding to each adapter.\n     */\n    function enableAdapters(uint256 domain, IAdapter[] memory adapters, Settings[] memory settings) external;\n\n    /**\n     * @dev Get the current challenge given a challengeId.\n     * @param challengeId - The Bytes32 identifier for the challenge.\n     * @return challenge - Challenge indicating the challenge parameters.\n     */\n    function getChallenge(bytes32 challengeId) external view returns (Challenge memory);\n\n    /**\n     * @dev Gets the challenge ID for a given domain, ID, and adapter.\n     * @param domain - The Uint256 identifier for the domain.\n     * @param id - The Uint256 identifier.\n     * @param adapter - The adapter instance.\n     * @return The computed challenge ID as a bytes32 hash.\n     */\n    function getChallengeId(uint256 domain, uint256 id, IAdapter adapter) external pure returns (bytes32);\n\n    /**\n     * @dev Get how far beyond the current highestId can be challenged.\n     * @param domain - The Uint256 identifier for the domain.\n     * @return range - Uint256 indicating the challenge range.\n     */\n    function getChallengeRange(uint256 domain) external view returns (uint256);\n\n    /**\n     * @dev Returns the hash agreed upon by a threshold of the enabled adapters.\n     * @param domain - Uint256 identifier for the domain to query.\n     * @param id - Uint256 identifier to query.\n     * @return hash - Bytes32 hash agreed upon by a threshold of the adapters for the given domain.\n     * @notice Reverts if no threshold is not reached.\n     * @notice Reverts if no adapters are set for the given domain.\n     */\n    function getThresholdHash(uint256 domain, uint256 id) external returns (bytes32);\n\n    /**\n     * @dev Returns the hash unanimously agreed upon by ALL of the enabled adapters.\n     * @param domain - Uint256 identifier for the domain to query.\n     * @param id - Uint256 identifier to query.\n     * @return hash - Bytes32 hash agreed upon by the adapters for the given domain.\n     * @notice Reverts if adapters disagree.\n     * @notice Revert if the adapters do not yet have the hash for the given ID.\n     * @notice Reverts if no adapters are set for the given domain.\n     */\n    function getUnanimousHash(uint256 domain, uint256 id) external returns (bytes32);\n\n    /**\n     * @dev Returns the hash unanimously agreed upon by all of the given adapters.\n     * @param domain - Uint256 identifier for the domain to query.\n     * @param adapters - Array of adapter addresses to query.\n     * @param id - Uint256 identifier to query.\n     * @return hash - Bytes32 hash agreed upon by the adapters for the given domain.\n     * @notice Adapters must be in numerical order from smallest to largest and contain no duplicates.\n     * @notice Reverts if adapters are out of order or contain duplicates.\n     * @notice Reverts if adapters disagree.\n     * @notice Revert if the adapters do not yet have the hash for the given ID.\n     * @notice Reverts if no adapters are set for the given domain.\n     */\n    function getHash(uint256 domain, uint256 id, IAdapter[] memory adapters) external returns (bytes32);\n\n    /**\n     * @dev Returns the highest id reported for a given id\n     * @param domain - Uint256 identifier for the domain to query.\n     * @return id - Uint256 indicating the highest id reported.\n     */\n    function getHead(uint256 domain) external view returns (uint256);\n\n    /**\n     * @dev Get the current settings for a given adapter.\n     * @param domain - Uint256 identifier for the domain to query.\n     * @param adapter - The adapter.\n     * @return settings - The Settings for the given adapter.\n     */\n    function getSettings(uint256 domain, IAdapter adapter) external view returns (Settings memory);\n\n    /**\n     * @dev Replaces the quarantined adapters for a given domain with new adapters and settings.\n     * @param domain - The Uint256 identifier for the domain.\n     * @param currentAdapters - An array of current adapter instances to be replaced.\n     * @param newAdapters - An array of new adapter instances to replace the current ones.\n     * @param settings - An array of settings corresponding to the new adapters.\n     */\n    function replaceQuarantinedAdapters(\n        uint256 domain,\n        IAdapter[] memory currentAdapters,\n        IAdapter[] memory newAdapters,\n        Settings[] memory settings\n    ) external;\n\n    /**\n     * @dev Resolves a challenge by comparing results from a specific adapter with others.\n     * @param domain - The Uint256 identifier for the domain.\n     * @param id - The Uint256 identifier.\n     * @param adapter - The adapter instance for comparison.\n     * @param adapters - An array of adapter instances for comparison.\n     * @return A boolean indicating the success of the challenge resolution.\n     */\n    function resolveChallenge(\n        uint256 domain,\n        uint256 id,\n        IAdapter adapter,\n        IAdapter[] memory adapters\n    ) external returns (bool);\n\n    /**\n     * @dev Sets the bond recipient address for payments.\n     * @param bondRecipient - The address where bond payments should be sent.\n     */\n    function setBondRecipient(address payable bondRecipient) external;\n\n    /**\n     * @dev Sets the challenge range for a specific domain.\n     * @param domain - The Uint256 identifier for the domain.\n     * @param range - The Uint256 range to set for the given domain.\n     */\n    function setChallengeRange(uint256 domain, uint256 range) external;\n\n    /**\n     * @dev Sets the threshold for a specific domain.\n     * @param domain - The Uint256 identifier for the domain.\n     * @param threshold - The Uint256 threshold to set for the given domain.\n     */\n    function setThreshold(uint256 domain, uint256 threshold) external;\n}\n"
    },
    "contracts/interfaces/IHashi.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport { IAdapter } from \"./IAdapter.sol\";\n\n/**\n * @title IHashi\n */\ninterface IHashi {\n    error AdaptersDisagree(IAdapter adapterOne, IAdapter adapterTwo);\n    error HashNotAvailableInAdapter(IAdapter adapter);\n    error InvalidThreshold(uint256 threshold, uint256 maxThreshold);\n    error NoAdaptersGiven();\n\n    /**\n     * @dev Checks whether the threshold is reached for a message given a set of adapters.\n     * @param domain - ID of the domain to query.\n     * @param id - ID for which to return hash.\n     * @param threshold - Threshold to use.\n     * @param adapters - Array of addresses for the adapters to query.\n     * @notice If the threshold is 1, it will always return true.\n     * @return result A boolean indicating if a threshold for a given message has been reached.\n     */\n    function checkHashWithThresholdFromAdapters(\n        uint256 domain,\n        uint256 id,\n        uint256 threshold,\n        IAdapter[] calldata adapters\n    ) external view returns (bool);\n\n    /**\n     * @dev Returns the hash stored by a given adapter for a given ID.\n     * @param domain - ID of the domain to query.\n     * @param id - ID for which to return a hash.\n     * @param adapter - Address of the adapter to query.\n     * @return hash stored by the given adapter for the given ID.\n     */\n    function getHashFromAdapter(uint256 domain, uint256 id, IAdapter adapter) external view returns (bytes32);\n\n    /**\n     * @dev Returns the hashes for a given ID stored by a given set of adapters.\n     * @param domain - The ID of the domain to query.\n     * @param id - The ID for which to return hashes.\n     * @param adapters - An array of addresses for the adapters to query.\n     * @return hashes An array of hashes stored by the given adapters for the specified ID.\n     */\n    function getHashesFromAdapters(\n        uint256 domain,\n        uint256 id,\n        IAdapter[] calldata adapters\n    ) external view returns (bytes32[] memory);\n\n    /**\n     * @dev Returns the hash unanimously agreed upon by a given set of adapters.\n     * @param domain - The ID of the domain to query.\n     * @param id - The ID for which to return a hash.\n     * @param adapters - An array of addresses for the adapters to query.\n     * @return hash agreed on by the given set of adapters.\n     * @notice MUST revert if adapters disagree on the hash or if an adapter does not report.\n     */\n    function getHash(uint256 domain, uint256 id, IAdapter[] calldata adapters) external view returns (bytes32);\n}\n"
    },
    "contracts/interfaces/IHeaderStorage.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.0;\n\n/**\n * @title IHeaderStorage\n */\ninterface IHeaderStorage {\n    error HeaderOutOfRange(uint256 blockNumber);\n\n    /**\n     * @dev Emitted when a block header is stored.\n     * @param blockNumber - The block number associated with the stored header.\n     * @param blockHeader - The stored block header as a bytes32 value.\n     */\n    event HeaderStored(uint256 indexed blockNumber, bytes32 indexed blockHeader);\n\n    /**\n     * @dev Retrieves the stored block header for a specific block number.\n     * @param blockNumber - The block number as a uint256 value.\n     * @return The block header as a bytes32 value.\n     */\n    function headers(uint256 blockNumber) external view returns (bytes32);\n\n    /**\n     * @dev Stores and returns the header for the given block.\n     * @param blockNumber - Block number.\n     * @return blockHeader - Block header stored.\n     * @notice Reverts if the given block header was not previously stored and is now out of range.\n     */\n    function storeBlockHeader(uint256 blockNumber) external returns (bytes32);\n\n    /**\n     * @dev Stores and returns the header for an array of given blocks.\n     * @param blockNumbers - Array of block numbers.\n     * @return blockHeaders - Array of block headers stored.\n     * @notice Reverts if the given block header was not previously stored and is now out of range.\n     */\n    function storeBlockHeaders(uint256[] memory blockNumbers) external returns (bytes32[] memory);\n}\n"
    },
    "contracts/interfaces/IJushin.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.0;\n\n/**\n * @title IJushin\n */\ninterface IJushin {\n    /**\n     * @dev Handles the incoming message from a specified chain.\n     * @param sourceChainId - The ID of the origin chain from which the message originates.\n     * @param messageId - The unique identifier of the message.\n     * @param sender - The address of the sender of the message on the origin chain.\n     * @param data - The data contained in the message, in bytes.\n     * @return result bytes at the user's choice\n     */\n    function onMessage(\n        uint256 sourceChainId,\n        uint256 messageId,\n        address sender,\n        bytes calldata data\n    ) external returns (bytes memory);\n}\n"
    },
    "contracts/interfaces/IMessage.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport { IReporter } from \"./IReporter.sol\";\nimport { IAdapter } from \"./IAdapter.sol\";\n\nstruct Message {\n    uint256 nonce;\n    uint256 targetChainId;\n    uint256 threshold;\n    address sender;\n    address receiver;\n    bytes data;\n    IReporter[] reporters;\n    IAdapter[] adapters;\n}\n"
    },
    "contracts/interfaces/IMessageHashCalculator.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport { Message } from \"./IMessage.sol\";\n\n/**\n * @title IMessageHashCalculator\n */\ninterface IMessageHashCalculator {\n    /**\n     * @dev Calculates and returns the hash of a given message.\n     * @param message - The `Message` structure containing various fields to be hashed.\n     * @return hash The keccak256 hash of the message, represented as a 32-byte hexadecimal string.\n     */\n    function calculateMessageHash(Message memory message) external pure returns (bytes32);\n}\n"
    },
    "contracts/interfaces/IMessageIdCalculator.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.0;\n\n/**\n * @title IMessageIdCalculator\n */\ninterface IMessageIdCalculator {\n    /**\n     * @dev Calculates and returns a unique identifier (ID) for a message.\n     *\n     * @param sourceChainId - The ID of the chain from which the message originates.\n     * @param dispatcherAddress - The address of the dispatcher sending the message.\n     * @param messageHash - The keccak256 hash of the message, represented as a 32-byte hexadecimal string.\n     * @return messageId The unique identifier for the message, calculated based on the input parameters.\n     */\n    function calculateMessageId(\n        uint256 sourceChainId,\n        address dispatcherAddress,\n        bytes32 messageHash\n    ) external pure returns (uint256);\n}\n"
    },
    "contracts/interfaces/IReporter.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport { IAdapter } from \"./IAdapter.sol\";\n\ninterface IReporter {\n    error NotYaho(address sender, address expectedYaho);\n\n    /**\n     * @dev Emitted when a block is dispatched to another chain.\n     * @param targetChainId - The target chain's identifier associated with the dispatched block.\n     * @param adapter - The adapter address associated with the dispatched block.\n     * @param blockNumber - The block number associated with the dispatched block.\n     * @param blockHeader - The dispatched block header as a bytes32 value.\n     */\n    event BlockDispatched(\n        uint256 indexed targetChainId,\n        IAdapter adapter,\n        uint256 indexed blockNumber,\n        bytes32 blockHeader\n    );\n\n    /**\n     * @dev Emitted when a message is dispatched to another chain.\n     * @param targetChainId - The target chain's identifier associated with the dispatched message.\n     * @param adapter - The adapter address associated with the dispatched message.\n     * @param messageId - The message identifier associated with the dispatched message.\n     * @param messageHash - The dispatched message hash as a bytes32 value.\n     */\n    event MessageDispatched(\n        uint256 indexed targetChainId,\n        IAdapter adapter,\n        uint256 indexed messageId,\n        bytes32 messageHash\n    );\n\n    /**\n     * @dev Dispatches blocks to a given adapter on the target chaib.\n     * @param targetChainId - The target chain's Uint256 identifier.\n     * @param adapter - The adapter instance to use.\n     * @param blockNumbers - An array of Uint256 block numbers to dispatch.\n     * @notice blockNumbers must include block numbers that are greater than or equal to (currentBlock - 256) due to EVM limitations.\n     * @return result - The result returned by the adapter as bytes.\n     */\n    function dispatchBlocks(\n        uint256 targetChainId,\n        IAdapter adapter,\n        uint256[] memory blockNumbers\n    ) external payable returns (bytes32);\n\n    /**\n     * @dev Dispatches messages to a target chain using the specified adapter.\n     * @param targetChainId - The target chain's Uint256 identifier.\n     * @param adapter - The adapter instance to use.\n     * @param messageIds - An array of Uint256 message identifiers.\n     * @param messageHashes - An array of bytes32 message hashes.\n     * @notice This function can be called only by Yaho\n     * @return result - The result returned by the adapter as bytes.\n     */\n    function dispatchMessages(\n        uint256 targetChainId,\n        IAdapter adapter,\n        uint256[] memory messageIds,\n        bytes32[] memory messageHashes\n    ) external payable returns (bytes32);\n}\n"
    },
    "contracts/interfaces/IShoyuBashi.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport { IHashi } from \"./IHashi.sol\";\nimport { IAdapter } from \"./IAdapter.sol\";\nimport { IShuSho } from \"./IShuSho.sol\";\n\n/**\n * @title IShoyuBashi\n */\ninterface IShoyuBashi is IShuSho {\n    /**\n     * @dev Disables the given adapters for a given domain.\n     * @param domain - Uint256 identifier for the domain for which to set adapters.\n     * @param adapters - Array of adapter addresses.\n     * @notice Only callable by the owner of this contract.\n     * @notice Reverts if adapters are out of order or contain duplicates.\n     */\n    function disableAdapters(uint256 domain, IAdapter[] memory adapters) external;\n\n    /**\n     * @dev Enables the given adapters for a given domain.\n     * @param domain - Uint256 identifier for the domain for which to set adapters.\n     * @param adapters - Array of adapter addresses.\n     * @notice Only callable by the owner of this contract.\n     * @notice Reverts if adapters are out of order or contain duplicates.\n     */\n    function enableAdapters(uint256 domain, IAdapter[] memory adapters) external;\n\n    /**\n     * @dev Returns the hash unanimously agreed upon by ALL of the enabled adapters.\n     * @param domain - Uint256 identifier for the domain to query.\n     * @param id - Uint256 identifier to query.\n     * @return Bytes32 hash agreed upon by the adapters for the given domain.\n     * @notice Revert if the adapters do not yet have the hash for the given ID.\n     * @notice Reverts if adapters disagree.\n     * @notice Reverts if no adapters are set for the given domain.\n     */\n    function getUnanimousHash(uint256 domain, uint256 id) external view returns (bytes32);\n\n    /**\n     * @dev Returns the hash agreed upon by a threshold of the enabled adapters.\n     * @param domain - Uint256 identifier for the domain to query.\n     * @param id - Uint256 identifier to query.\n     * @return Bytes32 hash agreed upon by a threshold of the adapters for the given domain.\n     * @notice Reverts if the threshold is not reached.\n     * @notice Reverts if no adapters are set for the given domain.\n     */\n    function getThresholdHash(uint256 domain, uint256 id) external view returns (bytes32);\n\n    /**\n     * @dev Returns the hash unanimously agreed upon by all of the given adapters.\n     * @param domain - Uint256 identifier for the domain to query.\n     * @param adapters - Array of adapter addresses to query.\n     * @param id - Uint256 identifier to query.\n     * @return Bytes32 hash agreed upon by the adapters for the given domain.\n     * @notice adapters must be in numerical order from smallest to largest and contain no duplicates.\n     * @notice Reverts if adapters are out of order or contain duplicates.\n     * @notice Reverts if adapters disagree.\n     * @notice Revert if the adapters do not yet have the hash for the given ID.\n     * @notice Reverts if no adapters are set for the given domain.\n     */\n    function getHash(uint256 domain, uint256 id, IAdapter[] memory adapters) external view returns (bytes32);\n\n    /**\n     * @dev Sets the threshold of adapters required for a given domain.\n     * @param domain - Uint256 identifier for the domain for which to set the threshold.\n     * @param threshold - Uint256 threshold to set for the given domain.\n     * @notice Only callable by the owner of this contract.\n     * @notice Reverts if the threshold is already set to the given value.\n     */\n    function setThreshold(uint256 domain, uint256 threshold) external;\n}\n"
    },
    "contracts/interfaces/IShuSho.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport { IHashi } from \"./IHashi.sol\";\nimport { IAdapter } from \"./IAdapter.sol\";\n\n/**\n * @title IShuSho\n */\ninterface IShuSho {\n    struct Domain {\n        uint256 threshold;\n        uint256 count;\n    }\n\n    struct Link {\n        IAdapter previous;\n        IAdapter next;\n    }\n\n    error AdapterNotEnabled(IAdapter adapter);\n    error AdapterAlreadyEnabled(IAdapter adapter);\n    error CountCannotBeZero();\n    error DuplicateHashiAddress(IHashi hashi);\n    error DuplicateOrOutOfOrderAdapters(IAdapter adapterOne, IAdapter adapterTwo);\n    error DuplicateThreashold(uint256 threshold);\n    error InvalidAdapter(IAdapter adapter);\n    error InvalidThreshold(uint256 threshold);\n    error NoAdaptersEnabled(uint256 domain);\n    error NoAdaptersGiven();\n    error ThresholdNotMet();\n\n    /**\n     * @dev Emitted when adapters are disabled for a specific domain.\n     * @param domain - The domain associated with the disabled adapters.\n     * @param adapters - An array of disabled adapter addresses associated with this event.\n     */\n    event AdaptersDisabled(uint256 indexed domain, IAdapter[] adapters);\n\n    /**\n     * @dev Emitted when adapters are enabled for a specific domain.\n     * @param domain - The domain associated with the enabled adapters.\n     * @param adapters - An array of enabled adapter addresses associated with this event.\n     */\n    event AdaptersEnabled(uint256 indexed domain, IAdapter[] adapters);\n\n    /**\n     * @dev Emitted when the address of the IHashi contract is set.\n     * @param hashi - The address of the IHashi contract associated with this event.\n     */\n    event HashiSet(IHashi indexed hashi);\n\n    /**\n     * @dev Emitted when initialization occurs with the owner's address and the IHashi contract address.\n     * @param owner - The address of the owner associated with this event.\n     * @param hashi - The address of the IHashi contract associated with this event.\n     */\n    event Init(address indexed owner, IHashi indexed hashi);\n\n    /**\n     * @dev Emitted when the threshold is set for a specific domain.\n     * @param domain - The domain associated with the set threshold.\n     * @param threshold - The new threshold value associated with this event.\n     */\n    event ThresholdSet(uint256 domain, uint256 threshold);\n\n    /**\n     * @dev Checks the order and validity of adapters for a given domain.\n     * @param domain - The Uint256 identifier for the domain.\n     * @param _adapters - An array of adapter instances.\n     */\n    function checkAdapterOrderAndValidity(uint256 domain, IAdapter[] memory _adapters) external view;\n\n    /**\n     * @dev Get the previous and the next adapter given a domain and an adapter.\n     * @param domain - Uint256 identifier for the domain.\n     * @param adapter - IAdapter value for the adapter.\n     * @return link - The Link struct containing the previous and the next adapter.\n     */\n    function getAdapterLink(uint256 domain, IAdapter adapter) external view returns (Link memory);\n\n    /**\n     * @dev Returns an array of enabled adapters for a given domain.\n     * @param domain - Uint256 identifier for the domain for which to list adapters.\n     * @return adapters - The adapters for a given domain.\n     */\n    function getAdapters(uint256 domain) external view returns (IAdapter[] memory);\n\n    /**\n     * @dev Get the current configuration for a given domain.\n     * @param domain - Uint256 identifier for the domain.\n     * @return domain - The Domain struct containing the current configuration for a given domain.\n     */\n    function getDomain(uint256 domain) external view returns (Domain memory);\n\n    /**\n     * @dev Returns the threshold and count for a given domain.\n     * @param domain - Uint256 identifier for the domain.\n     * @return threshold - Uint256 adapters threshold for the given domain.\n     * @return count - Uint256 adapters count for the given domain.\n     * @notice If the threshold for a domain has not been set, or is explicitly set to 0, this function will return a threshold equal to the adapters count for the given domain.\n     */\n    function getThresholdAndCount(uint256 domain) external view returns (uint256, uint256);\n\n    /**\n     * @dev Returns the address of the specified Hashi.\n     * @return hashi - The Hashi address.\n     */\n    function hashi() external view returns (IHashi);\n}\n"
    },
    "contracts/interfaces/IYaho.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport { IMessageHashCalculator } from \"./IMessageHashCalculator.sol\";\nimport { IMessageIdCalculator } from \"./IMessageIdCalculator.sol\";\nimport { Message } from \"./IMessage.sol\";\nimport { IReporter } from \"./IReporter.sol\";\nimport { IAdapter } from \"./IAdapter.sol\";\n\n/**\n * @title IYaho\n */\ninterface IYaho is IMessageHashCalculator, IMessageIdCalculator {\n    error NoMessagesGiven();\n    error NoMessageIdsGiven();\n    error NoReportersGiven();\n    error NoAdaptersGiven();\n    error UnequalArrayLengths(uint256 arrayOne, uint256 arrayTwo);\n    error MessageHashNotFound(uint256 messageId);\n    error InvalidMessage(Message message);\n    error InvalidThreshold(uint256 threshold, uint256 maxThreshold);\n\n    /**\n     * @dev Emitted when a message is dispatched with its associated message ID and message struct.\n     * @param messageId - The message ID associated with the dispatched message.\n     * @param message - The message struct associated with this event.\n     */\n    event MessageDispatched(uint256 indexed messageId, Message message);\n\n    /**\n     * @dev Dispatches a message to a specified chain with a set of validation parameters without calling the reporters. It just write in storage a commitment of message. In order to dispatch it to the reporters, you must then invoke `relayMessagesToAdapters`\n     * @param targetChainId - The ID of the target chain to which the message is being sent.\n     * @param threshold - The minimum number of adapters required to have stored the same message.\n     * @param receiver - The address of the receiver on the target chain.\n     * @param data - The data being sent in the message, represented as a byte array.\n     * @param reporters - An array of `IReporter` contracts (not actively used in this step).\n     * @param adapters - An array of `IAdapter` contracts (for later validation use).\n     * @return messageId A unique identifier for the dispatched message, used for tracking and subsequent validation.\n     */\n    function dispatchMessage(\n        uint256 targetChainId,\n        uint256 threshold,\n        address receiver,\n        bytes calldata data,\n        IReporter[] calldata reporters,\n        IAdapter[] calldata adapters\n    ) external returns (uint256);\n\n    /**\n     * @dev Dispatches a message to a specified chain with a set of validation parameters and calls the reporters.\n     * @param targetChainId - The ID of the target chain to which the message is being sent.\n     * @param threshold - The minimum number of adapters required to have stored the same message.\n     * @param receiver - The address of the receiver on the target chain.\n     * @param data - The data being sent in the message, represented as a byte array.\n     * @param reporters - An array of `IReporter` contracts (not actively used in this step).\n     * @param adapters - An array of `IAdapter` contracts (for later validation use).\n     * @return (messageId, result) A unique identifier for the dispatched message and an array of byte arrays, where each element is the result of dispatching a respective message to the corresponding Reporter.\n     */\n    function dispatchMessageToAdapters(\n        uint256 targetChainId,\n        uint256 threshold,\n        address receiver,\n        bytes calldata data,\n        IReporter[] calldata reporters,\n        IAdapter[] calldata adapters\n    ) external payable returns (uint256, bytes32[] memory);\n\n    /**\n     * @dev Dispatches an array of messages to specified chains and calls the reporters.\n     * @param targetChainId - The ID of the target chain for all messages.\n     * @param thresholds - An array of minimum validation thresholds required for each message.\n     * @param receivers - An array of addresses for the receivers on the target chain, one for each message.\n     * @param data - An array of data payloads for each message, represented as byte arrays.\n     * @param reporters - An array of `IReporter` contracts for reporting the status of each message.\n     * @param adapters - An array of `IAdapter` contracts used for the validation of each message.\n     * @return (messageIds, result) An array of unique identifiers for the dispatched messages and an array of bytes32 arrays, where each element is the result of dispatching a respective message to the corresponding Reporter.\n     */\n    function dispatchMessagesToAdapters(\n        uint256 targetChainId,\n        uint256[] calldata thresholds,\n        address[] calldata receivers,\n        bytes[] calldata data,\n        IReporter[] calldata reporters,\n        IAdapter[] calldata adapters\n    ) external payable returns (uint256[] memory, bytes32[] memory);\n\n    /**\n     * @dev Retrieves the hash of a pending message that was dispatched via `dispatchMessage` but has not yet been relayed to adapters using `relayingMessagesToAdapters`.\n     * @param messageId - The unique identifier of the message for which the hash is being retrieved.\n     * @return messageHash The hash of the pending message if it exists.\n     */\n    function getPendingMessageHash(uint256 messageId) external view returns (bytes32);\n\n    /**\n     * @dev Relays an array of messages to their respective adapters. In order to be able to aggregate messages within the reporter, it's mandatory that all messages have the same targetChainId, reporters and adapters.\n     * @param messages - An array of `Message` structures to be relayed to the adapters.\n     * @return result An array of bytes32 arrays, where each element is the result of dispatching a respective all messages to the corresponding Reporter.\n     */\n    function relayMessagesToAdapters(Message[] calldata messages) external payable returns (bytes32[] memory);\n}\n"
    },
    "contracts/interfaces/IYaru.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport { Message } from \"./IMessage.sol\";\nimport { IMessageHashCalculator } from \"./IMessageHashCalculator.sol\";\nimport { IMessageIdCalculator } from \"./IMessageIdCalculator.sol\";\n\n/**\n * @title IYaru\n */\ninterface IYaru is IMessageHashCalculator, IMessageIdCalculator {\n    error CallFailed();\n    error InvalidToChainId(uint256 chainId, uint256 expectedChainId);\n    error MessageIdAlreadyExecuted(uint256 messageId);\n    error ThresholdNotMet();\n\n    /**\n     * @dev Emitted when a message is executed with its associated message ID and message object.\n     * @param messageId - The message ID associated with the executed message.\n     * @param message - The message object associated with this event.\n     */\n    event MessageExecuted(uint256 indexed messageId, Message message);\n\n    /**\n     * @dev Executes a batch of messages and returns the results if the threshold for a single message has been reached\n     * @param messages - An array of `Message` structures\n     * @return result An array of byte arrays, where each byte array is the result of executing a respective message from the input.\n     */\n    function executeMessages(Message[] calldata messages) external returns (bytes[] memory);\n}\n"
    },
    "contracts/MockAggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\ncontract MockAggregator is AggregatorV3Interface {\n    int256 private price;\n    uint8 private dec;\n\n    constructor(int256 _price, uint8 _decimals) {\n        price = _price;\n        dec = _decimals;\n    }\n\n    function decimals() public view override returns (uint8) {\n        return dec;\n    }\n\n    function description() external pure override returns (string memory) {\n        return \"Mock Aggregator\";\n    }\n\n    function version() external pure override returns (uint256) {\n        return 0;\n    }\n\n    function getRoundData(\n        uint80 _roundId\n    )\n        external\n        pure\n        override\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        )\n    {\n        return (_roundId, 0, 0, 0, 0);\n    }\n\n    function latestRoundData()\n        external\n        view\n        override\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        )\n    {\n        return (0, price, 0, 0, 0);\n    }\n}\n"
    },
    "contracts/SimpleERC20.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/interfaces/IERC20.sol\";\n\ninterface ISimpleERC20 is IERC20 {\n    function mint(address to, uint256 amount) external;\n    function burn(address sender, uint256 amount) external;\n}\n\ncontract SimpleERC20 is ISimpleERC20, ERC20 {\n    address public owner = msg.sender;\n\n\tconstructor(\n\t\tstring memory name,\n\t\tstring memory symbol,\n\t\tuint256 initialSupply\n\t) ERC20(name, symbol) {\n\t\t_mint(msg.sender, initialSupply);\n\t}\n\n    function setOwner(address _owner) public {\n        require(msg.sender == owner, \"SimpleERC20: only owner can change owner\");\n        owner = _owner;\n    }\n\n    function mint(address to, uint256 amount) public {\n        require(msg.sender == owner, \"SimpleERC20: only owner can mint\");\n        _mint(to, amount);\n    }\n\n    function burn(address sender, uint256 amount) public {\n        _burn(sender, amount);\n    }\n\n}\n"
    },
    "contracts/utils/HeaderStorage.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.20;\n\nimport { IHeaderStorage } from \"../interfaces/IHeaderStorage.sol\";\n\ncontract HeaderStorage is IHeaderStorage {\n    mapping(uint256 => bytes32) public headers;\n\n    /// @inheritdoc IHeaderStorage\n    function storeBlockHeader(uint256 blockNumber) public returns (bytes32) {\n        bytes32 blockHeader = headers[blockNumber];\n        if (blockHeader == 0) {\n            blockHeader = blockhash(blockNumber);\n            if (blockHeader == 0) revert HeaderOutOfRange(blockNumber);\n            headers[blockNumber] = blockHeader;\n            emit HeaderStored(blockNumber, blockHeader);\n        }\n        return blockHeader;\n    }\n\n    /// @inheritdoc IHeaderStorage\n    function storeBlockHeaders(uint256[] memory blockNumbers) public returns (bytes32[] memory) {\n        bytes32[] memory blockHeaders = new bytes32[](blockNumbers.length);\n        for (uint256 i = 0; i < blockNumbers.length; ) {\n            blockHeaders[i] = storeBlockHeader(blockNumbers[i]);\n            unchecked {\n                ++i;\n            }\n        }\n        return blockHeaders;\n    }\n}\n"
    },
    "contracts/utils/MessageHashCalculator.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.20;\n\nimport { IMessageHashCalculator } from \"../interfaces/IMessageHashCalculator.sol\";\nimport { Message } from \"../interfaces/IMessage.sol\";\n\ncontract MessageHashCalculator is IMessageHashCalculator {\n    /// @inheritdoc IMessageHashCalculator\n    function calculateMessageHash(Message memory message) public pure returns (bytes32) {\n        return keccak256(abi.encode(message));\n    }\n}\n"
    },
    "contracts/utils/MessageIdCalculator.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.20;\n\nimport { IMessageIdCalculator } from \"../interfaces/IMessageIdCalculator.sol\";\n\ncontract MessageIdCalculator is IMessageIdCalculator {\n    /// @inheritdoc IMessageIdCalculator\n    function calculateMessageId(\n        uint256 sourceChainId,\n        address dispatcherAddress,\n        bytes32 messageHash\n    ) public pure returns (uint256) {\n        return uint256(keccak256(abi.encode(sourceChainId, dispatcherAddress, messageHash)));\n    }\n}\n"
    },
    "contracts/Yaho.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.20;\n\nimport { MessageIdCalculator } from \"./utils/MessageIdCalculator.sol\";\nimport { MessageHashCalculator } from \"./utils/MessageHashCalculator.sol\";\nimport { IYaho } from \"./interfaces/IYaho.sol\";\nimport { IReporter } from \"./interfaces/IReporter.sol\";\nimport { Message } from \"./interfaces/IMessage.sol\";\nimport { IAdapter } from \"./interfaces/IAdapter.sol\";\n\ncontract Yaho is IYaho, MessageIdCalculator, MessageHashCalculator {\n    mapping(uint256 => bytes32) private _pendingMessageHashes;\n    uint256 public currentNonce;\n\n    /// @inheritdoc IYaho\n    function dispatchMessage(\n        uint256 targetChainId,\n        uint256 threshold,\n        address receiver,\n        bytes calldata data,\n        IReporter[] calldata reporters,\n        IAdapter[] calldata adapters\n    ) external returns (uint256) {\n        _checkReportersAndAdapters(threshold, reporters, adapters);\n        (uint256 messageId, ) = _dispatchMessage(targetChainId, threshold, receiver, data, reporters, adapters);\n        return messageId;\n    }\n\n    /// @inheritdoc IYaho\n    function dispatchMessageToAdapters(\n        uint256 targetChainId,\n        uint256 threshold,\n        address receiver,\n        bytes calldata data,\n        IReporter[] calldata reporters,\n        IAdapter[] calldata adapters\n    ) external payable returns (uint256, bytes32[] memory) {\n        _checkReportersAndAdapters(threshold, reporters, adapters);\n        (uint256 messageId, bytes32 messageHash) = _dispatchMessage(\n            targetChainId,\n            threshold,\n            receiver,\n            data,\n            reporters,\n            adapters\n        );\n        bytes32[] memory reportersReceipts = _dispatchMessageToAdapters(\n            targetChainId,\n            messageId,\n            messageHash,\n            reporters,\n            adapters\n        );\n        return (messageId, reportersReceipts);\n    }\n\n    /// @inheritdoc IYaho\n    function dispatchMessagesToAdapters(\n        uint256 targetChainId,\n        uint256[] calldata thresholds,\n        address[] calldata receivers,\n        bytes[] calldata data,\n        IReporter[] calldata reporters,\n        IAdapter[] calldata adapters\n    ) external payable returns (uint256[] memory, bytes32[] memory) {\n        if (thresholds.length != receivers.length) revert UnequalArrayLengths(thresholds.length, receivers.length);\n        if (thresholds.length != data.length) revert UnequalArrayLengths(thresholds.length, data.length);\n\n        uint256[] memory messageIds = new uint256[](receivers.length);\n        bytes32[] memory messageHashes = new bytes32[](receivers.length);\n        for (uint256 i = 0; i < receivers.length; ) {\n            _checkReportersAndAdapters(thresholds[i], reporters, adapters);\n            (messageIds[i], messageHashes[i]) = _dispatchMessage(\n                targetChainId,\n                thresholds[i],\n                receivers[i],\n                data[i],\n                reporters,\n                adapters\n            );\n            unchecked {\n                ++i;\n            }\n        }\n\n        bytes32[] memory reportersReceipts = new bytes32[](reporters.length);\n        _resetPendingMessageHashesByMessageIds(messageIds);\n        reportersReceipts = _dispatchMessagesToAdapters(targetChainId, messageIds, messageHashes, reporters, adapters);\n        return (messageIds, reportersReceipts);\n    }\n\n    /// @inheritdoc IYaho\n    function getPendingMessageHash(uint256 messageId) external view returns (bytes32) {\n        return _pendingMessageHashes[messageId];\n    }\n\n    /// @inheritdoc IYaho\n    function relayMessagesToAdapters(Message[] calldata messages) external payable returns (bytes32[] memory) {\n        if (messages.length == 0) revert NoMessagesGiven();\n\n        bytes32 expectedParams = keccak256(\n            abi.encode(messages[0].targetChainId, messages[0].reporters, messages[0].adapters)\n        );\n\n        bytes32[] memory messageHashes = new bytes32[](messages.length);\n        uint256[] memory messageIds = new uint256[](messages.length);\n        for (uint256 i = 0; i < messages.length; i++) {\n            Message memory message = messages[i];\n            if (\n                i > 0 &&\n                expectedParams != keccak256(abi.encode(message.targetChainId, message.reporters, message.adapters))\n            ) revert InvalidMessage(message);\n            uint256 messageId = calculateMessageId(block.chainid, address(this), calculateMessageHash(message));\n            bytes32 messageHash = _pendingMessageHashes[messageId];\n            if (messageHash == bytes32(0)) revert MessageHashNotFound(messageId);\n            messageHashes[i] = messageHash;\n            messageIds[i] = messageId;\n            delete _pendingMessageHashes[messageId];\n        }\n\n        return\n            _dispatchMessagesToAdapters(\n                messages[0].targetChainId,\n                messageIds,\n                messageHashes,\n                messages[0].reporters,\n                messages[0].adapters\n            );\n    }\n\n    function _checkReportersAndAdapters(\n        uint256 threshold,\n        IReporter[] calldata reporters,\n        IAdapter[] calldata adapters\n    ) internal pure {\n        if (reporters.length == 0) revert NoReportersGiven();\n        if (adapters.length == 0) revert NoAdaptersGiven();\n        if (reporters.length != adapters.length) revert UnequalArrayLengths(reporters.length, adapters.length);\n        if (threshold > reporters.length || threshold == 0) revert InvalidThreshold(threshold, reporters.length);\n    }\n\n    function _dispatchMessage(\n        uint256 targetChainId,\n        uint256 threshold,\n        address receiver,\n        bytes calldata data,\n        IReporter[] calldata reporters,\n        IAdapter[] calldata adapters\n    ) internal returns (uint256, bytes32) {\n        address sender = msg.sender;\n        Message memory message = Message(\n            currentNonce,\n            targetChainId,\n            threshold,\n            sender,\n            receiver,\n            data,\n            reporters,\n            adapters\n        );\n        bytes32 messageHash = calculateMessageHash(message);\n        uint256 messageId = calculateMessageId(block.chainid, address(this), messageHash);\n        _pendingMessageHashes[messageId] = messageHash;\n        unchecked {\n            ++currentNonce;\n        }\n        emit MessageDispatched(messageId, message);\n        return (messageId, messageHash);\n    }\n\n    function _dispatchMessageToAdapters(\n        uint256 targetChainId,\n        uint256 messageId,\n        bytes32 messageHash,\n        IReporter[] memory reporters,\n        IAdapter[] memory adapters\n    ) internal returns (bytes32[] memory) {\n        uint256[] memory messageIds = new uint256[](1);\n        bytes32[] memory messageHashes = new bytes32[](1);\n        messageIds[0] = messageId;\n        messageHashes[0] = messageHash;\n        _resetPendingMessageHashesByMessageIds(messageIds);\n        return _dispatchMessagesToAdapters(targetChainId, messageIds, messageHashes, reporters, adapters);\n    }\n\n    function _dispatchMessagesToAdapters(\n        uint256 targetChainId,\n        uint256[] memory messageIds,\n        bytes32[] memory messageHashes,\n        IReporter[] memory reporters,\n        IAdapter[] memory adapters\n    ) internal returns (bytes32[] memory) {\n        bytes32[] memory reportersReceipts = new bytes32[](reporters.length);\n\n        for (uint256 i = 0; i < reporters.length; ) {\n            reportersReceipts[i] = reporters[i].dispatchMessages(targetChainId, adapters[i], messageIds, messageHashes);\n            unchecked {\n                ++i;\n            }\n        }\n\n        return reportersReceipts;\n    }\n\n    function _resetPendingMessageHashesByMessageIds(uint256[] memory messageIds) internal {\n        for (uint256 i = 0; i < messageIds.length; ) {\n            delete _pendingMessageHashes[messageIds[i]];\n            unchecked {\n                ++i;\n            }\n        }\n    }\n}\n"
    },
    "contracts/Yaru.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.20;\n\nimport { ReentrancyGuard } from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport { IYaru } from \"./interfaces/IYaru.sol\";\nimport { IHashi, IAdapter } from \"./interfaces/IHashi.sol\";\nimport { Message } from \"./interfaces/IMessage.sol\";\nimport { MessageIdCalculator } from \"./utils/MessageIdCalculator.sol\";\nimport { MessageHashCalculator } from \"./utils/MessageHashCalculator.sol\";\nimport { IJushin } from \"./interfaces/IJushin.sol\";\n\ncontract Yaru is IYaru, MessageIdCalculator, MessageHashCalculator, ReentrancyGuard {\n    address public immutable HASHI;\n    address public immutable YAHO;\n    uint256 public immutable SOURCE_CHAIN_ID;\n\n    mapping(uint256 => bool) public executed;\n\n    constructor(address hashi, address yaho_, uint256 sourceChainId) {\n        HASHI = hashi;\n        YAHO = yaho_;\n        SOURCE_CHAIN_ID = sourceChainId;\n    }\n\n    /// @inheritdoc IYaru\n    function executeMessages(Message[] calldata messages) external nonReentrant returns (bytes[] memory) {\n        bytes[] memory returnDatas = new bytes[](messages.length);\n        for (uint256 i = 0; i < messages.length; ) {\n            Message memory message = messages[i];\n\n            bytes32 messageHash = calculateMessageHash(message);\n            uint256 messageId = calculateMessageId(SOURCE_CHAIN_ID, YAHO, messageHash);\n\n            if (message.targetChainId != block.chainid) revert InvalidToChainId(message.targetChainId, block.chainid);\n\n            if (executed[messageId]) revert MessageIdAlreadyExecuted(messageId);\n            executed[messageId] = true;\n\n            if (\n                !IHashi(HASHI).checkHashWithThresholdFromAdapters(\n                    SOURCE_CHAIN_ID,\n                    messageId,\n                    message.threshold,\n                    message.adapters\n                )\n            ) revert ThresholdNotMet();\n\n            try IJushin(message.receiver).onMessage(SOURCE_CHAIN_ID, messageId, message.sender, message.data) returns (\n                bytes memory returnData\n            ) {\n                returnDatas[i] = returnData;\n            } catch {\n                revert CallFailed();\n            }\n\n            emit MessageExecuted(messageId, message);\n\n            unchecked {\n                ++i;\n            }\n        }\n        return returnDatas;\n    }\n}\n"
    },
    "contracts/YourContract.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\n// Useful for debugging. Remove when deploying to a live network.\nimport \"hardhat/console.sol\";\n\n// Use openzeppelin to inherit battle-tested implementations (ERC20, ERC721, etc)\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * A smart contract that allows changing a state variable of the contract and tracking the changes\n * It also allows the owner to withdraw the Ether in the contract\n * @author BuidlGuidl\n */\ncontract YourContract {\n\t// State Variables\n\taddress public immutable owner;\n\tstring public greeting = \"Building Unstoppable Apps!!!\";\n\tbool public premium = false;\n\tuint256 public totalCounter = 0;\n\tmapping(address => uint) public userGreetingCounter;\n\n\t// Events: a way to emit log statements from smart contract that can be listened to by external parties\n\tevent GreetingChange(\n\t\taddress indexed greetingSetter,\n\t\tstring newGreeting,\n\t\tbool premium,\n\t\tuint256 value\n\t);\n\n\t// Constructor: Called once on contract deployment\n\t// Check packages/hardhat/deploy/00_deploy_your_contract.ts\n\tconstructor(address _owner) {\n\t\towner = _owner;\n\t}\n\n\t// Modifier: used to define a set of rules that must be met before or after a function is executed\n\t// Check the withdraw() function\n\tmodifier isOwner() {\n\t\t// msg.sender: predefined variable that represents address of the account that called the current function\n\t\trequire(msg.sender == owner, \"Not the Owner\");\n\t\t_;\n\t}\n\n\t/**\n\t * Function that allows anyone to change the state variable \"greeting\" of the contract and increase the counters\n\t *\n\t * @param _newGreeting (string memory) - new greeting to save on the contract\n\t */\n\tfunction setGreeting(string memory _newGreeting) public payable {\n\t\t// Print data to the hardhat chain console. Remove when deploying to a live network.\n\t\tconsole.log(\n\t\t\t\"Setting new greeting '%s' from %s\",\n\t\t\t_newGreeting,\n\t\t\tmsg.sender\n\t\t);\n\n\t\t// Change state variables\n\t\tgreeting = _newGreeting;\n\t\ttotalCounter += 1;\n\t\tuserGreetingCounter[msg.sender] += 1;\n\n\t\t// msg.value: built-in global variable that represents the amount of ether sent with the transaction\n\t\tif (msg.value > 0) {\n\t\t\tpremium = true;\n\t\t} else {\n\t\t\tpremium = false;\n\t\t}\n\n\t\t// emit: keyword used to trigger an event\n\t\temit GreetingChange(msg.sender, _newGreeting, msg.value > 0, msg.value);\n\t}\n\n\t/**\n\t * Function that allows the owner to withdraw all the Ether in the contract\n\t * The function can only be called by the owner of the contract as defined by the isOwner modifier\n\t */\n\tfunction withdraw() public isOwner {\n\t\t(bool success, ) = owner.call{ value: address(this).balance }(\"\");\n\t\trequire(success, \"Failed to send Ether\");\n\t}\n\n\t/**\n\t * Function that allows the contract to receive ETH\n\t */\n\treceive() external payable {}\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nlibrary console {\n    address constant CONSOLE_ADDRESS =\n        0x000000000000000000636F6e736F6c652e6c6f67;\n\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\n        address consoleAddress = CONSOLE_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            pop(\n                staticcall(\n                    gas(),\n                    consoleAddress,\n                    add(payload, 32),\n                    mload(payload),\n                    0,\n                    0\n                )\n            )\n        }\n    }\n\n    function _castToPure(\n      function(bytes memory) internal view fnIn\n    ) internal pure returns (function(bytes memory) pure fnOut) {\n        assembly {\n            fnOut := fnIn\n        }\n    }\n\n    function _sendLogPayload(bytes memory payload) internal pure {\n        _castToPure(_sendLogPayloadImplementation)(payload);\n    }\n\n    function log() internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\n    }\n    function logInt(int256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n    }\n\n    function logUint(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function logString(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function logBool(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function logAddress(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function logBytes(bytes memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n    }\n\n    function logBytes1(bytes1 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n    }\n\n    function logBytes2(bytes2 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n    }\n\n    function logBytes3(bytes3 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n    }\n\n    function logBytes4(bytes4 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n    }\n\n    function logBytes5(bytes5 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n    }\n\n    function logBytes6(bytes6 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n    }\n\n    function logBytes7(bytes7 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n    }\n\n    function logBytes8(bytes8 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n    }\n\n    function logBytes9(bytes9 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n    }\n\n    function logBytes10(bytes10 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n    }\n\n    function logBytes11(bytes11 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n    }\n\n    function logBytes12(bytes12 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n    }\n\n    function logBytes13(bytes13 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n    }\n\n    function logBytes14(bytes14 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n    }\n\n    function logBytes15(bytes15 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n    }\n\n    function logBytes16(bytes16 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n    }\n\n    function logBytes17(bytes17 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n    }\n\n    function logBytes18(bytes18 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n    }\n\n    function logBytes19(bytes19 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n    }\n\n    function logBytes20(bytes20 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n    }\n\n    function logBytes21(bytes21 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n    }\n\n    function logBytes22(bytes22 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n    }\n\n    function logBytes23(bytes23 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n    }\n\n    function logBytes24(bytes24 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n    }\n\n    function logBytes25(bytes25 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n    }\n\n    function logBytes26(bytes26 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n    }\n\n    function logBytes27(bytes27 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n    }\n\n    function logBytes28(bytes28 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n    }\n\n    function logBytes29(bytes29 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n    }\n\n    function logBytes30(bytes30 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n    }\n\n    function logBytes31(bytes31 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n    }\n\n    function logBytes32(bytes32 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n    }\n\n    function log(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function log(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function log(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function log(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function log(uint256 p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n    }\n\n    function log(uint256 p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n    }\n\n    function log(uint256 p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n    }\n\n    function log(uint256 p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n    }\n\n    function log(string memory p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n    }\n\n    function log(string memory p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n\n    function log(string memory p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n    }\n\n    function log(string memory p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n    }\n\n    function log(bool p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n    }\n\n    function log(bool p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n    }\n\n    function log(bool p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n    }\n\n    function log(bool p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n    }\n\n    function log(address p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n    }\n\n    function log(address p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n    }\n\n    function log(address p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n    }\n\n    function log(address p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n    }\n\n}\n"
    },
    "solidity-rlp/contracts/RLPReader.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n * @author Hamdi Allam hamdi.allam97@gmail.com\n * Please reach out with any questions or concerns\n */\npragma solidity >=0.5.10 <0.9.0;\n\nlibrary RLPReader {\n    uint8 constant STRING_SHORT_START = 0x80;\n    uint8 constant STRING_LONG_START = 0xb8;\n    uint8 constant LIST_SHORT_START = 0xc0;\n    uint8 constant LIST_LONG_START = 0xf8;\n    uint8 constant WORD_SIZE = 32;\n\n    struct RLPItem {\n        uint256 len;\n        uint256 memPtr;\n    }\n\n    struct Iterator {\n        RLPItem item; // Item that's being iterated over.\n        uint256 nextPtr; // Position of the next item in the list.\n    }\n\n    /*\n     * @dev Returns the next element in the iteration. Reverts if it has not next element.\n     * @param self The iterator.\n     * @return The next element in the iteration.\n     */\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\n        require(hasNext(self));\n\n        uint256 ptr = self.nextPtr;\n        uint256 itemLength = _itemLength(ptr);\n        self.nextPtr = ptr + itemLength;\n\n        return RLPItem(itemLength, ptr);\n    }\n\n    /*\n     * @dev Returns true if the iteration has more elements.\n     * @param self The iterator.\n     * @return true if the iteration has more elements.\n     */\n    function hasNext(Iterator memory self) internal pure returns (bool) {\n        RLPItem memory item = self.item;\n        return self.nextPtr < item.memPtr + item.len;\n    }\n\n    /*\n     * @param item RLP encoded bytes\n     */\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\n        uint256 memPtr;\n        assembly {\n            memPtr := add(item, 0x20)\n        }\n\n        return RLPItem(item.length, memPtr);\n    }\n\n    /*\n     * @dev Create an iterator. Reverts if item is not a list.\n     * @param self The RLP item.\n     * @return An 'Iterator' over the item.\n     */\n    function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\n        require(isList(self));\n\n        uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\n        return Iterator(self, ptr);\n    }\n\n    /*\n     * @param the RLP item.\n     */\n    function rlpLen(RLPItem memory item) internal pure returns (uint256) {\n        return item.len;\n    }\n\n    /*\n     * @param the RLP item.\n     * @return (memPtr, len) pair: location of the item's payload in memory.\n     */\n    function payloadLocation(RLPItem memory item) internal pure returns (uint256, uint256) {\n        uint256 offset = _payloadOffset(item.memPtr);\n        uint256 memPtr = item.memPtr + offset;\n        uint256 len = item.len - offset; // data length\n        return (memPtr, len);\n    }\n\n    /*\n     * @param the RLP item.\n     */\n    function payloadLen(RLPItem memory item) internal pure returns (uint256) {\n        (, uint256 len) = payloadLocation(item);\n        return len;\n    }\n\n    /*\n     * @param the RLP item containing the encoded list.\n     */\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\n        require(isList(item));\n\n        uint256 items = numItems(item);\n        RLPItem[] memory result = new RLPItem[](items);\n\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\n        uint256 dataLen;\n        for (uint256 i = 0; i < items; i++) {\n            dataLen = _itemLength(memPtr);\n            result[i] = RLPItem(dataLen, memPtr);\n            memPtr = memPtr + dataLen;\n        }\n\n        return result;\n    }\n\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\n    function isList(RLPItem memory item) internal pure returns (bool) {\n        if (item.len == 0) return false;\n\n        uint8 byte0;\n        uint256 memPtr = item.memPtr;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n\n        if (byte0 < LIST_SHORT_START) return false;\n        return true;\n    }\n\n    /*\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\n     * @return keccak256 hash of RLP encoded bytes.\n     */\n    function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\n        uint256 ptr = item.memPtr;\n        uint256 len = item.len;\n        bytes32 result;\n        assembly {\n            result := keccak256(ptr, len)\n        }\n        return result;\n    }\n\n    /*\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\n     * @return keccak256 hash of the item payload.\n     */\n    function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\n        bytes32 result;\n        assembly {\n            result := keccak256(memPtr, len)\n        }\n        return result;\n    }\n\n    /** RLPItem conversions into data types **/\n\n    // @returns raw rlp encoding in bytes\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\n        bytes memory result = new bytes(item.len);\n        if (result.length == 0) return result;\n\n        uint256 ptr;\n        assembly {\n            ptr := add(0x20, result)\n        }\n\n        copy(item.memPtr, ptr, item.len);\n        return result;\n    }\n\n    // any non-zero byte except \"0x80\" is considered true\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\n        require(item.len == 1);\n        uint256 result;\n        uint256 memPtr = item.memPtr;\n        assembly {\n            result := byte(0, mload(memPtr))\n        }\n\n        // SEE Github Issue #5.\n        // Summary: Most commonly used RLP libraries (i.e Geth) will encode\n        // \"0\" as \"0x80\" instead of as \"0\". We handle this edge case explicitly\n        // here.\n        if (result == 0 || result == STRING_SHORT_START) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    function toAddress(RLPItem memory item) internal pure returns (address) {\n        // 1 byte for the length prefix\n        require(item.len == 21);\n\n        return address(uint160(toUint(item)));\n    }\n\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\n        require(item.len > 0 && item.len <= 33);\n\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\n\n        uint256 result;\n        assembly {\n            result := mload(memPtr)\n\n            // shift to the correct location if neccesary\n            if lt(len, 32) {\n                result := div(result, exp(256, sub(32, len)))\n            }\n        }\n\n        return result;\n    }\n\n    // enforces 32 byte length\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\n        // one byte prefix\n        require(item.len == 33);\n\n        uint256 result;\n        uint256 memPtr = item.memPtr + 1;\n        assembly {\n            result := mload(memPtr)\n        }\n\n        return result;\n    }\n\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\n        require(item.len > 0);\n\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\n        bytes memory result = new bytes(len);\n\n        uint256 destPtr;\n        assembly {\n            destPtr := add(0x20, result)\n        }\n\n        copy(memPtr, destPtr, len);\n        return result;\n    }\n\n    /*\n     * Private Helpers\n     */\n\n    // @return number of payload items inside an encoded list.\n    function numItems(RLPItem memory item) private pure returns (uint256) {\n        if (item.len == 0) return 0;\n\n        uint256 count = 0;\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\n        uint256 endPtr = item.memPtr + item.len;\n        while (currPtr < endPtr) {\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\n            count++;\n        }\n\n        return count;\n    }\n\n    // @return entire rlp item byte length\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\n        uint256 itemLen;\n        uint256 byte0;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n\n        if (byte0 < STRING_SHORT_START) {\n            itemLen = 1;\n        } else if (byte0 < STRING_LONG_START) {\n            itemLen = byte0 - STRING_SHORT_START + 1;\n        } else if (byte0 < LIST_SHORT_START) {\n            assembly {\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\n                memPtr := add(memPtr, 1) // skip over the first byte\n\n                /* 32 byte word size */\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\n                itemLen := add(dataLen, add(byteLen, 1))\n            }\n        } else if (byte0 < LIST_LONG_START) {\n            itemLen = byte0 - LIST_SHORT_START + 1;\n        } else {\n            assembly {\n                let byteLen := sub(byte0, 0xf7)\n                memPtr := add(memPtr, 1)\n\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\n                itemLen := add(dataLen, add(byteLen, 1))\n            }\n        }\n\n        return itemLen;\n    }\n\n    // @return number of bytes until the data\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\n        uint256 byte0;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n\n        if (byte0 < STRING_SHORT_START) {\n            return 0;\n        } else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)) {\n            return 1;\n        } else if (byte0 < LIST_SHORT_START) {\n            // being explicit\n            return byte0 - (STRING_LONG_START - 1) + 1;\n        } else {\n            return byte0 - (LIST_LONG_START - 1) + 1;\n        }\n    }\n\n    /*\n     * @param src Pointer to source\n     * @param dest Pointer to destination\n     * @param len Amount of memory to copy from the source\n     */\n    function copy(uint256 src, uint256 dest, uint256 len) private pure {\n        if (len == 0) return;\n\n        // copy as many word sizes as possible\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n\n            src += WORD_SIZE;\n            dest += WORD_SIZE;\n        }\n\n        if (len > 0) {\n            // left over bytes. Mask is used to remove unwanted bytes from the word\n            uint256 mask = 256**(WORD_SIZE - len) - 1;\n            assembly {\n                let srcpart := and(mload(src), not(mask)) // zero out src\n                let destpart := and(mload(dest), mask) // retrieve the bytes\n                mstore(dest, or(destpart, srcpart))\n            }\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "viaIR": true,
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}