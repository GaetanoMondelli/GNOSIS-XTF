{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "contracts/interfaces/IAdapter.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.0;\n\n/**\n * @title IAdapter\n */\ninterface IAdapter {\n    error ConflictingBlockHeader(uint256 blockNumber, bytes32 blockHash, bytes32 storedBlockHash);\n    error InvalidBlockHeaderLength(uint256 length);\n    error InvalidBlockHeaderRLP();\n\n    /**\n     * @dev Emitted when a hash is stored.\n     * @param id - The ID of the stored hash.\n     * @param hash - The stored hash as bytes32 values.\n     */\n    event HashStored(uint256 indexed id, bytes32 indexed hash);\n\n    /**\n     * @dev Returns the hash for a given ID.\n     * @param domain - Identifier for the domain to query.\n     * @param id - Identifier for the ID to query.\n     * @return hash Bytes32 hash for the given ID on the given domain.\n     * @notice MUST return bytes32(0) if the hash is not present.\n     */\n    function getHash(uint256 domain, uint256 id) external view returns (bytes32 hash);\n}\n"
    },
    "contracts/interfaces/IGiriGiriBashi.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport { IAdapter } from \"./IAdapter.sol\";\nimport { IHashi } from \"./IHashi.sol\";\nimport { IShuSho } from \"./IShuSho.sol\";\n\n/**\n * @title IGiriGiriBashi\n */\ninterface IGiriGiriBashi is IShuSho {\n    struct Challenge {\n        address payable challenger; // account that raised the challenge.\n        uint256 timestamp; // timestamp when the challenge was created.\n        uint256 bond; // bond paid by the challenger.\n    }\n\n    struct Settings {\n        bool quarantined; // whether or not the adapter has been quarantined.\n        uint256 minimumBond; // amount that must be bonded alongside a challenge.\n        uint256 startId; // earliest id that the adapter could have stored.\n        uint256 idDepth; // how far behind the current head can this adapter safely report. 0 equals infinite.\n        uint256 timeout; // grace period in which the adapter must report on an in-range id after being challenged.\n    }\n\n    error AdaptersCannotContainChallengedAdapter(IAdapter[] adapters, IAdapter adapter);\n    error AdapterHasNotYetTimedOut(IAdapter adapter);\n    error AdapterNotQuarantined(IAdapter adapter);\n    error AlreadyQuarantined(IAdapter adapter);\n    error CannotProveNoConfidence(uint256 domain, uint256 id, IAdapter[] adapters);\n    error ChallengeNotFound(bytes32 challengeId, uint256 domain, uint256 id, IAdapter adapter);\n    error ChallengeRangeAlreadySet(uint256 domain);\n    error CountMustBeZero(uint256 domain);\n    error DuplicateChallenge(bytes32 challengeId, uint256 domain, uint256 id, IAdapter adapter);\n    error NoConfidenceRequired();\n    error NotEnoughValue(IAdapter adapter, uint256 value);\n    error OutOfRange(IAdapter adapter, uint256 id);\n    error UnequalArrayLengths();\n\n    /**\n     * @dev Emitted when the bond recipient address is set.\n     * @param bondRecipient - The new bond recipient address as an Ethereum address.\n     */\n    event BondRecipientSet(address payable bondRecipient);\n\n    /**\n     * @dev Emitted when a challenge is created.\n     * @param challengeId - The unique identifier for the challenge.\n     * @param domain - The domain associated with the challenge.\n     * @param id - The identifier associated with the challenge.\n     * @param adapter - The adapter address associated with the challenge.\n     * @param challenger - The address of the challenger.\n     * @param timestamp - The timestamp when the challenge was created.\n     * @param bond - The bond amount associated with the challenge.\n     */\n    event ChallengeCreated(\n        bytes32 challengeId,\n        uint256 indexed domain,\n        uint256 id,\n        IAdapter indexed adapter,\n        address indexed challenger,\n        uint256 timestamp,\n        uint256 bond\n    );\n\n    /**\n     * @dev Emitted when the challenge range is updated.\n     * @param domain - The domain associated with the updated challenge range.\n     * @param range - The new challenge range as a Uint256 identifier.\n     */\n    event ChallengeRangeUpdated(uint256 domain, uint256 range);\n\n    /**\n     * @dev Emitted when a challenge is resolved.\n     * @param challengeId - The unique identifier for the resolved challenge.\n     * @param domain - The domain associated with the resolved challenge.\n     * @param id - The identifier associated with the resolved challenge.\n     * @param adapter - The adapter address associated with the resolved challenge.\n     * @param challenger - The address of the challenger.\n     * @param bond - The bond amount associated with the resolved challenge.\n     * @param challengeSuccessful - A boolean indicating whether the challenge was successful.\n     */\n    event ChallengeResolved(\n        bytes32 challengeId,\n        uint256 indexed domain,\n        uint256 id,\n        IAdapter indexed adapter,\n        address indexed challenger,\n        uint256 bond,\n        bool challengeSuccessful\n    );\n\n    /**\n     * @dev Emitted when a new head is updated.\n     * @param domain - The domain associated with the new head.\n     * @param head - The new head as a Uint256 identifier.\n     */\n    event NewHead(uint256 domain, uint256 head);\n\n    /**\n     * @dev Emitted when a declaration of no confidence is made for a specific domain.\n     * @param domain - The domain associated with the declaration.\n     */\n    event NoConfidenceDeclared(uint256 domain);\n\n    /**\n     * @dev Emitted when settings are initialized for a specific domain and adapter.\n     * @param domain - The domain associated with the initialized settings.\n     * @param adapter - The adapter address associated with the initialized settings.\n     * @param settings - The initialized settings object.\n     */\n    event SettingsInitialized(uint256 domain, IAdapter adapter, Settings settings);\n\n    /**\n     * @dev Challenges the adapter to provide a response. If the adapter fails, it can be quarantined.\n     * @param domain - The Uint256 identifier for the domain.\n     * @param id - The Uint256 identifier for the challenge.\n     * @param adapter - The address of the adapter to challenge.\n     * @notice Caller must pay a minimum bond to issue the challenge. This bond should be high enough to cover the gas costs for successfully completing the challenge.\n     */\n    function challengeAdapter(uint256 domain, uint256 id, IAdapter adapter) external payable;\n\n    /**\n     * @dev Show that enough adapters disagree that they could not make a threshold if the remainder all agree with one.\n     * @param domain - The Uint256 identifier for the domain.\n     * @param id - The Uint256 identifier.\n     * @param adapters - An array of adapter instances.\n     */\n    function declareNoConfidence(uint256 domain, uint256 id, IAdapter[] memory adapters) external;\n\n    /**\n     * @dev Disables a set of adapters for a given domain.\n     * @param domain - The Uint256 identifier for the domain.\n     * @param adapters - An array of adapter instances to be disabled.\n     */\n    function disableAdapters(uint256 domain, IAdapter[] memory adapters) external;\n\n    /**\n     * @dev Enables a set of adapters for a given domain with specific settings.\n     * @param domain - The Uint256 identifier for the domain.\n     * @param adapters - An array of adapter instances.\n     * @param settings - An array of settings, corresponding to each adapter.\n     */\n    function enableAdapters(uint256 domain, IAdapter[] memory adapters, Settings[] memory settings) external;\n\n    /**\n     * @dev Get the current challenge given a challengeId.\n     * @param challengeId - The Bytes32 identifier for the challenge.\n     * @return challenge - Challenge indicating the challenge parameters.\n     */\n    function getChallenge(bytes32 challengeId) external view returns (Challenge memory);\n\n    /**\n     * @dev Gets the challenge ID for a given domain, ID, and adapter.\n     * @param domain - The Uint256 identifier for the domain.\n     * @param id - The Uint256 identifier.\n     * @param adapter - The adapter instance.\n     * @return The computed challenge ID as a bytes32 hash.\n     */\n    function getChallengeId(uint256 domain, uint256 id, IAdapter adapter) external pure returns (bytes32);\n\n    /**\n     * @dev Get how far beyond the current highestId can be challenged.\n     * @param domain - The Uint256 identifier for the domain.\n     * @return range - Uint256 indicating the challenge range.\n     */\n    function getChallengeRange(uint256 domain) external view returns (uint256);\n\n    /**\n     * @dev Returns the hash agreed upon by a threshold of the enabled adapters.\n     * @param domain - Uint256 identifier for the domain to query.\n     * @param id - Uint256 identifier to query.\n     * @return hash - Bytes32 hash agreed upon by a threshold of the adapters for the given domain.\n     * @notice Reverts if no threshold is not reached.\n     * @notice Reverts if no adapters are set for the given domain.\n     */\n    function getThresholdHash(uint256 domain, uint256 id) external returns (bytes32);\n\n    /**\n     * @dev Returns the hash unanimously agreed upon by ALL of the enabled adapters.\n     * @param domain - Uint256 identifier for the domain to query.\n     * @param id - Uint256 identifier to query.\n     * @return hash - Bytes32 hash agreed upon by the adapters for the given domain.\n     * @notice Reverts if adapters disagree.\n     * @notice Revert if the adapters do not yet have the hash for the given ID.\n     * @notice Reverts if no adapters are set for the given domain.\n     */\n    function getUnanimousHash(uint256 domain, uint256 id) external returns (bytes32);\n\n    /**\n     * @dev Returns the hash unanimously agreed upon by all of the given adapters.\n     * @param domain - Uint256 identifier for the domain to query.\n     * @param adapters - Array of adapter addresses to query.\n     * @param id - Uint256 identifier to query.\n     * @return hash - Bytes32 hash agreed upon by the adapters for the given domain.\n     * @notice Adapters must be in numerical order from smallest to largest and contain no duplicates.\n     * @notice Reverts if adapters are out of order or contain duplicates.\n     * @notice Reverts if adapters disagree.\n     * @notice Revert if the adapters do not yet have the hash for the given ID.\n     * @notice Reverts if no adapters are set for the given domain.\n     */\n    function getHash(uint256 domain, uint256 id, IAdapter[] memory adapters) external returns (bytes32);\n\n    /**\n     * @dev Returns the highest id reported for a given id\n     * @param domain - Uint256 identifier for the domain to query.\n     * @return id - Uint256 indicating the highest id reported.\n     */\n    function getHead(uint256 domain) external view returns (uint256);\n\n    /**\n     * @dev Get the current settings for a given adapter.\n     * @param domain - Uint256 identifier for the domain to query.\n     * @param adapter - The adapter.\n     * @return settings - The Settings for the given adapter.\n     */\n    function getSettings(uint256 domain, IAdapter adapter) external view returns (Settings memory);\n\n    /**\n     * @dev Replaces the quarantined adapters for a given domain with new adapters and settings.\n     * @param domain - The Uint256 identifier for the domain.\n     * @param currentAdapters - An array of current adapter instances to be replaced.\n     * @param newAdapters - An array of new adapter instances to replace the current ones.\n     * @param settings - An array of settings corresponding to the new adapters.\n     */\n    function replaceQuarantinedAdapters(\n        uint256 domain,\n        IAdapter[] memory currentAdapters,\n        IAdapter[] memory newAdapters,\n        Settings[] memory settings\n    ) external;\n\n    /**\n     * @dev Resolves a challenge by comparing results from a specific adapter with others.\n     * @param domain - The Uint256 identifier for the domain.\n     * @param id - The Uint256 identifier.\n     * @param adapter - The adapter instance for comparison.\n     * @param adapters - An array of adapter instances for comparison.\n     * @return A boolean indicating the success of the challenge resolution.\n     */\n    function resolveChallenge(\n        uint256 domain,\n        uint256 id,\n        IAdapter adapter,\n        IAdapter[] memory adapters\n    ) external returns (bool);\n\n    /**\n     * @dev Sets the bond recipient address for payments.\n     * @param bondRecipient - The address where bond payments should be sent.\n     */\n    function setBondRecipient(address payable bondRecipient) external;\n\n    /**\n     * @dev Sets the challenge range for a specific domain.\n     * @param domain - The Uint256 identifier for the domain.\n     * @param range - The Uint256 range to set for the given domain.\n     */\n    function setChallengeRange(uint256 domain, uint256 range) external;\n\n    /**\n     * @dev Sets the threshold for a specific domain.\n     * @param domain - The Uint256 identifier for the domain.\n     * @param threshold - The Uint256 threshold to set for the given domain.\n     */\n    function setThreshold(uint256 domain, uint256 threshold) external;\n}\n"
    },
    "contracts/interfaces/IHashi.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport { IAdapter } from \"./IAdapter.sol\";\n\n/**\n * @title IHashi\n */\ninterface IHashi {\n    error AdaptersDisagree(IAdapter adapterOne, IAdapter adapterTwo);\n    error HashNotAvailableInAdapter(IAdapter adapter);\n    error InvalidThreshold(uint256 threshold, uint256 maxThreshold);\n    error NoAdaptersGiven();\n\n    /**\n     * @dev Checks whether the threshold is reached for a message given a set of adapters.\n     * @param domain - ID of the domain to query.\n     * @param id - ID for which to return hash.\n     * @param threshold - Threshold to use.\n     * @param adapters - Array of addresses for the adapters to query.\n     * @notice If the threshold is 1, it will always return true.\n     * @return result A boolean indicating if a threshold for a given message has been reached.\n     */\n    function checkHashWithThresholdFromAdapters(\n        uint256 domain,\n        uint256 id,\n        uint256 threshold,\n        IAdapter[] calldata adapters\n    ) external view returns (bool);\n\n    /**\n     * @dev Returns the hash stored by a given adapter for a given ID.\n     * @param domain - ID of the domain to query.\n     * @param id - ID for which to return a hash.\n     * @param adapter - Address of the adapter to query.\n     * @return hash stored by the given adapter for the given ID.\n     */\n    function getHashFromAdapter(uint256 domain, uint256 id, IAdapter adapter) external view returns (bytes32);\n\n    /**\n     * @dev Returns the hashes for a given ID stored by a given set of adapters.\n     * @param domain - The ID of the domain to query.\n     * @param id - The ID for which to return hashes.\n     * @param adapters - An array of addresses for the adapters to query.\n     * @return hashes An array of hashes stored by the given adapters for the specified ID.\n     */\n    function getHashesFromAdapters(\n        uint256 domain,\n        uint256 id,\n        IAdapter[] calldata adapters\n    ) external view returns (bytes32[] memory);\n\n    /**\n     * @dev Returns the hash unanimously agreed upon by a given set of adapters.\n     * @param domain - The ID of the domain to query.\n     * @param id - The ID for which to return a hash.\n     * @param adapters - An array of addresses for the adapters to query.\n     * @return hash agreed on by the given set of adapters.\n     * @notice MUST revert if adapters disagree on the hash or if an adapter does not report.\n     */\n    function getHash(uint256 domain, uint256 id, IAdapter[] calldata adapters) external view returns (bytes32);\n}\n"
    },
    "contracts/interfaces/IShoyuBashi.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport { IHashi } from \"./IHashi.sol\";\nimport { IAdapter } from \"./IAdapter.sol\";\nimport { IShuSho } from \"./IShuSho.sol\";\n\n/**\n * @title IShoyuBashi\n */\ninterface IShoyuBashi is IShuSho {\n    /**\n     * @dev Disables the given adapters for a given domain.\n     * @param domain - Uint256 identifier for the domain for which to set adapters.\n     * @param adapters - Array of adapter addresses.\n     * @notice Only callable by the owner of this contract.\n     * @notice Reverts if adapters are out of order or contain duplicates.\n     */\n    function disableAdapters(uint256 domain, IAdapter[] memory adapters) external;\n\n    /**\n     * @dev Enables the given adapters for a given domain.\n     * @param domain - Uint256 identifier for the domain for which to set adapters.\n     * @param adapters - Array of adapter addresses.\n     * @notice Only callable by the owner of this contract.\n     * @notice Reverts if adapters are out of order or contain duplicates.\n     */\n    function enableAdapters(uint256 domain, IAdapter[] memory adapters) external;\n\n    /**\n     * @dev Returns the hash unanimously agreed upon by ALL of the enabled adapters.\n     * @param domain - Uint256 identifier for the domain to query.\n     * @param id - Uint256 identifier to query.\n     * @return Bytes32 hash agreed upon by the adapters for the given domain.\n     * @notice Revert if the adapters do not yet have the hash for the given ID.\n     * @notice Reverts if adapters disagree.\n     * @notice Reverts if no adapters are set for the given domain.\n     */\n    function getUnanimousHash(uint256 domain, uint256 id) external view returns (bytes32);\n\n    /**\n     * @dev Returns the hash agreed upon by a threshold of the enabled adapters.\n     * @param domain - Uint256 identifier for the domain to query.\n     * @param id - Uint256 identifier to query.\n     * @return Bytes32 hash agreed upon by a threshold of the adapters for the given domain.\n     * @notice Reverts if the threshold is not reached.\n     * @notice Reverts if no adapters are set for the given domain.\n     */\n    function getThresholdHash(uint256 domain, uint256 id) external view returns (bytes32);\n\n    /**\n     * @dev Returns the hash unanimously agreed upon by all of the given adapters.\n     * @param domain - Uint256 identifier for the domain to query.\n     * @param adapters - Array of adapter addresses to query.\n     * @param id - Uint256 identifier to query.\n     * @return Bytes32 hash agreed upon by the adapters for the given domain.\n     * @notice adapters must be in numerical order from smallest to largest and contain no duplicates.\n     * @notice Reverts if adapters are out of order or contain duplicates.\n     * @notice Reverts if adapters disagree.\n     * @notice Revert if the adapters do not yet have the hash for the given ID.\n     * @notice Reverts if no adapters are set for the given domain.\n     */\n    function getHash(uint256 domain, uint256 id, IAdapter[] memory adapters) external view returns (bytes32);\n\n    /**\n     * @dev Sets the threshold of adapters required for a given domain.\n     * @param domain - Uint256 identifier for the domain for which to set the threshold.\n     * @param threshold - Uint256 threshold to set for the given domain.\n     * @notice Only callable by the owner of this contract.\n     * @notice Reverts if the threshold is already set to the given value.\n     */\n    function setThreshold(uint256 domain, uint256 threshold) external;\n}\n"
    },
    "contracts/interfaces/IShuSho.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport { IHashi } from \"./IHashi.sol\";\nimport { IAdapter } from \"./IAdapter.sol\";\n\n/**\n * @title IShuSho\n */\ninterface IShuSho {\n    struct Domain {\n        uint256 threshold;\n        uint256 count;\n    }\n\n    struct Link {\n        IAdapter previous;\n        IAdapter next;\n    }\n\n    error AdapterNotEnabled(IAdapter adapter);\n    error AdapterAlreadyEnabled(IAdapter adapter);\n    error CountCannotBeZero();\n    error DuplicateHashiAddress(IHashi hashi);\n    error DuplicateOrOutOfOrderAdapters(IAdapter adapterOne, IAdapter adapterTwo);\n    error DuplicateThreashold(uint256 threshold);\n    error InvalidAdapter(IAdapter adapter);\n    error InvalidThreshold(uint256 threshold);\n    error NoAdaptersEnabled(uint256 domain);\n    error NoAdaptersGiven();\n    error ThresholdNotMet();\n\n    /**\n     * @dev Emitted when adapters are disabled for a specific domain.\n     * @param domain - The domain associated with the disabled adapters.\n     * @param adapters - An array of disabled adapter addresses associated with this event.\n     */\n    event AdaptersDisabled(uint256 indexed domain, IAdapter[] adapters);\n\n    /**\n     * @dev Emitted when adapters are enabled for a specific domain.\n     * @param domain - The domain associated with the enabled adapters.\n     * @param adapters - An array of enabled adapter addresses associated with this event.\n     */\n    event AdaptersEnabled(uint256 indexed domain, IAdapter[] adapters);\n\n    /**\n     * @dev Emitted when the address of the IHashi contract is set.\n     * @param hashi - The address of the IHashi contract associated with this event.\n     */\n    event HashiSet(IHashi indexed hashi);\n\n    /**\n     * @dev Emitted when initialization occurs with the owner's address and the IHashi contract address.\n     * @param owner - The address of the owner associated with this event.\n     * @param hashi - The address of the IHashi contract associated with this event.\n     */\n    event Init(address indexed owner, IHashi indexed hashi);\n\n    /**\n     * @dev Emitted when the threshold is set for a specific domain.\n     * @param domain - The domain associated with the set threshold.\n     * @param threshold - The new threshold value associated with this event.\n     */\n    event ThresholdSet(uint256 domain, uint256 threshold);\n\n    /**\n     * @dev Checks the order and validity of adapters for a given domain.\n     * @param domain - The Uint256 identifier for the domain.\n     * @param _adapters - An array of adapter instances.\n     */\n    function checkAdapterOrderAndValidity(uint256 domain, IAdapter[] memory _adapters) external view;\n\n    /**\n     * @dev Get the previous and the next adapter given a domain and an adapter.\n     * @param domain - Uint256 identifier for the domain.\n     * @param adapter - IAdapter value for the adapter.\n     * @return link - The Link struct containing the previous and the next adapter.\n     */\n    function getAdapterLink(uint256 domain, IAdapter adapter) external view returns (Link memory);\n\n    /**\n     * @dev Returns an array of enabled adapters for a given domain.\n     * @param domain - Uint256 identifier for the domain for which to list adapters.\n     * @return adapters - The adapters for a given domain.\n     */\n    function getAdapters(uint256 domain) external view returns (IAdapter[] memory);\n\n    /**\n     * @dev Get the current configuration for a given domain.\n     * @param domain - Uint256 identifier for the domain.\n     * @return domain - The Domain struct containing the current configuration for a given domain.\n     */\n    function getDomain(uint256 domain) external view returns (Domain memory);\n\n    /**\n     * @dev Returns the threshold and count for a given domain.\n     * @param domain - Uint256 identifier for the domain.\n     * @return threshold - Uint256 adapters threshold for the given domain.\n     * @return count - Uint256 adapters count for the given domain.\n     * @notice If the threshold for a domain has not been set, or is explicitly set to 0, this function will return a threshold equal to the adapters count for the given domain.\n     */\n    function getThresholdAndCount(uint256 domain) external view returns (uint256, uint256);\n\n    /**\n     * @dev Returns the address of the specified Hashi.\n     * @return hashi - The Hashi address.\n     */\n    function hashi() external view returns (IHashi);\n}\n"
    },
    "contracts/ownable/GiriGiriBashi.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.20;\n\nimport { ShuSo } from \"./ShuSo.sol\";\nimport { IAdapter } from \"../interfaces/IAdapter.sol\";\nimport { IHashi } from \"../interfaces/IHashi.sol\";\nimport { IGiriGiriBashi } from \"../interfaces/IGiriGiriBashi.sol\";\n\ncontract GiriGiriBashi is IGiriGiriBashi, ShuSo {\n    address payable public bondRecipient;\n\n    mapping(uint256 => uint256) private _heads;\n    mapping(uint256 => uint256) private _challengeRanges;\n    mapping(uint256 => mapping(IAdapter => Settings)) private _settings;\n    mapping(bytes32 => Challenge) private _challenges;\n\n    constructor(address _owner, address _hashi, address payable _bondRecipient) ShuSo(_owner, _hashi) {\n        bondRecipient = _bondRecipient;\n    }\n\n    modifier noConfidence(uint256 domain) {\n        if (getDomain(domain).threshold != type(uint256).max) revert NoConfidenceRequired();\n        _;\n    }\n\n    modifier zeroCount(uint256 domain) {\n        Domain memory domainConfigs = getDomain(domain);\n        if (domainConfigs.count != 0 && domainConfigs.threshold > 0) revert CountMustBeZero(domain);\n        _;\n    }\n\n    /// @inheritdoc IGiriGiriBashi\n    function challengeAdapter(uint256 domain, uint256 id, IAdapter adapter) public payable {\n        if (getAdapterLink(domain, adapter).previous == IAdapter(address(0))) revert AdapterNotEnabled(adapter);\n        if (msg.value < _settings[domain][adapter].minimumBond) revert NotEnoughValue(adapter, msg.value);\n        if (_settings[domain][adapter].quarantined) revert AlreadyQuarantined(adapter);\n\n        bytes32 challengeId = getChallengeId(domain, id, adapter);\n        if (_challenges[challengeId].challenger != address(0))\n            revert DuplicateChallenge(challengeId, domain, id, adapter);\n\n        // check if id is lower than startId, revert if true.\n        // check if id is less than highestId + challengeRange, revert if false\n        // check if id is lower than highestId - idDepth, revert if true\n        uint256 challengeRange = _challengeRanges[domain];\n        uint256 idDepth = _settings[domain][adapter].idDepth;\n        uint256 head = _heads[domain];\n        if (\n            id < _settings[domain][adapter].startId || // before start id\n            (challengeRange != 0 && id >= head && id - head > challengeRange) || // over domain challenge range\n            (idDepth != 0 && head > idDepth && id <= head - idDepth) // outside of adapter idDepth\n        ) revert OutOfRange(adapter, id);\n\n        Challenge storage challenge = _challenges[challengeId];\n        challenge.challenger = payable(msg.sender);\n        challenge.timestamp = block.timestamp;\n        challenge.bond = msg.value;\n\n        emit ChallengeCreated(challengeId, domain, id, adapter, msg.sender, block.timestamp, msg.value);\n    }\n\n    /// @inheritdoc IGiriGiriBashi\n    function enableAdapters(\n        uint256 domain,\n        IAdapter[] memory adapters,\n        Settings[] memory settings\n    ) public zeroCount(domain) {\n        _enableAdapters(domain, adapters);\n        initSettings(domain, adapters, settings);\n    }\n\n    /// @inheritdoc IGiriGiriBashi\n    function declareNoConfidence(uint256 domain, uint256 id, IAdapter[] memory adapters) public {\n        checkAdapterOrderAndValidity(domain, adapters);\n        (uint256 threshold, uint256 count) = getThresholdAndCount(domain);\n\n        if (adapters.length != count) revert CannotProveNoConfidence(domain, id, adapters);\n\n        bytes32[] memory hashes = new bytes32[](adapters.length);\n        uint256 zeroHashes = 0;\n        for (uint256 i = 0; i < adapters.length; i++) {\n            hashes[i] = adapters[i].getHash(domain, id);\n            if (hashes[i] == bytes32(0)) zeroHashes++;\n            if (zeroHashes == threshold) revert CannotProveNoConfidence(domain, id, adapters);\n        }\n\n        for (uint256 i = 0; i < hashes.length; i++) {\n            uint256 equalHashes = 1;\n            for (uint256 j = 0; j < hashes.length; j++) {\n                if (hashes[i] == hashes[j] && i != j) {\n                    equalHashes++;\n                }\n            }\n\n            if (equalHashes + zeroHashes >= threshold) revert CannotProveNoConfidence(domain, id, adapters);\n        }\n\n        _setDomainThreshold(domain, type(uint256).max);\n        delete _challengeRanges[domain];\n\n        emit NoConfidenceDeclared(domain);\n    }\n\n    /// @inheritdoc IGiriGiriBashi\n    function disableAdapters(uint256 domain, IAdapter[] memory adapters) public noConfidence(domain) {\n        _disableAdapters(domain, adapters);\n        if (getDomain(domain).count == 0) _setDomainThreshold(domain, 0);\n    }\n\n    /// @inheritdoc IGiriGiriBashi\n    function getSettings(uint256 domain, IAdapter adapter) external view returns (Settings memory) {\n        return _settings[domain][adapter];\n    }\n\n    /// @inheritdoc IGiriGiriBashi\n    function getChallenge(bytes32 challengeId) external view returns (Challenge memory) {\n        return _challenges[challengeId];\n    }\n\n    /// @inheritdoc IGiriGiriBashi\n    function getChallengeId(uint256 domain, uint256 id, IAdapter adapter) public pure returns (bytes32 challengeId) {\n        challengeId = keccak256(abi.encodePacked(domain, id, adapter));\n    }\n\n    /// @inheritdoc IGiriGiriBashi\n    function getChallengeRange(uint256 domain) external view returns (uint256) {\n        return _challengeRanges[domain];\n    }\n\n    /// @inheritdoc IGiriGiriBashi\n    function getHead(uint256 domain) external view returns (uint256) {\n        return _heads[domain];\n    }\n\n    /// @inheritdoc IGiriGiriBashi\n    function getThresholdHash(uint256 domain, uint256 id) public returns (bytes32 hash) {\n        hash = _getThresholdHash(domain, id);\n        updateHead(domain, id);\n    }\n\n    /// @inheritdoc IGiriGiriBashi\n    function getUnanimousHash(uint256 domain, uint256 id) public returns (bytes32 hash) {\n        hash = _getUnanimousHash(domain, id);\n        updateHead(domain, id);\n    }\n\n    /// @inheritdoc IGiriGiriBashi\n    function getHash(uint256 domain, uint256 id, IAdapter[] memory adapters) public returns (bytes32 hash) {\n        hash = _getHash(domain, id, adapters);\n        updateHead(domain, id);\n    }\n\n    /// @inheritdoc IGiriGiriBashi\n    function replaceQuarantinedAdapters(\n        uint256 domain,\n        IAdapter[] memory currentAdapters,\n        IAdapter[] memory newAdapters,\n        Settings[] memory settings\n    ) public onlyOwner {\n        if (currentAdapters.length != newAdapters.length || currentAdapters.length != settings.length)\n            revert UnequalArrayLengths();\n        for (uint256 i = 0; i < currentAdapters.length; i++) {\n            if (!_settings[domain][currentAdapters[i]].quarantined) revert AdapterNotQuarantined(currentAdapters[i]);\n        }\n        _disableAdapters(domain, currentAdapters);\n        _enableAdapters(domain, newAdapters);\n        initSettings(domain, newAdapters, settings);\n    }\n\n    /// @inheritdoc IGiriGiriBashi\n    function resolveChallenge(\n        uint256 domain,\n        uint256 id,\n        IAdapter adapter,\n        IAdapter[] memory adapters\n    ) public returns (bool success) {\n        // check if challenge exists, revert if false\n        bytes32 challengeId = getChallengeId(domain, id, adapter);\n        if (_challenges[challengeId].challenger == address(0))\n            revert ChallengeNotFound(challengeId, domain, id, adapter);\n\n        for (uint256 i = 0; i < adapters.length; ) {\n            if (adapters[i] == adapter) revert AdaptersCannotContainChallengedAdapter(adapters, adapter);\n            unchecked {\n                ++i;\n            }\n        }\n\n        Challenge storage challenge = _challenges[challengeId];\n        Settings storage adapterSettings = _settings[domain][adapter];\n        bytes32 storedHash = adapter.getHash(domain, id);\n\n        if (storedHash == bytes32(0)) {\n            if (block.timestamp < challenge.timestamp + adapterSettings.timeout)\n                revert AdapterHasNotYetTimedOut(adapter);\n            adapterSettings.quarantined = true;\n            challenge.challenger.transfer(challenge.bond);\n            success = true;\n        } else {\n            // if adapters + 1 equals threshold && adapters + adapter report the same header\n            if (adapters.length == getDomain(domain).threshold - 1) {\n                checkAdapterOrderAndValidity(domain, adapters);\n                bytes32 canonicalHash = hashi.getHash(domain, id, adapters);\n                if (canonicalHash == storedHash) {\n                    bondRecipient.transfer(challenge.bond);\n                    success = false;\n                } else {\n                    revert IHashi.AdaptersDisagree(adapter, adapters[0]);\n                }\n            } else {\n                // check if adapters report the same header as adapter\n                bytes32 canonicalHash = getHash(domain, id, adapters);\n                if (canonicalHash == storedHash) {\n                    bondRecipient.transfer(challenge.bond);\n                    success = false;\n                } else {\n                    adapterSettings.quarantined = true;\n                    challenge.challenger.transfer(challenge.bond);\n                    success = true;\n                }\n            }\n        }\n        emit ChallengeResolved(challengeId, domain, id, adapter, challenge.challenger, challenge.bond, success);\n\n        delete challenge.challenger;\n        delete challenge.timestamp;\n        delete challenge.bond;\n    }\n\n    /// @inheritdoc IGiriGiriBashi\n    function setBondRecipient(address payable _bondRecipient) public onlyOwner {\n        bondRecipient = _bondRecipient;\n        emit BondRecipientSet(_bondRecipient);\n    }\n\n    /// @inheritdoc IGiriGiriBashi\n    function setChallengeRange(uint256 domain, uint256 range) public onlyOwner {\n        if (_challengeRanges[domain] != 0) revert ChallengeRangeAlreadySet(domain);\n        _challengeRanges[domain] = range;\n        emit ChallengeRangeUpdated(domain, range);\n    }\n\n    function setHashi(IHashi _hashi) public override onlyInitializing {\n        _setHashi(_hashi);\n    }\n\n    /// @inheritdoc IGiriGiriBashi\n    function setThreshold(uint256 domain, uint256 threshold) public zeroCount(domain) {\n        _setThreshold(domain, threshold);\n    }\n\n    function initSettings(uint256 domain, IAdapter[] memory _adapters, Settings[] memory adapters) private {\n        if (_adapters.length != adapters.length) revert UnequalArrayLengths();\n        for (uint256 i = 0; i < _adapters.length; i++) {\n            IAdapter adapter = _adapters[i];\n            _settings[domain][adapter].quarantined = false;\n            _settings[domain][adapter].minimumBond = adapters[i].minimumBond;\n            _settings[domain][adapter].startId = adapters[i].startId;\n            _settings[domain][adapter].idDepth = adapters[i].idDepth;\n            _settings[domain][adapter].timeout = adapters[i].timeout;\n            emit SettingsInitialized(domain, adapter, adapters[i]);\n        }\n    }\n\n    function updateHead(uint256 domain, uint256 id) private {\n        if (id > _heads[domain]) _heads[domain] = id;\n        emit NewHead(domain, id);\n    }\n}\n"
    },
    "contracts/ownable/ShoyuBashi.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.20;\n\nimport { ShuSo } from \"./ShuSo.sol\";\nimport { IAdapter } from \"../interfaces/IAdapter.sol\";\nimport { IHashi } from \"../interfaces/IHashi.sol\";\nimport { IShoyuBashi } from \"../interfaces/IShoyuBashi.sol\";\n\ncontract ShoyuBashi is IShoyuBashi, ShuSo {\n    constructor(address _owner, address _hashi) ShuSo(_owner, _hashi) {} // solhint-disable no-empty-blocks\n\n    function setHashi(IHashi _hashi) public override {\n        _setHashi(_hashi);\n    }\n\n    /// @inheritdoc IShoyuBashi\n    function setThreshold(uint256 domain, uint256 threshold) public {\n        _setThreshold(domain, threshold);\n    }\n\n    /// @inheritdoc IShoyuBashi\n    function enableAdapters(uint256 domain, IAdapter[] memory adapters) public {\n        _enableAdapters(domain, adapters);\n    }\n\n    /// @inheritdoc IShoyuBashi\n    function disableAdapters(uint256 domain, IAdapter[] memory adapters) public {\n        _disableAdapters(domain, adapters);\n    }\n\n    /// @inheritdoc IShoyuBashi\n    function getUnanimousHash(uint256 domain, uint256 id) public view returns (bytes32) {\n        return _getUnanimousHash(domain, id);\n    }\n\n    /// @inheritdoc IShoyuBashi\n    function getThresholdHash(uint256 domain, uint256 id) public view returns (bytes32) {\n        return _getThresholdHash(domain, id);\n    }\n\n    /// @inheritdoc IShoyuBashi\n    function getHash(uint256 domain, uint256 id, IAdapter[] memory adapters) public view returns (bytes32) {\n        return _getHash(domain, id, adapters);\n    }\n}\n"
    },
    "contracts/ownable/ShuSo.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.20;\n\nimport { OwnableUpgradeable } from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport { IAdapter } from \"../interfaces/IAdapter.sol\";\nimport { IHashi } from \"../interfaces/IHashi.sol\";\nimport { IShuSho } from \"../interfaces/IShuSho.sol\";\n\nabstract contract ShuSo is IShuSho, OwnableUpgradeable {\n    IAdapter internal constant LIST_END = IAdapter(address(0x1));\n\n    IHashi public hashi;\n    mapping(uint256 => mapping(IAdapter => Link)) private _adapters;\n    mapping(uint256 => Domain) private _domains;\n\n    constructor(address _owner, address _hashi) {\n        bytes memory initParams = abi.encode(_owner, _hashi);\n        init(initParams);\n    }\n\n    function init(bytes memory initParams) public initializer {\n        (address _owner, IHashi _hashi) = abi.decode(initParams, (address, IHashi));\n        __Ownable_init();\n        setHashi(_hashi);\n        transferOwnership(_owner);\n        emit Init(_owner, _hashi);\n    }\n\n    /// @inheritdoc IShuSho\n    function checkAdapterOrderAndValidity(uint256 domain, IAdapter[] memory adapters) public view {\n        for (uint256 i = 0; i < adapters.length; i++) {\n            IAdapter adapter = adapters[i];\n            if (i > 0 && adapter <= adapters[i - 1]) revert DuplicateOrOutOfOrderAdapters(adapter, adapters[i - 1]);\n            if (_adapters[domain][adapter].next == IAdapter(address(0))) revert InvalidAdapter(adapter);\n        }\n    }\n\n    /// @inheritdoc IShuSho\n    function getAdapterLink(uint256 domain, IAdapter adapter) public view returns (Link memory) {\n        return _adapters[domain][adapter];\n    }\n\n    /// @inheritdoc IShuSho\n    function getAdapters(uint256 domain) public view returns (IAdapter[] memory) {\n        IAdapter[] memory adapters = new IAdapter[](_domains[domain].count);\n        IAdapter currentAdapter = _adapters[domain][LIST_END].next;\n        for (uint256 i = 0; i < adapters.length; i++) {\n            adapters[i] = currentAdapter;\n            currentAdapter = _adapters[domain][currentAdapter].next;\n        }\n        return adapters;\n    }\n\n    /// @inheritdoc IShuSho\n    function getDomain(uint256 domain) public view returns (Domain memory) {\n        return _domains[domain];\n    }\n\n    /// @inheritdoc IShuSho\n    function getThresholdAndCount(uint256 domain_) public view returns (uint256, uint256) {\n        Domain storage domain = _domains[domain_];\n        uint256 threshold = domain.threshold;\n        uint256 count = domain.count;\n        if (threshold == 0) threshold = count;\n        return (threshold, count);\n    }\n\n    function setHashi(IHashi _hashi) public virtual;\n\n    /**\n     * @dev Disables the given adapters for a given domain.\n     * @param domain - Uint256 identifier for the domain for which to set adapters.\n     * @param adapters - Array of adapter addresses.\n     * @notice Reverts if adapters are out of order or contain duplicates.\n     * @notice Only callable by the owner of this contract.\n     */\n    function _disableAdapters(uint256 domain, IAdapter[] memory adapters) internal onlyOwner {\n        if (_domains[domain].count == 0) revert NoAdaptersEnabled(domain);\n        if (adapters.length == 0) revert NoAdaptersGiven();\n        for (uint256 i = 0; i < adapters.length; i++) {\n            IAdapter adapter = adapters[i];\n            if (adapter == IAdapter(address(0)) || adapter == LIST_END) revert InvalidAdapter(adapter);\n            Link memory current = _adapters[domain][adapter];\n            if (current.next == IAdapter(address(0))) revert AdapterNotEnabled(adapter);\n            IAdapter next = current.next;\n            IAdapter previous = current.previous;\n            _adapters[domain][next].previous = previous;\n            _adapters[domain][previous].next = next;\n            delete _adapters[domain][adapter].next;\n            delete _adapters[domain][adapter].previous;\n            _domains[domain].count--;\n        }\n        emit AdaptersDisabled(domain, adapters);\n    }\n\n    /**\n     * @dev Enables the given adapters for a given domain.\n     * @param domain - Uint256 identifier for the domain for which to set adapters.\n     * @param adapters - Array of adapter addresses.\n     * @notice Reverts if adapters are out of order or contain duplicates.\n     * @notice Only callable by the owner of this contract.\n     */\n    function _enableAdapters(uint256 domain, IAdapter[] memory adapters) internal onlyOwner {\n        if (_adapters[domain][LIST_END].next == IAdapter(address(0))) {\n            _adapters[domain][LIST_END].next = LIST_END;\n            _adapters[domain][LIST_END].previous = LIST_END;\n        }\n        if (adapters.length == 0) revert NoAdaptersGiven();\n        for (uint256 i = 0; i < adapters.length; i++) {\n            IAdapter adapter = adapters[i];\n            if (adapter == IAdapter(address(0)) || adapter == LIST_END) revert InvalidAdapter(adapter);\n            if (_adapters[domain][adapter].next != IAdapter(address(0))) revert AdapterAlreadyEnabled(adapter);\n            IAdapter previous = _adapters[domain][LIST_END].previous;\n            _adapters[domain][previous].next = adapter;\n            _adapters[domain][adapter].previous = previous;\n            _adapters[domain][LIST_END].previous = adapter;\n            _adapters[domain][adapter].next = LIST_END;\n            _domains[domain].count++;\n        }\n        emit AdaptersEnabled(domain, adapters);\n    }\n\n    /**\n     * @dev Returns the hash unanimously agreed upon by all of the given adapters.\n     * @param domain - Uint256 identifier for the domain to query.\n     * @param id - Uint256 identifier to query.\n     * @param adapters - Array of adapter addresses to query.\n     * @return hash - Bytes32 hash agreed upon by the adapters for the given domain.\n     * @notice adapters must be in numerical order from smallest to largest and contain no duplicates.\n     * @notice Reverts if adapters are out of order or contain duplicates.\n     * @notice Reverts if adapters disagree.\n     * @notice Revert if the adapters do not yet have the hash for the given ID.\n     * @notice Reverts if no adapters are set for the given domain.\n     */\n    function _getHash(uint256 domain, uint256 id, IAdapter[] memory adapters) internal view returns (bytes32) {\n        (uint256 threshold, uint256 count) = getThresholdAndCount(domain);\n        if (adapters.length == 0) revert NoAdaptersGiven();\n        if (count == 0) revert NoAdaptersEnabled(domain);\n        if (adapters.length < threshold) revert ThresholdNotMet();\n        checkAdapterOrderAndValidity(domain, adapters);\n        return hashi.getHash(domain, id, adapters);\n    }\n\n    /**\n     * @dev Returns the hash agreed upon by a threshold of the enabled adapters.\n     * @param domain - Uint256 identifier for the domain to query.\n     * @param id - Uint256 identifier to query.\n     * @return hash - Bytes32 hash agreed upon by a threshold of the adapters for the given domain.\n     * @notice If the threshold is set to 1, the function will return the hash of the first adapter in the list.\n     * @notice Reverts if no threshold is not reached.\n     * @notice Reverts if no adapters are set for the given domain.\n     */\n    function _getThresholdHash(uint256 domain, uint256 id) internal view returns (bytes32 hash) {\n        IAdapter[] memory adapters = getAdapters(domain);\n        (uint256 threshold, uint256 count) = getThresholdAndCount(domain);\n        if (count == 0) revert NoAdaptersEnabled(domain);\n        if (adapters.length < threshold) revert ThresholdNotMet();\n\n        bytes32[] memory hashes = new bytes32[](adapters.length);\n        for (uint256 i = 0; i < adapters.length; i++) {\n            hashes[i] = adapters[i].getHash(domain, id);\n        }\n\n        for (uint256 i = 0; i < hashes.length; i++) {\n            if (i > hashes.length - threshold) break;\n\n            bytes32 baseHash = hashes[i];\n            if (baseHash == bytes32(0)) continue;\n\n            uint256 num = 0;\n            for (uint256 j = i; j < hashes.length; j++) {\n                if (baseHash == hashes[j]) {\n                    num++;\n                    if (num == threshold) return hashes[i];\n                }\n            }\n        }\n        revert ThresholdNotMet();\n    }\n\n    /**\n     * @dev Returns the hash unanimously agreed upon by ALL of the enabled adapters.\n     * @param domain - Uint256 identifier for the domain to query.\n     * @param id - Uint256 identifier to query.\n     * @return hash - Bytes32 hash agreed upon by the adapters for the given domain.\n     * @notice Reverts if adapters disagree.\n     * @notice Revert if the adapters do not yet have the hash for the given ID.\n     * @notice Reverts if no adapters are set for the given domain.\n     */\n    function _getUnanimousHash(uint256 domain, uint256 id) internal view returns (bytes32 hash) {\n        IAdapter[] memory adapters = getAdapters(domain);\n        (uint256 threshold, uint256 count) = getThresholdAndCount(domain);\n        if (count == 0) revert NoAdaptersEnabled(domain);\n        if (adapters.length < threshold) revert ThresholdNotMet();\n        return hashi.getHash(domain, id, adapters);\n    }\n\n    /**\n     * @dev Sets the address of the IHashi contract.\n     * @param _hashi - Address of the hashi contract.\n     * @notice Only callable by the owner of this contract.\n     */\n    function _setHashi(IHashi _hashi) internal onlyOwner {\n        if (hashi == _hashi) revert DuplicateHashiAddress(_hashi);\n        hashi = _hashi;\n        emit HashiSet(hashi);\n    }\n\n    /**\n     * @dev Sets the threshold of adapters required for a given domain.\n     * @param domain - Uint256 identifier for the domain for which to set the threshold.\n     * @param threshold - Uint256 threshold to set for the given domain.\n     * @notice Only callable by the owner of this contract.\n     * @notice Reverts if threshold is already set to the given value.\n     */\n    function _setThreshold(uint256 domain, uint256 threshold) internal onlyOwner {\n        uint256 count = _domains[domain].count;\n        if (count == 0) revert CountCannotBeZero();\n        if (threshold < (count / 2) + 1) revert InvalidThreshold(threshold);\n        if (_domains[domain].threshold == threshold) revert DuplicateThreashold(threshold);\n        _domains[domain].threshold = threshold;\n        emit ThresholdSet(domain, threshold);\n    }\n\n    function _setDomainThreshold(uint256 domainId, uint256 threshold) internal {\n        _domains[domainId].threshold = threshold;\n    }\n}\n"
    }
  },
  "settings": {
    "viaIR": true,
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}